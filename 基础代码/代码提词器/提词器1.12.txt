效果
跳到导航跳到搜索
这是一个社区维护的维基。如果您发现错误，欢迎您修复它。

效果（也称为命令）用于从特定作用域内动态效果游戏。它们是对游戏当前状态的一次性更改，没有产生持久效果的能力。相反，修正用于对游戏的条件产生连续的、永恒的效果，可以用数字表示。效果块不能用于直接应用修正，但是它们可以添加可以应用修正的内容，最常见的是add_ideas。

效果在整个游戏中用于多种作用域，最常见的是国家国策、事件和决议。

请注意，某些效应可能会从变量中获取值，即 这在效果参数中由<变量>表示。有关变量效应的信息，请参阅变量。add_manpower = var:my_var

效果列表可能已过时。完整但未排序的效果列表可以在/Hearts of Iron IV/documentation/effects_documentation.html 或/Hearts of Iron IV/document/effects_documentation.md中找到。


目录
1	作用域
1.1	效果作用域
1.2	双作用域
2	任何作用域
2.1	常规
2.2	边境战争
3	国家作用域
3.1	常规
3.2	国家
3.3	法力
3.4	政治
3.5	权力平衡（BOP）
3.6	外交
3.7	自治
3.8	流亡政府
3.9	战争
3.10	资源
3.11	建筑物
3.12	国家重点
3.13	决定
3.14	任务
3.15	科技和学说
3.16	idea
3.17	单位
3.18	装备
3.19	军事
3.20	情报
3.21    人物
3.21.1	将领
3.21.2	国家领导人
3.21.3	顾问
3.22	历史
4	状态作用域
4.1	常规
4.2	建筑物
4.3	抵抗和依从
5	人物作用域作用域
5.1	常规
5.2	将领
5.3	国家领导人
5.4	战斗
5.5	特工
6	分部作用域
7	其他作用域
8	流控制
8.1	if 语句
8.2	随机效果
8.3	自建提示操作
9	meta effect
10	脚本化效果
作用域
主条目：作用域
这些不用作效果，而是作为作用域，用于更改正在为其执行效果的对象。

效果作用域
效果作用域：
名字	用法	目标类型	例	描述	已添加版本
every_possible_country	始终可用	国家	every_possible_country = { ... }	对每个达到限制的国家/地区（包括不存在的国家/地区）执行子项效果。	1.11
every_country	始终可用	国家	every_country = { … }	对达到限制的每个国家/地区执行包含效果。	1.0
random_country	始终可用	国家	random_country = { … }	对满足限制的随机国家/地区执行包含的效果。	1.0
every_other_country	仅在国家作用域内	国家	every_other_country = { … }	对满足限制且与包含限制的国家/地区不同的国家/地区执行包含效果。	1.0
random_other_country	仅在国家作用域内	国家	random_other_country = { … }	对满足限制且与包含该国家/地区不同的随机国家/地区执行包含效果。	1.0
every_country_with_original_tag	始终可用	国家	
every_country_with_original_tag = {
    original_tag_to_check = TAG  #required
    …                  #effects to run
}
对满足限制并具有指定原始标签的每个国家/地区执行包含的效果。	1.9
random_country_with_original_tag	始终可用	国家	
random_country_with_original_tag = {
    original_tag_to_check = TAG  #required
    …                  #effects to run
}
对满足限制并具有指定原始标签的随机国家/地区执行包含的效果。
every_neighbor_country	仅在国家作用域内	国家	every_neighbor_country = { … }	对满足限制并与所包含的国家/地区接壤的每个国家/地区执行包含效果。	1.0
random_neighbor_country	仅在国家作用域内	国家	random_neighbor_country = { … }	对符合限制并与包含该国家/地区接壤的随机国家/地区执行包含效果。	1.0
every_occupied_country	仅在国家作用域内	国家	every_occupied_country = { … }	对达到限制的每个国家/地区执行包含效果，并且其任何核心状态都由该限制所在的国家/地区控制。	1.9
random_occupied_country	仅在国家作用域内	国家	random_occupied_country = { … }	对满足限制的随机国家/地区执行包含效果，并且其任何核心状态都由该国家/地区控制。	1.9
every_enemy_country	仅在国家作用域内	国家	every_enemy_country = { … }	对每个达到限制的国家/地区执行包含效果，并与其中包含的国家/地区交战。	1.0
random_enemy_country	仅在国家作用域内	国家	random_enemy_country = { … }	对满足限制的随机国家/地区执行包含效果，并与其中包含的国家/地区交战。	1.0
every_subject_country	仅在国家作用域内	国家	every_subject_country = { … }	对满足限制的每个国家/地区执行包含效果，并且是其中包含该限制的国家/地区的附庸。	1.11
random_subject_country	仅在国家作用域内	国家	random_subject_country = { … }	对符合限制的随机国家/地区执行包含效果，并且是其中包含该国家/地区的附庸政权。	1.11
every_state	始终可用	状态/秒	every_state = { … }	对满足限制的每个状态执行包含的效果。	1.0
random_state	始终可用	state	
random_state = {
    prioritize = { 123 321 } #optional
    …    #effects to run
}
对满足限制的随机状态执行包含的效果。	1.0
every_neighbor_state	仅在状态作用域内	state	every_neighbor_state = { … }	对满足限制的每个状态执行包含的效果，并与包含该限制的状态相邻。	1.0
random_neighbor_state	仅在状态作用域内	state	random_neighbor_state = { … }	对满足限制的随机状态执行包含效果，并与该状态所包含的状态相邻。不支持优先级排序。	1.0
every_owned_state	仅在国家作用域内	state	every_owned_state = { … }	对满足限制且归其所在国家/地区所有的每个状态执行包含效果。	1.0
random_owned_state	仅在国家作用域内	state	
random_owned_state = {
    prioritize = { 123 321 } #optional
    …    #effects to run
}
对满足限制的随机状态执行包含效果，并且该状态归其中包含该状态的国家/地区所有。	1.0
every_core_state	仅在国家作用域内	state	every_core_state = { … }	对满足限制的每个状态执行包含效果，并且是其中包含的国家/地区的核心。	1.11
random_core_state	仅在国家作用域内	state	
random_core_state = {
    prioritize = { 123 321 } #optional
    …    #effects to run
}
对满足限制的随机状态执行包含的效果，并且是包含该状态的国家/地区的核心。	1.11
every_controlled_state	仅在国家作用域内	state	every_controlled_state = { … }	对满足限制的每个状态执行包含效果，并受其包含的国家/地区控制。	1.9
random_controlled_state	仅在国家作用域内	state	
random_controlled_state = {
    prioritize = { 123 321 } #optional
    …    #effects to run
}
对满足限制的随机状态执行包含效果，并由其中包含该状态的国家/地区控制。	1.9
random_owned_controlled_state	仅在国家作用域内	state	
random_owned_controlled_state = {
    prioritize = { 123 321 } #optional
    …    #effects to run
}
对满足限制的随机状态执行包含效果，并且由其中包含该状态的国家/地区拥有和控制。	1.3
every_unit_leader	仅在国家作用域内	人物	every_unit_leader = { … }	对每个符合限制的将领人（元帅、元帅、海军上将）执行包含效果，并由其中包含的国家招募。	1.5
random_unit_leader	仅在国家作用域内	人物	random_unit_leader = { … }	对符合限制的随机将领人（元帅、陆军元帅、海军上将）执行包含效果，并由其中包含的国家/地区招募。	1.5
every_army_leader	仅在国家作用域内	人物	every_unit_leader = { … }	对每个达到限制的军队领导人执行包含效果，并由其中包含的国家招募。	1.5
random_army_leader	仅在国家作用域内	人物	random_army_leader = { … }	对达到限制的随机军队首领执行包含效果，并被包含该国家/地区招募。	1.5
global_every_army_leader	始终可用	人物	global_every_army_leader = { … }	对每个达到极限的军队首领执行包含效果。最好使用every_army_leader除非有必要使用global_every_army_leader。	1.5
every_navy_leader	仅在国家作用域内	人物	every_navy_leader = { … }	对每个达到限制的海军将领执行包含效果，并被其中包含的国家招募。	1.5
random_navy_leader	仅在国家作用域内	人物	random_navy_leader = { … }	对达到限制的随机海军将领执行包含效果，并由其中包含的国家/地区招募。	1.5
every_operative	仅在国家/地区作用域内或业务作用域内	动作的	every_operative = { … }	对每个达到限制的特工执行包含效果，并由其中包含的国家招募。	1.9
random_operative	仅在国家/地区作用域内或业务作用域内	动作的	random_operative = { … }	对符合限制的随机特工执行包含的效果，并由其中包含的国家/地区招募。	1.9
every_character	仅在国家作用域内	人物	every_character = { … }	对每个符合限制的角色执行包含效果，并由其中包含的国家/地区招募。	1.11
random_character	仅在国家作用域内	人物	random_character = { … }	对符合限制的随机字符执行包含效果，并由其中包含该字符的国家/地区招募。	1.11
every_country_division	仅在国家作用域内	划分	every_country_division = { … }	对满足限制且归当前国家/地区所有的每个部队执行包含效果。	1.12
random_country_division	仅在国家作用域内	划分	random_country_division = { … }	对满足限制且归当前国家/地区拥有的随机部队执行包含的效果。	1.12
every_state_division	仅在状态作用域内	划分	every_state_division = { … }	对满足限制且位于当前状态中的每个部队执行包含的效果。	1.12
random_state_division	仅在状态作用域内	划分	random_state_division = { … }	对满足限制且位于当前状态内的随机部队执行包含的效果。	1.12
注意：其中一些作用域可能没有符合条件的国家/state

双作用域
以下作用域可用作效果作用域或限定作用域;有些还可以用作某些效果的右侧，并作为目标限定。如果可以用作目标，则会在表中标记它。

多个双作用域可能具有一个作用域，该作用域因使用位置而异，例如变量，可以设置为任何内容。

双重作用域：
名字	用法	目标类型	例	描述	可用作目标	已添加版本
根	始终可用	取决于使用情况	
ENG = {
    FRA = {
        GER = {
            declare_war_on = {
                target = ROOT
                type = annex_everything
            }
        }
    }
} #GER declares war on ENG (if there is no scope before ENG)
以块的根节点或第一个输入的作用域为目标。这包括默认的假定作用域，因此，例如，国家重点中的 ROOT 将始终指执行重点的国家/地区。	✓	1.0
这	始终可用	取决于使用情况	
set_temp_variable = { target_country = THIS.id }
以使用它的当前作用域为目标。例如，在every_state中使用时，它将引用当前正在评估的状态。主要用于变量或内置本地化命令。除了这两种情况之外，几乎没有用法。	✓	1.0
昨日	始终可用	取决于使用情况	
FRA = {
    random_country = {
        GER = {
            declare_war_on = {
                target = PREV
                type = annex_everything
            }
        }
    }
} #Germany declares war on random_country
以当前作用域所包含的作用域为目标。可以具有假定的默认作用域与 ROOT 不同的其他应用程序，例如在状态事件或某些on_actions中。可以无限期地链接为 PREV.PREV。	✓	1.0
从	始终可用	取决于使用情况	
declare_war_on = {
    target = FROM
    type = annex_everything
}

FROM = {
    load_oob = defend_ourselves
}
可以无限期地链接为 FROM。从。用于面向各种硬编码作用域，通常用作与 ROOT 相反的特定辅助作用域。例如：
在事件中，这是指发送事件的国家/地区。
在有针对性的决议或外交脚本限定中，这是指有针对性的作用域。
✓	1.0
<TAG>	始终可用	国家作用域	SOV = { … }	由标签或标签别名定义的国家/地区。标签别名在 /Hearts of Iron IV/common/country_tag_aliases 中定义，作为除了实际标签之外指代特定国家（例如内战一方）的一种方式。	✓	1.0
霸王	仅在国家作用域内	国家作用域	overlord = { … }	国家的领主，如果它是一个臣民。如果现在的国家是独立的，什么也做不了。	X	1.3
faction_leader	仅在国家作用域内	国家作用域	faction_leader = { … }	该国所属阵营的阵营领导人。	X	1.10.1
<state_id>	始终可用	状态作用域	145 = { … }	此 id 定义的状态。	✓	1.0
所有者	仅在state或战斗员作用域内	国家作用域	owner = { … }	在state作用域内，拥有state的国家/地区。在战斗作用域内，拥有师的国家。	X	1.0
控制者	仅在状态作用域内	国家作用域	controller = { … }	当前状态的控制者。	X	1.0
capital_scope	仅在国家作用域内	状态作用域	capital_scope = { … }	当前国家/地区首都所在的state。	X	1.0
<角色>	始终可用	人物作用域作用域	ENG_theodore_makhno = { … }	在 1.12.8 之前的游戏版本中，角色必须已由其作用域所在的国家/地区招募。	✓	1.11
event_target：<event_target_key>	始终可用	取决于使用情况	event_target:my_event_target = { … }	保存的事件目标或全局事件目标（注意，冒号后没有空格）	✓	1.0
变量：<变量>	始终可用	取决于使用情况	var:my_variable = { … }
add_to_faction = my_variable或
add_to_faction = var:my_variable	设置为作用域的变量。
当用作目标而不是作用域时，在大多数情况下可以省略 。var:

✓	1.5

任何作用域
可用于国家/地区、state或人物作用域作用域。

一般
常规任意作用域效果：
名字	参数	例子	描述	笔记	已添加版本
add_dynamic_modifier	modifier = <modifier_string>
修正的名称。

如果指定它，则动态修正的作用域将限定为此作用域。可选。

修正将在 x 天后删除。可选。scope = <scope>days = x	
add_dynamic_modifier = {
    modifier = example_dynamic_modifier
    scope = GER
    days = 14
}
将动态修正添加到指定的作用域（默认作用域为 ROOT）。
它将每天更新，除非force_update_dynamic_modifier效果而被迫提前更新。	例子可以在/Hearts of Iron IV/common/dynamic_modifiers/*.txt中找到。使用动态修正中的变量的任何修正都不会显示在此效果的自建提示中，而设置为静态值的修正将显示。	1.6
remove_dynamic_modifier	modifier = <modifier_string>
修正的名称。	
remove_dynamic_modifier = { modifier = sabotaged_ressources }
从当前作用域中删除动态修正	例子可以在/Hearts of Iron IV/common/dynamic_modifiers/*中找到.txt	1.6
force_update_dynamic_modifier	<bool>
bool。	
force_update_dynamic_modifier = yes
强制更新动态修正的变量，以防在每日检查之前需要更新它们。	 	1.6
set_global_flag	<flag>
用于标识全局旗标的唯一字符串。
OR

The flag to set.

Sets the flag to last for the specified amount of days. Optional.

The new value of the flag on the scale from -2 147 483 648 to 2 147 483 647. flag = <flag>days = <int>value = <int>

set_global_flag = my_flag
set_global_flag = {
    flag = my_flag
    days = 123
    value = 1
}
定义全局旗标。	No tooltip is shown. The flag in this effect is used in the meaning of 'boolean flag', used to store information.	1.0
play_song	<song title from .asset>
A music file located in the music folder and .asset	
play_song = "general_peace_1"
Plays an audio track	The song must be defined in a music station in order to work. More information can be found in the Music modding page. If you wish to simply play a sound, the sound_effect effect should be used instead.	1.9.3
clr_global_flag	<flag>
The unique string of a global flag to clear.	
clr_global_flag = my_flag
Clears a defined global flag.	No tooltip is shown	1.0
modify_global_flag	flag = <flag>
The global flag to modify.
value = <value>
The value to set it to: 0 or 1
modify_global_flag = {
    flag = my_flag
    value = 1
}
Modifies a global flag.	Use variables instead.	1.0
custom_effect_tooltip	<string>
A localized string to display in the tooltip.	
custom_effect_tooltip = my_tooltip_tt
Displays a localized key in the effect tooltip.		1.0
log	<string>
An string to in the game.log	
log = "myVariable: [?myVariable]"
Displays a string in the user directory's /Hearts of Iron IV/logs/game.log file when executed, as well as showing up in the console if it is open when the logging effect was executed.	Accepts all localisation commands (e.g. , , etc) [Root.GetName][GetDateText]	1.5
save_event_target_as	<string>
An unique string to identify the event target with.	
capital_scope = {
    save_event_target_as = my_state
}
Saves the current scope as a key. Is cleared once execution ends (i.e. end of event).	Use event_target:<key> to access the scope.
Do not use in Scripted GUIs.	1.0
save_global_event_target_as	<string>
An unique string to identify the global event target with.	
random_other_country = {
    save_global_event_target_as = my_country
}
Saves the current scope as a key. Persists after execution until cleared via effect.	Use event_target:<key> to access the scope.
Do not use in Scripted GUIs.	1.0
clear_global_event_target	<string>
The unique string of the global event target to clear.	
clear_global_event_target = my_country
Clears a specific global event target.		1.0
clear_global_event_targets	yes
Boolean.	
clear_global_event_targets = yes
Clears all global event targets.		1.0
sound_effect	<string>
A sound reference from an .asset file.	
sound_effect = "boom"
Plays the specified sound once.	The sound effect must be properly defined in /Hearts of Iron IV/sound/ More info can be found in the Sound modding article.	1.0
randomize_weather	<int>
A seed integer.	
randomize_weather = 12345
Randomizes the weather with the specified seed.		1.0
set_province_name	id = <id>
The id of the province to be changed.
name = <string>
The name to change the province to.

set_province_name = {
    id = 325
    name = LOC_KEY
}
Changes the specified province's name to the specified name.	Localisation keys are to be defined in /Hearts of Iron IV/localisation/*_l_<language>.yml	1.3
reset_province_name	<id>
The id of the province to reset.	
reset_province_name = 325
重置指定小地块的名称。		1.3
create_dynamic_country	original_tag = <tag>
国家/地区要使用的原始标记。
copy_tag = <tag>
如果指定，则从此标签而不是原始标签复制内容。

将在新的动态国家/地区执行的效果。<effects>
create_dynamic_country = {
    original_tag = POL
    copy_tag = SOV
    add_political_power = 100
    transfer_state = 123
}
创建一个新的动态国家，类似于内战中使用的国家。
它将原始标签的每个内核添加为核心。它需要在国家作用域内创建。

如果动态国家尚不存在，则可以使用reserve_dynamic_country效果，以确保它不会被其他动态国家创建覆盖。
如果您需要创建一个“本地”子国家/地区（例如，为巴西里奥格兰登斯共和国创建一个动态国家/地区，不包括北部各state），则需要删除on_action文件中其他每个state的核心。

1.9
damage_units	province = <id>
损坏单位的小地块。
state = <id>
说明损坏单位的位置。

破坏单位的战略区域。

仅当拥有商品的国家/地区满足其中的限定时，才会删除商品。

对单位造成的损坏百分比。

对单位造成的损害百分比，特别是对组织造成的损害百分比。

对单位造成的伤害对力量的百分比。

如果设置，将损害单位总组织/兵力的比率伤害。

如果指定，则需要编制名称匹配。

会伤害军队单位。

会伤害海军单位。region = <id>limit = { <triggers> }damage = <fraction>org_damage = <fraction>str_damage = <fraction>ratio = <yes>template = <string>army = <bool>navy = <bool>

damage_units = {
    province = 42
    state = 5
    region = 5
    limit = { has_country_flag = TAG_test }
    damage = 0.5
    org_damage = 0.5
    str_damage = 0.5
    ratio = yes
    template = "template_name"
    army = no
    navy = yes
}
损坏指定区域内的单位。		1.11
create_entity	entity = <gfx_entry>
要生成的实体，在 /Hearts of Iron IV/gfx/entities/*.asset 文件中定义。
id = int
可以通过其他效果引用的数字 ID。可选。

如果提供，将使用此变量存储实体的 id。可选。

实体的 X 位置。

实体的 Y 位置。

实体的 Z 位置。

要用作实体位置的中间小地块。

要用作实体位置的中间状态。

以弧度为单位的实体旋转。

实体的大小。

需要最低缩放级别才能看到实体。

国家/地区必须满足的脚本限定才能看到实体。var = <variable>x = <int>y = <int>z = <int>province = <int>state = <int>rotation = <decimal>scale = <decimal>min_zoom = <decimal>visible = <scripted_trigger>

create_entity = {
    entity = entity_name
    id = 123
    var = var_name
    x = 42
    y = 21
    z = 3
    province = 123
    state = 42
    rotation = 1.2
    scale = 10.0
    min_zoom = 100.0
    visible = scripted_trigger_name
}
创建实体。	使用与地图相同的坐标系。旋转的正变化导致逆时针旋转，完整的 360 度旋转约为 6.28 弧度。相比之下，默认最小缩放级别（最靠近地图）为 50 个单位，而默认最大缩放级别为 3000 个单位。	1.11
destroy_entity	<id>
要销毁的实体的 ID。	
destroy_entity = 123
删除实体	ID 由create_entity效果设置。	1.11
set_entity_movement	id = <ID>
要修改的实体的 ID。
ratio = <int>
起始位置与要放置实体的目标位置之间的距离。

定位后要应用的旋转。
开始和目标参数：rotation = <int>
x = <int>
点的 X 位置。
y = <int>
点的 Y 位置。
z = <int>
点的 Z 位置。
province = <int>
以中间为点的小地块。
state = <int>
要用作点的中间状态。
set_entity_movement = {
    id = 123
    start = {
        x = 42
        y = 21
        z = 3
    }
    target = {
        province = 124
    }
    ratio = 0.5
    rotation = 1.2
}
使用两个坐标设置图元的位置和旋转。	ID 由create_entity效果设置。使用与地图相同的坐标系。旋转的正变化导致逆时针旋转，完整的 360 度旋转约为 6.28 弧度。	1.11
set_entity_position	id = <id>
x = <int>
y = <int>
z = <int>
province = <int>
state = <int>	
set_entity_position = {
  id = 123
  x = 42
  y = 21
  z = 3
  province = 123
  state = 42
}
设置现有图元的位置	ID 由create_entity效果设置。使用与地图相同的坐标系。	1.11
set_entity_rotation	id = <ID>
要修改的实体的 ID。
rotation = <decimal>
The new angle in radians.

set_entity_rotation = {
    id = 123
    rotation = 0.23
}
设置现有图元的当前朝向角度。	ID 由create_entity效果设置。正变化导致逆时针旋转，完整的 360 度旋转约为 6.28 弧度。	1.11
set_entity_scale	id = <ID>
The ID of the entity to modify.
scale = <decimal>
The scale to change the entity to.

set_entity_scale = {
  id = 123
  scale = 5.0
}
Sets the size of an existing entity.	IDs are set by the create_entity effect.	1.11
set_entity_animation	id = <int>
The ID of the entity to modify.
animation = <animation_type>
The animation entry to apply.

set_entity_animation = {
    id = 123
    animation = "shoot_lasers"
}
设置指定图元的动画。	ID 由create_entity效果设置。动画在 /Hearts of Iron IV/gfx/models/**/*.asset 文件中定义。	1.11
build_railway	level = <int>
默认值为 1
build_only_on_allied = <bool>
默认情况下为否，如果是，并且在国家作用域内，它将仅建立在所涵盖国家/地区的盟国领土上。

默认为否，如果是，则每个选项将尝试回退到下一个可用选项。





如果使用开始状态/目标状态，游戏将选择供应最好的小地块。如果使用state省/目标省，游戏将链接这两个省。fallback = <bool>path = { <list of provinces> }start_province = <int>target_province = <int>start_state = <int>target_state = <int>

build_railway = {
    level = 1
    build_only_on_allied = yes
    controller_priority = {
        base = 1
        modifier = {
            tag = MAN
            add = 2
        }
    }
    fallback = yes
    path = { 42 10 20 30 40 84 }
    start_province = 42
    target_province = 84
}
build_railway = {
    level = 1
    build_only_on_allied = yes
    controller_priority = {
        base = 1
        modifier = {
            tag = MAN
            add = 2
        }
    }
    fallback = yes
    path = { 50 10 20 30 40 100 }
    start_state = 50
    target_state = 100
}
添加两个省之间或沿预定义路径的铁路级别。		1.11
边境战争
与边境战争相关的任意作用域效果：
名字	参数	例子	描述	笔记	已添加版本
start_border_war	change_state_after_war = <bool>
战后国家是否易手。
攻击者或防御方作用域

一方正在战斗的状态。

该state使用的小地块数。

为获胜的一方开火的事件。

事件为一方开火损失。

在平局中为一方开火的事件。

战斗中的修正。默认值为 0。

适用于挖掘加成的修正。默认值为 1。

该修正应用于地形加成。默认值为 1。state = <id> / <variable>num_provinces = <id>on_win = <id>on_lose = <id>on_cancel = <id>modifier = <decimal>dig_in_factor = <decimal>terrain_factor = <decimal>
start_border_war = {
    change_state_after_war = no
    attacker = {
        state = 527
        num_provinces = 4
        on_win = japan_border_conflict.2
        on_lose = japan_border_conflict.3
        on_cancel = japan_border_conflict.4
        modifier = 0.1
        dig_in_factor = 0
        terrain_factor = 0
    }	
    defender = {
        state = 408
        num_provinces = 4
        on_win = japan_border_conflict.3
        on_lose = japan_border_conflict.2
        on_cancel = japan_border_conflict.4
    }
}
为指定的攻击者和防御方发起边界战争。参与国是指定国家的所有者。	 	1.5
set_border_war_data	attacker = <id> / <variable>
攻击者状态。
defender = <id> / <variable>
后卫状态。

应用于攻击者强度的修正。

应用于攻击者强度的修正。

边境战争中使用的战斗宽度。attacker_modifier = <id> / <variable>defender_modifier = <id> / <variable>combat_width = <id> / <variable>

set_border_war_data = {
    attacker = 527
    defender = 408
    defender_modifier = 0.15
    combat_width = 100
}
在正在进行的边界战争中为攻击者和防御者设置奖励或惩罚。start_border_war后使用。	 	1.5
cancel_border_war	attacker = <id> / <variable>
攻击者状态。
defender = <id> / <variable>
后卫状态。

阻止事件start_border_war触发。dont_fire_events = <bool>

cancel_border_war = {
    dont_fire_events = yes
    defender = 408
    attacker = 527
}
取消正在进行的没有赢家的边境战争。	 	1.5
finalize_border_war	attacker = <id> / <variable>
攻击者状态。
defender = <id> / <variable>
后卫状态。

使攻击者成为赢家。

使防守者成为赢家。attacker_win = <bool>defender_win = <bool>

finalize_border_war = {
    attacker_win = yes
    attacker = 527
    defender = 408
}
结束正在进行的边境战争。	 	1.5
国家作用域
此处的效果必须在国家作用域内使用。

一般
一般国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
set_country_flag	<flag>
用于标识国旗的唯一字符串。
或

要设置的旗标。

将旗标设置为持续指定的天数。可选。

旗标的新值，作用域从 -2 147 483 648 到 2 147 483 647。flag = <flag>days = <int>value = <int>

set_country_flag = my_flag
set_country_flag = {
    flag = my_flag
    days = 123
    value = 1
}
定义国家/地区旗标。	不显示自建提示。此效果中的旗标用于“bool旗标”的含义，用于存储信息。 要更改代表国家/地区的旗帜，请参阅修饰标签。	1.0
clr_country_flag	<flag>
要清除的国家国旗的唯一字符串。	
clr_country_flag = my_flag
清除定义的国家/地区旗标。	 	1.0
modify_country_flag	flag = <flag>
要修改的国家/地区旗标。
value = <value>
要将其设置为的值：0 或 1

modify_country_flag = {
    flag = my_flag
    value = 1
}
修改国旗。	请改用变量。	1.3
country_event	id = <event>
要触发的事件。
days = <int> / <variable>
在指定的天数内触发事件。可选。

在指定的小时数内触发事件。可选。

将小时的随机数（介于 0 和 random_hours 之间，包括 0 和 ）添加到计划的触发时间。可选。

将天数的随机数（介于 <> 和 random_days 之间，包括 <> 和 之间）添加到计划的触发时间。可选。hours = <int> / <variable>random_hours = <int> / <variable>random_days = <int> / <variable>

country_event = {
    id = my_event.1
    days = 10
    random_hours = 12
    random_days = 10
}
country_event = my_event.1
触发当前国家/地区的指定事件。	不需要重复检查限定的地方可以作为调度事件的性能轻量级替代方案。如果使用事件的 ID 而不是参数，则存在缩短的变体。randommean_time_to_happen	1.0
news_event	id = <event>
要触发的事件。
days = <int> / <variable>
在指定的天数内触发事件。可选。

在指定的小时数内触发事件。可选。

将小时的随机数（介于 0 和 random_hours 之间，包括 0 和 ）添加到计划的触发时间。可选。

将天数的随机数（介于 <> 和 random_days 之间，包括 <> 和 之间）添加到计划的触发时间。可选。hours = <int> / <variable>random_hours = <int> / <variable>random_days = <int> / <variable>

news_event = {
    id = my_event.1
    days = 10
    random_hours = 12
    random_days = 10
}
news_event = my_event.1
触发当前国家/地区的指定新闻事件。	新闻事件使用与国家/地区事件不同的界面。
不需要重复检查限定的地方可以作为调度事件的性能轻量级替代方案。如果使用事件的 ID 而不是参数，则存在缩短的变体。randommean_time_to_happen

1.0
set_cosmetic_tag	<string>
要切换到的修饰标签。	
set_cosmetic_tag = SAF_SOV_communism
使当前作用域使用指定的修饰标记，更改名称和旗标。	 	1.3
drop_cosmetic_tag	<bool>
bool。	
drop_cosmetic_tag = yes
使当前作用域删除他们正在使用的当前修饰标记。	 	1.3
set_rule	<rule>
bool。
desc = <localisation key>
用作规则描述的本地化。

set_rule = {
    desc = TAG_my_rule_description
    can_create_factions = yes
}
切换当前作用域的特殊游戏规则。	可能的规则：
can_boost_other_ideologies
can_create_factions
can_declare_war_on_same_ideology
can_declare_war_without_wargoal_when_in_war
can_decline_call_to_war
can_force_government
can_generate_female_aces
can_guarantee_other_ideologies
can_join_factions
can_join_factions_not_allowed_diplomacy
can_join_opposite_factions
can_lower_tension
can_not_declare_war
can_occupy_non_war
can_only_justify_war_on_threat_country
can_puppet
can_send_volunteers
can_use_kamikaze_pilots
units_deployed_to_overlord（仅限科目）
1.0
set_party_rule	ideology = <ideology group>
党的意识形态小组。
desc = <localisation key>
用于规则的说明。可选，默认与默认值相同。

规则的新值。<rule> = <bool>

set_party_rule = {
    ideology = democratic
    desc = TAG_my_rule_description
    can_create_factions = yes
}
切换当前作用域政党的特殊游戏规则。		1.12
set_relation_rule	target = <scope>
规则的目标。
desc = <localisation key>
用于规则的说明。可选，默认与默认值相同。

规则的新值。<rule> = <bool>

set_relation_rule = {
    target = SOV
    desc = TAG_my_rule_description
    can_not_declare_war = yes
}
切换当前作用域的特殊游戏规则，仅针对指定国家/地区。		1.12
scoped_sound_effect	<string>
来自 .asset 文件的声音引用。	
scoped_sound_effect = "boom"
仅为当前国家/地区播放一次指定的声音。	音效必须在 /钢铁之心 IV/声音/ 更多信息可以在声音模组文章中找到。	1.6
scoped_play_song	<song title from .asset>
位于音乐文件夹和 .asset 中的音乐文件	
scoped_play_song = "general_peace_1"
仅播放指定国家/地区的音轨。	歌曲必须在音乐电台中定义才能工作。更多信息可以在音乐模组页面中找到。如果只想播放声音，则应改用scoped_sound_effect效果。	1.9.3
goto_province	<id>
省的 ID 转到。	
goto_province = 325
将相机位置移到指定小地块上方。		1.0
goto_state	<scope> / <variable>
状态的 ID 转到。	
goto_state = 1
goto_state = var:some_state
将相机位置移动到指定状态之上。		1.0
change_tag_from	<scope> / <variable>
要改变的国家。
change_tag_from = ROOT
change_tag_from = var:from.country
将播放器从目标作用域切换到当前作用域。	玩家成为的国家/地区必须是使用该命令的作用域。	1.0
reserve_dynamic_country	<bool>	
reserve_dynamic_country = yes
保留充满活力的国家，确保即使它不存在也不会被回收用于内战。	通常与create_dynamic_country结合使用。	1.9
force_update_map_mode	limit = { ... }
地图模式刷新所需的限定。可选。
mapmode = <id>
自定义地图模式的 ID。

force_update_map_mode = {
    limit = {
        is_ai = no
    }
    mapmode = my_map_mode
}
强制刷新玩家指定的地图模式，而不是等待每日更新。	地图模式在 /钢铁之心 IV/common/map_modes/* 中定义.txt	1.11
add_ai_strategy	type = <type>
策略的类型。
id = <scope>
该战略针对哪个国家。

策略添加的权重。value = <int>

add_ai_strategy = {
    type = alliance
    id = GER
    value = 200
}
为当前作用域设置 AI 策略。	有关更多详细信息，请参阅 AI 模组。	1.0
状态
这些效果特别是与state相关的国家作用域效应，而不是state作用域内的效果。

与国家相关的国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
add_state_core	<scope> / <variable>
要添加核心的状态。	
add_state_core = 345
将当前作用域的核心添加到指定状态。	 	1.0
remove_state_core	<scope> / <variable>
要从中删除核心的状态。	
remove_state_core = 345
从指定状态中删除当前作用域的核心。	 	1.0
set_capital	<scope> / <variable>
国家首都。	
set_capital = {state = 345}


set_capital = {
    state = 345
    remember_old_capital = no
}
使指定的状态成为当前作用域的首都状态。	语法已在 1.11 中更改。
它是“set_capital = 345”


如果没有另行说明，则会留下旧版本。

1.0
add_state_claim	<scope> / <variable>
要向其添加宣称的状态。	
add_state_claim = 345
为指定状态的当前作用域添加宣称。	 	1.0
remove_state_claim	<scope> / <variable>
要从中删除宣称的状态。	
remove_state_claim = 345
从指定状态中删除当前作用域的宣称。	 	1.0
set_state_owner	<scope> / <variable>
要更改所有权的状态。	
set_state_owner = 345
使当前作用域成为指定状态的所有者。	这可能无法转移控件，因此建议改用transfer_state，除非在不转移控制权的情况下转移所有权。	1.0
set_state_controller	<scope> / <variable>
要更改控制者的状态。	
set_state_controller = 345
使当前作用域成为指定状态的控制者。	 	1.0
transfer_state	<scope> / <variable>
要更改其所有者和控制者的状态。	
transfer_state = 345
使当前作用域成为指定状态的所有者和控制者。	transfer_state_to作为状态作用域的变体存在。	1.0
set_province_controller	<id>
要更改控制者的小地块。	
set_province_controller = 2999
将指定小地块的控制者更改为当前作用域。	 	1.0
玛娜
这种用法中的Mana表示政治点，稳定性，战争支持和顶栏中的其他值。相反，燃料在资源部分，而车队可以通过add_equipment_to_stockpile添加/删除。

法力相关国家作用域效果：
名字	参数	例子	描述	笔记	已添加版本
add_political_power	<int> / <variable>
要添加的量。	
add_political_power = 100
add_political_power = var:my_var
将指定数量的政治点添加到当前作用域。	 	1.0
set_political_power	<int> / <variable>
要添加的量。	
set_political_power = 100
为当前作用域设置指定的政治点量。	 	1.0
add_stability	<int> / <variable>
要添加的量。	
add_stability = 0.1
添加到当前作用域的当前稳定性值。	稳定性值介于 0 和 1 之间。	1.5
set_stability	<int> / <variable>
要添加的量。	
set_stability = 0.5
设置当前作用域的当前稳定性值。	稳定性值介于 0 和 1 之间。	1.5
add_war_support	<int> / <variable>
要添加的量。	
add_war_support = 0.1
添加到当前作用域的当前战争支持值。	战争支持值介于 0 和 1 之间。	1.5
set_war_support	<int> / <variable>
要设置的数值。	
set_war_support = 0.5
设置当前作用域的当前战争支持值。	战争支持值介于 0 和 1 之间。	1.5
add_command_power	<int> / <variable>
要添加的量。	
add_command_power = 100
将指定的命令力量添加到当前作用域。	 	1.5
add_manpower	<int> / <variable>
要添加的量。	
add_manpower = 100000
add_manpower = var:my_var
将指定的人力添加到当前作用域。	 	1.0
army_experience	<float> / <variable>
要添加的量。	
army_experience = 10
将指定的军队经验量添加到当前作用域。	 	1.0
navy_experience	<float> / <variable>
要添加的量。	
navy_experience = 10
将指定的海军经验量添加到当前作用域。	 	1.0
air_experience	<float> / <variable>
要添加的量。	
air_experience = 10
将指定的空中体验量添加到当前作用域。	 	1.0
政治
政治国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
hold_election	<scope>
举行选举的国家。	
hold_election = ROOT
执行当前作用域的on_new_term_election操作中的事件。	 	1.0
add_popularity	ideology = <ideology>
要改变的一方。
popularity = <int> / <variable>
要更改的支持度。

add_popularity = {
    ideology = fascism
    popularity = -0.5
}
调整当前作用域内指定方的支持度。	使用的值为 0 到 1。	1.0
set_politics	ruling_party = <ideology>
要设置的一方。
elections_allowed = <bool>
是否允许选举。可选。

上次选举的时候。可选。

选举在几个月内发生的频率。可选。

该国新执政党的长名，悬停在其上时出现。可选。

该国新执政党的名称。可选。last_election = <date>election_frequency = <int>long_name = <string>name = <string>
set_politics = {
	ruling_party = democratic
    elections_allowed = no
    last_election = "1935.12.17"
    election_frequency = 48
    long_name = TAG_party_long
    name = TAG_party
}
设置当前作用域的政党设置。	 
以前包含“各方”参数，该参数已被“set_popularities”命令弃用。从版本 1.7 开始，“各方”参数不再有效

1.0 （更新 1.7）
set_popularities	<ideology> = <int>/<variable>
要设置的支持度。	
set_popularities = {
	democratic = 50
	neutrality = 15
	fascism = 30
	communism = 5
}
设置当前作用域的政党支持度。	 
支持度必须加起来为 100，否则该命令将不起作用。

1.7
set_political_party	ideology = <ideology>
要改变的一方。
popularity = <int>
要设置的支持度。

set_political_party = {
    ideology = fascism
    popularity = 50
}
设置当前作用域内指定政党的支持度。	 	1.0
set_party_name	ideology = <ideology>
要改变的一方。
long_name = <string>
党派的新全名。

党派的新简称。name = <string>

set_party_name = {
    ideology = neutrality
    long_name = GER_neutrality_party_kaiserreich_long
    name = GER_neutrality_party_kaiserreich
}
更改当前作用域的指定政党的名称。	 	1.0
权力平衡
权力平衡（BOP）在 /Hearts of Iron IV/common/bop/*.txt 文件中定义。

与权力平衡相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
set_power_balance	id = <BoP ID>
设置/修改的权力平衡。
left_side = <BoP side ID>
国际收支平衡表的左侧。

国际收支平衡表的右侧。

国际收支平衡表是否被视为默认值。默认为 false。

国际收支平衡表的新值。可选，默认为不更改值。right_side = <BoP side ID>set_default = <bool>set_value = <decimal>

set_power_balance = {
    id = my_bop
    left_side = my_bop_left_side
    right_side = my_bop_right_side
}
设置新的权力平衡或编辑现有平衡。	出现权力平衡（BOP）所必需的。	1.12
remove_power_balance	id = <BoP ID>
修改的权力平衡。	
remove_power_balance = {
    id = my_bop
}
完全消除权力平衡（BOP）。		1.12
add_power_balance_value	id = <BoP ID>
修改的权力平衡。
value = <decimal>
要添加的值。要在自建提示中显示的一侧。

可选。tooltip_side = <BoP side ID>
add_power_balance_value = {
    id = my_bop
    value = -0.1
    tooltip_side = my_bop_side
}
将权力平衡（BOP）推向一边。		1.12
add_power_balance_modifier	id = <BoP ID>
修改的权力平衡。
modifier = <static modifier>
要应用的静态修正。

add_power_balance_modifier = {
    id = my_bop
    modifier = my_static_modifier
}
应用权力平衡修正。		1.12
remove_power_balance_modifier	id = <BoP ID>
修改的权力平衡。
modifier = <static modifier>
要应用的静态修正。

remove_power_balance_modifier = {
    id = my_bop
    modifier = my_static_modifier
}
取消权力平衡修正。		1.12
remove_all_power_balance_modifiers	id = <BoP ID>
修改的权力平衡。	
remove_all_power_balance_modifiers = {
    id = my_bop
}
取消所有力量调节器平衡。		1.12
set_power_balance_gfx	id = <BoP ID>
修改的权力平衡。
side = <BoP side ID>
要更改GFX的一方。

要将 GFX 更改为的子画面。gfx = <sprite>

set_power_balance_gfx = {
    id = my_bop
    side = my_bop_side
    gfx = GFX_my_bop_side_new
}
改变权力平衡（BOP）中一方的外观。	GFX代码在 /Hearts of Iron IV/interface/*.gfx 文件中定义。	1.12
外交
外交国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
set_major	<bool>
bool。	
set_major = yes
使当前作用域成为主要国家。	 	1.0
create_faction	<string>
阵营的名称。	
create_faction = MY_FACTION_NAME
为当前作用域创建具有指定名称的阵营。当前作用域和任何附庸政权都会自动加入阵营。	 	1.0
add_to_faction	<TAG>
要添加到当前作用域的阵营中的国家的 TAG。	
FACTION_LEADER_TAG = { add_to_faction = TAG_TO_ADD }
将TAG_TO_ADD添加到FACTION_LEADER_TAG的阵营中。	 	1.0
leave_faction	<bool>
bool。	
leave_faction = yes
从他们所属的阵营中删除当前作用域。	 	1.5
remove_from_faction	<TAG>
目标国家/地区。	
remove_from_faction = TAG_TO_REMOVE
从当前作用域领导的阵营中删除指定的作用域。	 	1.0
dismantle_faction	<bool>
bool。	
dismantle_faction = yes
解散当前作用域的阵营。	 	1.0
set_faction_name	将阵营名称设置为位置名称。	
set_faction_name = SOME_LOC_KEY
更改阵营名称。	 	1.6
set_faction_leader	<bool>	
set_faction_leader = yes
将当前国家设置为阵营领导人。		1.0
set_faction_spymaster	<bool>	
set_faction_spymaster = yes
将当前国家设置为阵营间谍主管。		1.9
释放	<scope>
目标国家/地区。	
release = GER
将指定的不存在的国家/地区作为当前国家/地区拥有的国家/地区的自由国家/地区释放。	如果国家存在，效果就无济于事。指定国家/地区所包含的所有state都将提供给它。如果当前国家/地区在转移到释放国家/地区的状态上有一个核心，则该核心将丢失。如果希望使一个附庸政权成为一个独立的国家，请使用set_autonomy。拥有但不受控制的国家/地区将转移到释放的国家/地区，但不受其控制。	1.0
release_on_controlled	<scope>
目标国家/地区。	
release_on_controlled = GER
将指定的不存在的国家/地区作为当前国家/地区控制状态内的自由国家/地区释放。	如果国家存在，效果就无济于事。指定国家/地区所包含的所有state都将提供给它。如果当前国家/地区在转移到释放国家/地区的状态上有一个核心，则该核心将丢失。	1.9.1
release_puppet	<scope>
目标国家/地区。	
release_puppet = GER
将指定的不存在的国家/地区作为当前国家/地区拥有的state内的当前作用域的傀儡释放。	如果国家存在，效果就无济于事。指定国家/地区所包含的所有state都将提供给它。如果当前国家/地区在转移到释放国家/地区的状态上有一个核心，则该核心将丢失。拥有但不受控制的国家/地区将转移到释放的国家/地区，但不受其控制。	1.0
release_puppet_on_controlled	<scope>
目标国家/地区。	
release_puppet_on_controlled = GER
在当前国家/地区的受控状态内将指定的不存在的国家/地区作为当前作用域的傀儡释放。	如果国家存在，效果就无济于事。指定国家/地区所包含的所有state都将提供给它。如果当前国家/地区在转移到释放国家/地区的状态上有一个核心，则该核心将丢失。	1.9.1
release_autonomy	target = <scope> / <variable>
附庸政权国家/地区。
autonomy_state = <type>
要设置的自治状态的类型。

新的自由级别值。可选。freedom_level = <float>

release_autonomy = {
    target = VIN
    autonomy_state = autonomy_puppet
    freedom_level = 0.5
}
将指定的不存在的国家释放为当前国家/地区拥有的state内当前作用域的指定自治附庸。	如果国家存在，效果就无济于事。指定国家/地区所包含的所有state都将提供给它。如果当前国家/地区在转移到释放国家/地区的状态上有一个核心，则该核心将丢失。拥有但不受控制的国家/地区将转移到释放的国家/地区，但不受其控制。自治状态可以在/Hearts of Iron IV/common/autonomous_states/*.txt中找到。	1.3
give_guarantee	<scope>
目标国家/地区。	
give_guarantee = GER
目前的作用域保证了目标国家。	diplomatic_relation效果可用于删除它。	1.0
give_military_access	<scope>
目标国家/地区。	
give_military_access = GER
目前的作用域允许军事进入目标国家。	diplomatic_relation效果可用于删除它。	1.0
recall_attache	<scope>
带有随员的目标国家/地区。	
recall_attache = GER
从指定国家召回当前作用域的随员。	 	1.5
diplomatic_relation	country = <scope>
要改变与 ROOT 关系的目标国家/地区。
relation = <type>
与变化的关系。

关系是开始还是中断。active = <bool>

diplomatic_relation = {
    country = SOV
    relation = guarantee
    active = no
}
用于定义当前作用域和目标作用域国家之间的外交关系。	可能的关系：
non_aggression_pact
保证
木偶
military_access
docking_rights
1.0
add_opinion_modifier	target = <scope>
目标国家/地区。
modifier = <modifier>
要添加的外交修正。

add_opinion_modifier = {
    target = GER
    modifier = faction_traitor
}
当前作用域获得指向目标作用域的特定外交修正。也可用于修改贸易关系，方法是在/Hearts of Iron IV/common/opinion_modifiers/*.txt中<修正>中添加“trade = yes”。如果与交易opinion_modifier一起使用，则行为会逆转，这意味着目标获得当前作用域内的交易意见。	外交修正可在 /Hearts of Iron IV/common/opinion_modifiers/*.txt 中找到。	1.0
remove_opinion_modifier	target = <scope>
目标国家/地区。
modifier = <modifier>
要删除的外交修正。

remove_opinion_modifier = {
    target = GER
    modifier = faction_traitor
}
当前作用域将失去指向目标作用域的指定外交修正。	外交修正可在 /Hearts of Iron IV/common/opinion_modifiers/*.txt 中找到。	1.0
reverse_add_opinion_modifier	target = <scope>
目标国家/地区。
modifier = <modifier>
要添加的外交修正。

reverse_add_opinion_modifier = {
    target = GER
    modifier = faction_traitor
}
目标作用域获得针对当前作用域的特定外交修正。	外交修正可在 /Hearts of Iron IV/common/opinion_modifiers/*.txt 中找到。
当您不知道当前作用域时很有用。	1.0
add_relation_modifier	target = <scope>
目标国家/地区。
modifier = <modifier>
要添加的关系修正。

add_relation_modifier = {
    target = SWE
    modifier = HUN_dynastic_ties_license
}
当前作用域获得指向目标作用域的特定关系修正。	关系修正可在 /Hearts of Iron IV/common/modifiers/*.txt 中找到。	1.4
remove_relation_modifier	target = <scope>
目标国家/地区。
modifier = <modifier>
要删除的关系修正。

remove_relation_modifier = {
    target = SWE
    modifier = HUN_dynastic_ties_license
}
当前作用域将丢失指向目标作用域的指定关系修正。	关系修正可在 /Hearts of Iron IV/common/modifiers/*.txt 中找到。	1.4
add_collaboration	target = <scope>
目标国家/地区。
value = <0-1>
要添加多少协作。

add_collaboration = {
    target = TAG
    value = 0.3
}
在 TAG 中添加与作用域国家/地区的协作。		1.9
set_collaboration	target = <scope>
目标国家/地区。
value = <0-1>
将设置多少协作。

set_collaboration = {
    target = TAG
    value = 0.3
}
在 TAG 中设置与作用域国家/地区的协作。		1.9
recall_volunteers_from	<tag>
目标国家/地区。	
recall_volunteers_from = SPR
将派往指定国家/地区的志愿者召回当前国家/地区。		1.9
set_occupation_law	<law ID>
新特工法颁布的原作用域或.default_law	
USA = { GER = { set_occupation_law = foreign_civilian_oversight } } # Changes USA's occupation law for GER.
USA = { USA = { set_occupation_law = default_law } } # Changes the USA's default occupation law to the default.
制定该国的占领法案。	PREV 将是将更改占领法案的国家。如果 PREV 不是一个国家，则什么都不会改变。如果 PREV 是同一个国家/地区，则更改默认占用法。如果 PREV 不同，default_law将特定国家/地区的法律重置为全局默认，否则它将默认法律重置为具有定义的占领法案。starting_law = yes	1.12
set_occupation_law_where_available	<law ID>
新特工法颁布的原作用域或.default_law	
USA = { GER = { set_occupation_law_where_available = foreign_civilian_oversight } } # Changes USA's occupation law for GER where possible.
USA = { USA = { set_occupation_law_where_available = default_law } } # Changes the USA's default occupation law to the default where possible.
制定该国的占领法案。	与set_occupation_law相同，除非法律无法制定，则在每个较小的子集上再次尝试：如果违约是不可能的，则尝试每个被占领的国家;如果国家的法律无法改变，请尝试国内的每个state。	1.12
send_embargo	<tag>
目标国家/地区。	
send_embargo = ITA
禁运目标国家。		1.12
break_embargo	<tag>
目标国家/地区。	
break_embargo = ITA
停止禁运目标国家。		1.12
自治

与自治有关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
木偶	<scope>
目标国家/地区。
或

目标国家/地区。

目标国家是否会在其参与的所有非内战中实现和平。默认值为 true。

目标国家是否会在其参与的所有内战中实现和平。默认值为 true。target = <scope>end_wars = <bool>end_civil_wars = <bool>
puppet = GER
puppet = {
    target = ITA
    end_wars = no
}
使指定的国家/地区成为当前作用域的附庸政权。	所选择的自治国家是一个包含并在哪里满足/Hearts of Iron IV/commmon/autonomous_states/定义的国家，而不一定是autonomy_puppet。如果游戏找不到任何此类自治状态，则会导致桌面崩溃。default = yesallowed = { ... }	1.0
end_puppet	<scope>
目标国家/地区。	
end_puppet = GER
删除目标和当前作用域之间的附庸政权状态。	必须在领主的作用域内使用。	1.0
add_autonomy_ratio	value = <float>
要添加的自由分数。
localization = <string>
修正的本地化键。

add_autonomy_ratio = {
    value = 0.1
    localization = AST_adopt_westminster
}
将自由分数比率修正添加到当前作用域。	在附庸政权作用域内使用。	1.3
add_autonomy_score	value = <float>
要添加的自由分数。
localization = <string>
修正的本地化键。

add_autonomy_score = {
    value = 10
    localization = EXAMPLE
}
将精确自由度分数修正添加到当前作用域。	在附庸政权作用域内使用。	1.3
set_autonomy	target = <scope> / <variable>
附庸政权国家/地区。
autonomy_state = <type>
要设置的自治状态的类型。

新的自由级别值。可选。

将结束附庸政权参与的任何战争。

将结束附庸政权所遭受的任何内战freedom_level = <float>end_wars = <yes/no>end_civil_wars = <yes/no>
set_autonomy = {
    target = AST
    autonomy_state = autonomy_free
    end_wars = no
    end_civil_wars = no
}
设置指定国家/地区的自治级别，包括独立。	autonomy_free国家将释放附庸，但这种效果必须在目标国家当前领主的作用域内执行才能生效。自治状态可在 /Hearts of Iron IV/common/autonomous_states/*.txt 文件中找到。	1.3
流亡政府
流亡政府与国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
add_legitimacy	增加流亡政府的合法性。	
add_legitimacy = 10
增加合法性。	 	1.6
set_legitimacy	设定流亡政府的合法性。	
set_legitimacy = 10
设置合法性。	 	1.6
become_exiled_in	使一个国家成为一个流亡在既定国家的政府，具有固定的起始合法性。	
become_exiled_in = { target = <Host tag> legitimacy = <0-100> (starting legitimacy, optional) }
建立一个流亡政府。	必须从 ROOT、应该流放的国家/地区被解雇，或者必须使用 TAG 规范。	1.6
end_exile	结束流亡政府。	
end_exile = yes
结束流亡政府。	 	1.6
战争
与战争有关的国家作用域效果：
名字	参数	例子	描述	笔记	已添加版本
add_threat	<int>
要更改的数值。	
add_threat = 10
调整世界紧张程度。	 	1.0
add_named_threat	threat = <int>
要更改的数值。
name = <string>
本地化字符串。

add_named_threat = {
    threat = 5
    name = GER_rhineland
}
调整世界紧张度级别，并在“世界紧张度”自建提示中添加条目。	 	1.0
annex_country	target = <scope>
吞并哪个国家。
transfer_troops = yes
是否转移被吞并国的军队。

annex_country = {
    target = GER
    transfer_troops = yes
}
为当前作用域附上指定的国家/地区。	如果不转移部队，被吞并国的师的装备就会丢失。	1.0
add_to_war	targeted_alliance = <scope>
国家援助。
enemy = <scope>
攻击盟友的国家。

加入原因的本地化。可选。hostility_reason = <string>

add_to_war = {
    targeted_alliance = PREV
    enemy = HUN
    hostility_reason = asked_to_join
}
强制当前作用域加入指定盟友对抗指定敌人的战争。	 	1.0
declare_war_on	target = <scope> / <variable>
要攻击的国家。
type = <wargoal>
要宣布的战争目标。

提供战争目标的state（即take_state_focus）。generator = { <state id> }

declare_war_on = {
    target = GER
    type = annex_everything
}
使当前作用域对具有指定战争目标的指定国家宣战。	战争目标位于/Hearts of Iron IV/common/wargoals/*.txt。	1.0
white_peace	<scope> / <variable>
白和的作用域。
或者

白和的作用域。

和平的原因出现在弹出窗口中。tag = <scope> / <variable>message = <localisation key>

white_peace = GER
white_peace = {
    tag = GER
    message = my_peace_tt
}
使当前作用域白和成为指定作用域。	 	1.0
start_peace_conference	tag = <scope> / <variable>
和平的作用域。
score_factor = <decimal> / <variable>
与常规胜利相比，授予获胜者的总分的比例。

和平的原因出现在弹出窗口中。message = <localisation key>

start_peace_conference = {
    tag = GER
    score_factor = 0.4
    message = my_peace_tt
}
使当前作用域在另一侧以指定作用域开始和平会议。	当前作用域是赢家，目标和附庸是输家。只有在与目标交战时才可以使用。	1.12
set_truce	target = <scope>
休战的作用域。
days = <int>
休战的持续时间。

set_truce = {
    target = GER
    days = 90
}
使当前作用域与指定作用域休战。	 	1.0
create_wargoal	target = <scope> / <variable>
要定位的国家/地区。
type = <wargoal>
要生成的战争目标。

提供战争目标的state（即take_state_focus）。generator = { <state id> }

create_wargoal = {
    type = puppet_wargoal_focus
    target = ROOT
}
授予当前作用域针对指定国家的战争目标。	 	1.0
remove_wargoal	target = <scope> / <variable>
要定位的国家/地区。
type = <wargoal>
要删除的战争目标。“全部”将删除所有战争目标。
remove_wargoal = {
    type = all
    target = ROOT
}
将战争目标从当前作用域删除到指定国家/地区。	 	1.10.2
start_civil_war	ideology = <ideology>
内战国家的意识形态。
ruling_party = <ideology>
原始玩家领导的国家的执政党。可选。

内战国家的大小以及默认情况下将收到的原始库存和军事单位的比例。可选，默认为 0.5。

内战国家获得的陆军规模。可选，默认与大小相同。

内战国家获得的海军规模。可选，默认与大小相同。

内战国家获得的空军规模。可选，默认与大小相同。

内战国家的首都。可选。

分道国家中包含的state。可选，默认为基于大小的随机状态。 将导致满足过滤器的所有状态都进入内战状态。

一个限定块，检查必须满足的状态才能转移到内战。可选。

由其legacy_id保存的将领名单。 可选。

检查每个将领的触发块，如果他们遇到限定，则强制他们保持。可选。

控制被提拔的政党领导人（即如果国家切换到该意识形态团体将掌权的领导人）是否将被国家保留或加入起义，是的，导致前者。可选，默认为 false。

控制反抗意识形态集团的未晋升党的领导人是否将被国家保留或加入起义，是的，导致前者。可选，默认为 false。

如果为真，则起义者将不会将原始国家/地区的人物转移到他们身上。可选，默认为 false。

为内战国家/地区执行的效果块。size = <float>army_ratio = <float>navy_ratio = <float>air_ratio = <float>capital = <state>states = { <state> }allstates_filter = { <triggers> }keep_unit_leaders = { <unit leader id> }keep_unit_leaders_trigger = { <triggers> }keep_political_leader = <bool>keep_political_party_members = <bool>keep_all_characters = yes<effects>

start_civil_war = {
    ruling_party = communism
    # Original country's ideology changes to communism
    ideology = ROOT
    # Breakaway gets old ideology of ROOT
    size = 0.8
    capital = 282
    states = {
        282 533 536 555 529 530 528
    }
    keep_unit_leaders = {
        750 751 752
    }
    keep_political_leader = yes
    keep_political_party_members = yes
}
start_civil_war = {
    ideology = democratic
    size = 0.1
    states = all
    states_filter = {
        is_on_continent = europe
        is_capital = no
    }
    set_country_flag = TAG_my_country_tag_alias_trigger
    # Sets a country flag that gets used in a country tag alias.
}
(查看国家/地区标签别名)

start_civil_war = {
    ideology = neutrality
    size = 0.1
    army_ratio = 0.5
    navy_ratio = 0
    air_ratio = 1
    keep_unit_leaders_trigger = {
        has_trait = my_trait_name
    }
    keep_all_characters = yes
    PREV = {  # Original country
        TAG_airforce_leader = { # Character
            set_nationality = PREV.PREV
            # Transfers to breakaway
        }
    }
    promote_character = TAG_airforce_leader
}
(请参阅上一个和上一个的用法。昨日)

使用指定的参数为当前作用域启动内战。	states = all将包括该国控制的每个state。如果该国目前的首都state被设定为叛乱可以获得的state之一，它就不会开火。set_capital可用于事先更改首都，On_actions#on_civil_war_end用于在内战结束后将其设置回默认值。	1.0
add_civil_war_target	<country>- 设定为目标的国家。	
add_civil_war_target = TAG
设定ROOT和TAG之间的战争是内战，导致胜利是吞并对方，并为干预设定了世界紧张度的限制。	ROOT 和 TAG 必须已经相互交战才能产生效果。	1.9
transfer_units_fraction	允许将军队的精确部分和一个国家的装备转移到任何国家。	
transfer_units_fraction= {
	target = SPD
	size = 0.5
	stockpile_ratio = 0.8
	army_ratio = 0.8
	navy_ratio = 0.5
	air_ratio = 0.5
	keep_unit_leaders_trigger = {
		has_trait = trait_SPA_nationalist_sympathies
	}
}
将指定比例的装备、陆军、海军和空军转移到指定国家/地区。	可以通过使用限定来保留将领keep_unit_leaders_trigger = {}	1.9
add_nuclear_bombs	将核弹添加到TAG的库存中。	
add_nuclear_bombs = 100
将指定数量的核武器添加到该国的库存中	需要Nuke科技才能使用。	1.6
launch_nuke	province = <ID>
要核弹的具体小地块。
state = <ID>
核武器的状态。

优先考虑该国家/地区控制的小地块。

是否应该从该国的库存中扣除核武器。默认为 false。controller = <TAG>use_nuke = <boolean>

launch_nuke = {
    province = 1234
}
launch_nuke = {
    state = 42
    controller = GER
    use_nuke = yes
}
核对指定的小地块或所需state的小地块进行核打击。如果设置了一个state而不是特定的小地块，则首先优先考虑设置的国家，然后优先考虑当前作用域内处于战争状态的国家，然后是中立的国家。controller	如果设置为使用核武器，那么库存中至少需要一枚核弹。	1.6
资源
与资源相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
add_resource	type = <resource>
要添加的资源。
amount = <int>
要添加的资源量。要将资源添加到哪个状态。
可以使用变量。state = <id>

add_resource = {
    type = oil
    amount = 50
    state = 88
}
将指定数量的指定资源添加到指定状态。	也可以在状态作用域内使用。	1.0
create_import	resource = <resource>
要导入的资源。
amount = <int>
要导入的资源量。
哪个国家/地区出口资源。exporter = <id>

create_import = {
    resource = steel
    amount = 100
    exporter = GER
}
使用指定的资源和从指定的导出器为当前作用域创建导入。	 	1.0
give_resource_rights	receiver = <tag>
将获得资源权利的国家。
state = <state>
资源权限所在的状态。

向其授予资源权限的资源。可选，默认为全部。resources = { <resource> <...> <resource> }

give_resource_rights = { receiver = ENG state = 291 }
give_resource_rights = {
    receiver = POL
    state = 321
    resources = { oil }
}
将一个国家的所有资源提供给目标国家	只有当前国家控制拥有资源权利的国家，才会提供资源权利。	1.6
remove_resource_rights	<state>
要从中删除当前国家/地区的资源权限的状态。	
ENG = { remove_resource_rights = 477 }
删除给定的资源权限	 	1.6
add_fuel	<int>
燃油量	
add_fuel = 400
为当前国家/地区添加燃料。	 	1.6
set_fuel	<int>
燃料量。	
set_fuel = 400
设置国家/地区的当前燃料量。	 	1.6
set_fuel_ratio	<decimal>
所需的燃料比例。	
set_fuel_ratio = 0.5
设置国家/地区当前相对于其容量的燃料比率。	 	1.6
建筑物
与建筑相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
add_offsite_building	type = <building>
要添加的建筑物。
level = <level> / <variable>
要添加的最大级别。

add_offsite_building = { type = arms_factory level = 1 }
为当前作用域添加一个地图外建筑物，该建筑物在不处于状态的情况下产生其效果。	 	1.5
modify_building_resources	building = <building>
要修改的建筑物。
resource = <resource>
要添加的资源。要添加的资源量。

amount = <amount>

modify_building_resources = {
    building = synthetic_refinery
    resource = oil
    amount = 1
}
修改当前作用域的指定建筑物的资源输出。	 	1.5
国家国策
与国家重点相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
load_focus_tree	<string>
要加载的国策树。
或者，作为效果块：
tree = <string>
keep_completed = yes/no	
load_focus_tree = china_communist_focus
load_focus_tree = { tree = british_focus keep_completed = yes }
为当前作用域加载新的国策树，保留任何共享国策。	 	1.5
unlock_national_focus	<focus>
要解锁的重点。	
unlock_national_focus = my_focus
绕过当前作用域的指定国策（标记为完成而不触发国策）。complete_effect	 	1.0
complete_national_focus	<focus>
要完成的重点。	
complete_national_focus = my_focus
完成当前作用域的指定国策。	 	1.0
uncomplete_national_focus	focus = <focus>
uncomplete_children = <bool>
默认值为“否”。可选。

默认值为“否”。可选。refund_political_power = <bool>	
uncomplete_national_focus = {
  focus = GER_oppose_hitler
  uncomplete_children = yes
  refund_political_power = no
}
从已完成国策列表中删除国策，并可能删除需要它作为先决条件的所有国策。
如果国策有一个，则“on_uncomplete”效果将在每个未完成的国策上执行。		1.11
mark_focus_tree_layout_dirty	<bool>
bool。	
mark_focus_tree_layout_dirty = yes
刷新指定国家/地区的国策树，重新启动国策的签入和位置偏移。allow_branch	如果放在国策的完成奖励作用域内，则在执行效果时国策不会标记为完成，从而导致特别指定该国策的检查被标记为 false。has_completed_focus
这可以通过使用效果之前将效果放在国策内立即触发的隐藏事件中，或者重新加载同一国策树以保持已完成的国策，将国策标记为完成，从而绕过此操作。load_focus_tree

1.9
决议
与决议有关的国家作用域效果：
名字	参数	例子	描述	笔记	已添加版本
activate_decision	
<decision>
激活的决定。

activate_decision = my_decision
激活当前作用域的指定决议，忽略决议的限定。	决定可以在/Hearts of Iron IV/common/decisions/*中找到.txt	1.0
activate_targeted_decision	target = <scope>
要定位的国家/地区。
decision = <decision>
激活的决定。

activate_targeted_decision = {
    target = GER
    decision = my_decision
}
为当前作用域的指定目标激活指定的目标决议。	决定可以在/Hearts of Iron IV/common/decisions/*中找到.txt	1.5
remove_targeted_decision	<decision>
删除的决定。	
remove_targeted_decision = {
    target = FROM
    decision = my_decision
}
删除当前作用域的指定目标决议。	决定可以在/Hearts of Iron IV/common/decisions/*中找到.txt	1.5
unlock_decision_tooltip	<decision>
显示的决定。	
unlock_decision_tooltip = my_decision
在效果自建提示中显示指定决议的特殊自建提示。	决定可以在/Hearts of Iron IV/common/decisions/*中找到.txt	1.5
unlock_decision_category_tooltip	<category>
要显示的决议类别。	
unlock_decision_category_tooltip = my_category
显示效果自建提示中指定决议类别的特殊自建提示。	决议类别可在 /Hearts of Iron IV/common/decisions/catergories/*中找到.txt	1.5
add_days_remove	decision = <decision>
从中删除天数的决定。
days = <int> / <variable>
从任务中删除的天数。

add_days_remove  = {
    decision = decision_here
    days = 30
}
将天数添加到决议的days_remove。	决定可以在/Hearts of Iron IV/common/decisions/*中找到.txt	1.9
remove_decision	允许在不运行remove_effect的情况下删除指定的决议。	
remove_decision = GER_MEPO
删除决议。	 	1.6
remove_decision_on_cooldown	<decision>
要删除的决定。	
remove_decision_on_cooldown = TAG_my_decision
如果决定在冷却时间，则会将其删除，以便重新激活或完全删除。		1.11
任务
与特派团有关的国家作用域效果：
名字	参数	例子	描述	笔记	已添加版本
activate_mission	<mission>
激活的使命。	
activate_mission = my_mission
激活当前作用域的指定任务，忽略决议的任何限定。	任务可在/Hearts of Iron IV/共同/决定/*中找到.txt	1.5
activate_mission_tooltip	<mission>
要展示的任务。	
activate_mission_tooltip = my_mission
在效果自建提示中显示指定任务的特殊自建提示。	任务可在/Hearts of Iron IV/共同/决定/*中找到.txt	1.5
remove_mission	<mission>
要删除的任务。	
remove_mission = my_mission
删除当前作用域的指定任务。	任务可在/Hearts of Iron IV/共同/决定/*中找到.txt	1.5
add_days_mission_timeout	mission = <mission>
任务要添加天数。
days = <int> / <variable>
要添加到任务的天数。

add_days_mission_timeout = {
    mission = my_mission
    days = 20
}
将天数添加到指定的任务。	任务可在/Hearts of Iron IV/共同/决定/*中找到.txt	1.9
科技和学说
与科技相关的国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
add_research_slot	<int>
要添加或删除的插槽数。	
add_research_slot = 1
调整当前作用域具有的研究槽数。可以卸下带有底片的插槽。	 	1.0
set_research_slots	<int>
要设置的插槽数。	
set_research_slots = 4
设置当前作用域具有的研究槽数。	 	1.0
add_tech_bonus	bonus = <float>
给予的科技加成，默认为0。
uses = <int>
加成可以使用的次数，默认为1。

如果提前降低成本，则默认为 0。

加成适用于哪个科技类别。可以定义多个。

加成适用于哪种科技。可以定义多个。ahead_reduction = <float>category = <string>technology = <string>

name = <string>

信息检索选项卡中显示的自建提示，可选。

add_tech_bonus = {
    bonus = 0.5
    uses = 1
    category = radar_tech
}
使用指定的参数向当前作用域授予研究加成。	研究奖励类别在 /Hearts of Iron IV/common/technology_tags/*.txt 文件中定义，而科技在 /Hearts of Iron IV/common/technologies/*.txt 文件中定义。	1.0
set_technology	<technology> = <int>
要添加的科技。

添加科技后不显示弹出窗口popup = no	
set_technology = {
    suicide_craft = 1
}
将指定的科技授予当前作用域。	值为 1 设置科技。值为 0 会删除该科技，但如果它是可研究的科技，则不会重置研究所需的时间，这意味着可以在 1 天内进行研究。与其他科技相互排斥的科技不能通过这种效果而消除。科技在 /Hearts of Iron IV/common/technologies/*.txt 文件中定义。	1.0
add_to_tech_sharing_group	<string>
要将当前作用域添加到的组。	
add_to_tech_sharing_group = us_research
将当前作用域添加到指定的科技共享组。	科技共享组位于Hearts of Iron IV\common\technology_sharing\*.txt	1.3
remove_from_tech_sharing_group	<string>
要从中删除当前作用域的组。	
remove_from_tech_sharing_group = us_research
从指定的科技共享组中删除当前作用域。	科技共享组位于Hearts of Iron IV\common\technology_sharing\*.txt	1.3
modify_tech_sharing_bonus	id = <string>
要修改的组。
bonus = <float>
新的加成。

modify_tech_sharing_bonus = {
    id = us_research
    bonus = 0.5
}
修改指定的科技共享组。	科技共享组位于Hearts of Iron IV\common\technology_sharing\*.txt	1.3
inherit_technology	<tag>继承科技的国家。	
inherit_technology = CAN
使当前国家/地区的研究科技从指定国家/地区复制。	在使一个国家独立时很有用。	1.6
add_doctrine_cost_reduction	name = <name>
自建提示显示为什么学说在学说菜单中降低了成本。可选。
cost_reduction = <fraction>
成本降低的百分比。

可以使用成本降低的次数。

成本降低将适用于哪个学说类别。（例如：、、。uses = <integer>category = <doctrine category>cat_mobile_warfareland_doctrineair_doctrine

add_doctrine_cost_reduction = {
	cost_reduction = 0.5
	uses = 2
	category = land_doctrine
}
给予将土地学说成本降低到当前作用域的加成。	教义在/Hearts of Iron IV/common/technologies/*.txt文件中定义。
有关一般理论成本降低，请参阅修正中的“<陆地/空中/海军>_doctrine_cost_factor”。

1.11
idea
这包括民族精神、法律、设计师和顾问（使用idea_token）

与创意相关的国家作用域效果：
名字	参数	例子	描述	笔记	已添加版本
add_ideas	<idea>
要添加的idea。	
add_ideas = my_idea
add_ideas = {
    my_idea_1
    my_idea_2
}
将指定的idea添加到当前作用域。	可用作一次添加多个作用域的作用域。	1.0
add_timed_idea	idea = <idea>
要添加的idea。
days = <int> / <variable>
要添加idea的天数。

add_timed_idea = {
    idea = my_idea
    days = 180
}
将指定的idea添加到当前作用域的指定天数。	 	1.0
modify_timed_idea	idea = <idea>
修改的idea。
days = <int> / <variable>
要添加到idea中的天数。

modify_timed_idea = {
    idea = my_idea
    days = 60
}
将定时idea的持续时间延长指定的量。	 	1.0
swap_ideas	add_idea = <idea>
要添加的idea。
remove_idea = <idea>
要删除的idea。

swap_ideas = {
    remove_idea = my_idea_1
    add_idea = my_idea_2
}
使用显示它们之间的任何修正差异的自建提示切换两个idea。	如果这些idea在本地化中具有相同的名称，它将显示为修改idea而不是交换它们。
添加将在删除旧idea之前发生。

1.3
remove_ideas	<idea>
要删除的idea。	
remove_ideas = my_idea
remove_ideas = {
    my_idea_1
    my_idea_2
}
从当前作用域中删除指定的idea。	可用作一次删除多个作用域的作用域。	1.0
remove_ideas_with_trait	<trait>
要定位的特质。	
remove_ideas_with_trait = motorized_equipment_manufacturer
删除当前作用域使用指定特质的所有idea。	 	1.0
show_ideas_tooltip	<idea>
要显示的idea。	
show_ideas_tooltip = my_idea
在自建提示中显示当前效果作用域的指定idea。不添加idea。	 	1.0
单位
与单位相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
load_oob	<oob>
要加载的战斗文件的文件名，不带.txt扩展名。	
load_oob = "GER_default"
加载当前作用域的指定战斗文件，应用其中的效果。省略扩展名的文件名用作效果的目标。.txt	战斗命令存储在/Hearts of Iron IV/history/单位/*.txt中。主要用于在指定位置生成师。	1.0
division_template	name
部队的名称。
regiments = {
    <unit> = { x = 0 y = 0 }
}
support = {
    <unit> = { x = 0 y = 0 }
}
分部的组成。子单位在 /Hearts of Iron IV/common/units/*.txt 文件中定义。

编制将使用的分部名称组，用于决定使用该编制构建的任何新分部的自动生成的名称。可选，如果省略，则自动分配一个。这些在 /Hearts of Iron IV/common/units/names_divisions/*.txt 文件中定义。

是否锁定部队以修改和删除。可选。

锁定的编制是否可以在不允许编辑的情况下使用它部署单位。可选，仅在锁定的编制中起作用。

此编制可能具有的最大部队数;需要锁定编制。可选。

编制在接收供应品时获得的优先级。从 0 到 2。可选，默认为 1。

除法用作整数的图标。可选，默认为其中最常见子单位的图标。图标被定义为任何 /Hearts of Iron IV/interface/*.gfx 文件中的GFX代码（默认情况下），模式为 和 。

强制使用此编制的单位使用的实体为指定的实体。可选。division_names_group = <group>is_locked = <bool>force_allow_recruiting = <bool>division_cap = <int>priority = <int>template_counter = <int>subuniticons.gfxGFX_div_templ_<int>_largeGFX_div_templ_<int>_smalloverride_model = <entity>

division_template = {
    name = "Test"
    is_locked = yes
    division_cap = 3 
    division_names_group = USA_INF_01
    priority = 0
    template_counter = 0
    regiments = {
        infantry = { x = 0 y = 0 }
        infantry = { x = 0 y = 1 }
        infantry = { x = 0 y = 2 }
        infantry = { x = 0 y = 3 }
    }
    support = {
        military_police = { x = 0 y = 0 }
    }
}
创建指定的分部编制并将其添加到当前作用域。	x 和 y 属性表示除法设计器中的行和列。	1.0
add_units_to_division_template	template_name = <string>
要更改的编制。如果在除法作用域内使用，则可选。
regiments = {
    <unit> = <column>
}
support = {
    <unit> = <column>
}
要添加到编制的单位。子单位在 /Hearts of Iron IV/common/units/*.txt 文件中定义。

add_units_to_division_template = {
    template_name = "Test"
    regiments = {
        infantry = 2
        infantry = 2
    }
    support = {
        military_police = 0
    }
}
将指定的旅添加到编制中指定列的第一个可用插槽（如果可能）。	列从左到右从 0 开始。也可用于除法作用域。	1.0
set_division_template_lock	division_template = <string>
分部编制的名称。
is_locked = <bool>
该部队是否被锁定。

set_division_template_lock = {
    division_template = "Infantry Division"
    is_locked = yes
}
切换当前作用域的分部编制上的锁定状态，从而防止编辑或删除。	 	1.5
country_lock_all_division_template	<bool>
bool。	
country_lock_all_division_template = yes
锁定当前作用域的所有分部编制。	用于防止训练、解散和编辑单位。	1.9
set_division_force_allow_recruiting	division_template = <string>
要修改的编制。
force_allow_recruiting = <bool>
是允许还是不允许招聘。如果未设置，则默认为 true。

set_division_force_allow_recruiting = {
    division_template = "My locked template"
}
更改是否可以在不解锁编制的情况下招募锁定编制的部队。	 	1.12
set_division_template_cap	division_template = <string>
分部编制的名称。
division_cap = <int>
部队上限。

set_division_template_cap = { 
	division_template = "Swiss Citizen Militia" 
	division_cap = SWI_militia_division_cap
}
设置分割编制的上限。必须先锁定编制。		1.12
clear_division_template_cap	division_template = <string>
分部编制的名称。	
clear_division_template_cap = { 
	division_template = "Swiss Citizen Militia"
}
清除编制上的上限，允许它具有无限数量的部队。		1.12
delete_unit_template_and_units	division_template = <string>
分部编制的名称。	
delete_unit_template_and_units = {
    division_template = "Infantry Division"
    disband = yes #will refund equipment and manpower
}
删除指定的分法编制以及将其用于当前作用域的所有单位。	 	1.5
delete_unit	state = <number id>
装备必须处于的状态的 ID 号。
template = <string>
必须删除单位的编制。

如果通过效果创建，则提供给单位的 id。
如果属实，将退还装备和人力。id = <int>create_unitdisband = <bool>

delete_unit = {
    state = 787
    disband = yes #will refund equipment and manpower
}
delete_unit = {
    template = "Infantry Division"
}
删除满足筛选器的所有装备。	不会生成自建提示。如果删除特定编制的所有单位，则可以使用delete_units。	1.5
delete_units	division_template = <string>
必须删除单位的编制。
disband = <bool>
如果属实，将退还装备和人力。

delete_units = {
    division_template = "Infantry Division"
    disband = yes
}
删除具有特定编制的所有单位。	生成自建提示，与delete_unit不同。必须指定division_template。	1.9
create_railway_gun	equipment = <type>
铁路炮使用的装备类型。
name = <string>
铁路炮使用的名称。可选。

创建铁路炮的位置。默认为首都。location = <province>

create_railway_gun = {
    equipment = railway_gun_equipment_1
	name = TAG_new_railway_gun
	location = 12406
}
创建铁路炮。		1.11
teleport_railway_guns_to_deploy_province	<boolean>
teleport_railway_guns_to_deploy_province = yes
将所有铁路火炮传送到部署它们的小地块。		1.11
装备
与装备相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
set_equipment_fraction	<float> / <variable>
要移除的装备比例。	
set_equipment_fraction = 0.5
将整体装备库存减少指定比例。	这不应该在内战中被用来模拟库存分割。 根据各自的大小自动划分库存。start_civil_war	1.0
add_equipment_to_stockpile	type = <equipment>
要添加的装备。接受类型和原型。
amount = <int> / <variable>
要添加的数值。定义装备生产者。

可选。

要添加的装备变型。可选。producer = <scope> / <variable>variant_name = <string>
add_equipment_to_stockpile = {
    type = infantry_equipment
    amount = -100
    producer = GER
}
add_equipment_to_stockpile = {
    type = medium_tank_chassis_1
    amount = 100
    variant_name = "Panzer III"
}
编辑当前作用域的装备储备，添加或删除指定类型或原型的装备。	对于负数，可以选择指定生产者将确保仅删除具有该生产者的装备。	1.0
send_equipment	type = <equipment>
要添加的装备。可以是原型。
amount = <int> / <variable>
要添加的数值。哪个国家/地区收到装备。

target = <scope> / <variable>

send_equipment = {
    equipment = infantry_equipment
    amount = 100
    target = GER
}
将指定数量的装备发送到指定目标，将所述装备从当前作用域内移除。	无法将装备移成像负片，在这种情况下，目标将无法完全接收装备。	1.0
send_equipment_fraction	value = <0-1>
发送多少装备。
target = <scope> / <variable>
哪个国家收到装备。

send_equipment_fraction = {
    value = 0.3
    target = GER
}
将指定比例的装备发送到指定目标，从当前作用域内删除所述装备。	 	1.9
create_production_license	target = <scope>
哪个国家/地区获得许可证。
cost_factor = <float>
修改生产成本。
装备作用域

国家获得许可生产的装备。必须是非原型装备。

版本指示应许可哪个变体。默认值为 0，表示基本变体。

是否优先考虑新装备。默认情况下是。type = <equipment>version = <int>new_prioritised = <boolean>

create_production_license = {
    target = HUN
    equipment = {
        type = fighter_equipment_1
        version = 0
        new_prioritised = no
    }
    cost_factor = 0
}
授予指定国家/地区从当前作用域生产指定装备的许可证。	 	1.4
create_equipment_variant	name = <string>
多属性的名称。
type = <equipment>
变型所属的装备类型。

订购同一装备的多个变体。0 是最旧的，1 是第二旧的，依此类推。可选，默认为 0。

装备变体是否在 GUI 和 AI 中标记为过时。可选，默认为否。

用于装备的名称组。储存在/Hearts of Iron IV/普通/单位/names_ships。可选，只能为船舶定义。

将用作整数的角色图标的索引。如果设置为“自动”，将自动选择。如果设置为 0，则将取消设置。可选，只能为船舶定义。

装备将在世界地图上使用的模型。可选。

装备将使用的图标。作为GFX代码类型存储在 /Hearts of Iron IV/interface/*.gfx 中。可选。
升级作用域

变型的升级配置。
模块作用域

变型的模块配置。parent_version = <int>obsolete = <bool>name_group = <name group>role_icon_index = <int>/automodel = <model name>icon = <sprite><upgrade> = <amount><slot> = <module>

create_equipment_variant = {
    name = "Vetehinen Class"								
    type = ship_hull_submarine_1
    name_group = FIN_SS_HISTORICAL
    role_icon_index = 1
    modules = {
        fixed_ship_torpedo_slot = ship_torpedo_sub_1
        fixed_ship_engine_slot = sub_ship_engine_1
        rear_1_custom_slot = ship_mine_layer_sub
    }
}
create_equipment_variant = {
    name = "He 112"
    type = fighter_equipment_0
    obsolete = yes
    upgrades = {
        plane_gun_upgrade = 1
        plane_range_upgrade = 1
    }
}
create_equipment_variant = {
    name = "Light Tank Mk. IV"
    type = light_tank_chassis_1
    parent_version = 1
    modules = {
        main_armament_slot = tank_heavy_machine_gun
    }
    upgrades = {
        tank_nsb_engine_upgrade = 2
    }
    icon = "GFX_ENG_basic_light_tank_medium"
    model = ENG_MKIV_light_tank_entity
}
为当前作用域创建指定的装备变型。	飞船的角色图标在/Hearts of Iron IV/gfx/army_icons/army_icons.txt中定义。
升级在 /钢铁之心 IV/普通/单位/装备/升级/*.txt 中定义。
装备类型，包括它们的模块插槽，在 /铁之心 IV/通用/单位/装备/*.txt 中定义。
装备模块在 /铁之心 IV/通用/单位/装备/模块/*.txt 中定义。
1.0
add_equipment_production	amount = <int>
要生产的数量。可选。
requested_factories = <int>
最初要分配的工厂数。可选。

初始生产进度。可选。

初始生产效率。可选。
装备作用域

要生产的装备的名称。

生产装备的国家/地区。如果根作用域不是生成者，则使用。可选。
要生成的变型的名称。可选。progress = <float>efficiency = <float>type = <equipment>creator = <scope>version_name = <string>

add_equipment_production = {
    equipment = {
        type = light_cruiser_2
    }
    requested_factories = 1
    progress = 0.95
    amount = 1
}
为当前作用域的指定装备启动生产线。	 	1.0
军事
与军事有关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
destroy_ships	type = <ship>
要摧毁的船只类型。
count = <int> or all
要销毁的数量。

destroy_ships = {
    type = destroyer
    count = all
}
摧毁当前作用域控制的指定类型和数量的船只。	 	1.5
transfer_navy	
target = <scope>
目标国家/地区。

transfer_navy = {
    target = GER
}
将当前作用域海军转移到指定国家。	 	1.5
transfer_ship	type = <ship>
要转移的船舶类型。
target = <scope>
The target country. prefer_name = <string>
Name of ship in origin navy that will preferably be transferred to target navy. Optional. exclude_refitting = <yes/no></clode>
Determines whether ships that are being refitted will be transferred. Optional.

transfer_ship = {
    prefer_name = "HMS Achilles"
    type = light_cruiser
    target = NZL
    exclude_refitting = no
}
将指定类型的船舶从当前作用域转移到指定国家/地区。	 	1.4
create_ship	type = <ship>
要创建的船只类型。
要使用的装备变型。equipment_variant = <string>
creator = <scope>
创造这艘船的国家。可选。
船名。可选。name = <string>

FRA = {
    create_ship = {
        type = ship_hull_submarine_1
        equipment_variant = "S Class"
        creator = ENG
        name = "My ship name"
    }
}
从另一个国家/地区创建一艘船并将其分配给备用舰队。如果未设置，它将是限定作用域的国家/地区。	 	1.9
add_mines	将地雷添加到当前国家/地区的战略区域。	
add_mines = { region = 42 amount = 100 }
将地雷添加到战略区域。	 	1.6
add_ace	name = <string>
王牌的名称。
surname = <string>
王牌的姓氏。

王牌的呼号。

王牌类型。

王牌的性别。callsign = <string>type = <type>is_female = <bool>

add_ace = {
    name = "Amelia"
    surname = "Earhart"
    callsign = "Revenant"
    type = fighter_genius
    is_female = yes
}
为当前作用域添加 ace。	在 /Hearts of Iron IV/common/aces/*.txt 中找到的 Ace 类型。	1.0
情报
与国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
create_intelligence_agency	允许自动创建情报机构	
create_intelligence_agency = {
    name = "A.G.E.N.C.Y"
    icon = GFX_intelligence_agency_logo_agency
}
创建一个情报机构。	 	1.9
upgrade_intelligence_agency	允许自动解锁情报机构的升级	
upgrade_intelligence_agency = upgrade_form_department
upgrade_intelligence_agency = <upgrade>
解锁情报机构升级。	升级可以在通用/intelligence_agency_upgrades中找到	1.9
add_decryption	target = <tag>
向哪个国家/地区添加解密。
amount = <int>
在平面数字中添加多少解密。

要添加多少解密比率。ratio = <0-1>

add_decryption = {
    target = GER
    amount = 300
}
add_decryption = {
    target = GER
    ratio = 0.5
}
向目标国家/地区添加解密	target和参数是相互排斥的。ratio	1.9
add_intel	target = <tag>
向哪个国家添加情报。
civilian_intel = <int>
要添加多少民用情报。 要添加多少军队情报。 要添加多少海军情报。 要添加多少空军情报。





army_intel = <int>navy_intel = <int>airforce_intel = <int>
add_intel = {
    target = GER
    civilian_intel = 3
    army_intel = 2
    navy_intel = 1
    airforce_intel = 2
}
将指定数量的情报添加到指定的国家/地区。	如果省略了英特尔参数，则假定为 0。	1.9
add_operation_token	tag = <tag>
向哪个国家/地区添加令牌。
token = <id>
要添加的令牌。
add_operation_token = {
    tag = GER
    token = token_test
}
向国家/地区添加操作令牌，允许访问更多情报或应用目标修正。	操作令牌在 /Hearts of Iron IV/common/operation_tokens/* 中定义。	1.9
remove_operation_token	tag = <tag>
要从哪个国家/地区删除令牌。
token = <id>
要删除的令牌。
remove_operation_token = {
    tag = GER
    token = token_test
}
从国家/地区中删除操作令牌。	操作令牌在 /Hearts of Iron IV/common/operation_tokens/* 中定义。	1.9
capture_operative	operative = <tag>
要捕获的特工。
ignore_death_chance = <bool>
是否忽略捕获时的死亡几率（默认为否）。
capture_operative = {
    operative = PREV
    ignore_death_chance = yes
}
capture_operative = PREV
捕获指定的特工。	可以使用引用作用域的标记来引用操作人员	1.9
create_operative_leader	bypass_recruitment = <bool>
特工是直接添加到可用特工名单中还是需要招募。
available_to_spy_master = <bool>
特工能否被特工高手招揽。bypass_recruitment应设置为 no。如果选择随机肖像，请创建来自指定国家/地区而不是当前国家/地区的肖像。

特工的名称。
领导者图片的图形参考，取自 /Hearts of Iron IV/interface/*.gfx 中的文件。

特工的国籍。

领导者产生的特质。portrait_tag_override = <bool>name = <string>GFX = <string>nationalities = { <tag> }traits = { <trait> }

create_operative_leader = {
	name = "Jacques Duclos"
	GFX = GFX_portrait_jacques_duclos
	traits = { operative_infiltrator operative_natural_orator }
	bypass_recruitment = no
	available_to_spy_master = yes
	nationalities = { FRA POL }
}
为具有指定属性的当前作用域创建操作程序。	性状见于/Hearts of Iron IV/common/unit_leader/*.txt。除bypass_recruitment之外的所有参数都是可选的。	1.9
free_operative	<tag>
要释放的特工。	
free_operative = PREV
释放指定的操作人员。	可以使用引用作用域的标记来引用操作人员	1.9
free_random_operative	captured_by = <tag>
抓获特工的国家。
all = <bool>
是否释放所有特工（默认为否）。

free_random_operative = {
	captured_by = POL
	all = yes
}
释放一个随机捕获的特工或全部。		1.9
kill_operative	operative = <tag>
被杀死的特工。	
kill_operative = {
    operative = PREV
}
kill_operative = PREV
杀死目标特工。	可以使用引用作用域的标记来引用操作人员	1.9
turn_operative	operative = <tag>
转身的特工。	
turn_operative = {
    operative = PREV
}
turn_operative = PREV
将目标特工转向他们自己的国家，将他们转移到当前国家。	可以使用引用作用域的标记来引用操作人员。这算作手术死亡，并将触发相应的 On 操作。记录错误（如果用于对付您自己的特工）。	1.9
steal_random_tech_bonus	category = <category name>
要从中窃取的类别。参见 /Hearts of Iron IV/common/technology_tags/* 查看列表。
folder = naval_folder
要从中窃取的文件夹。参见 /Hearts of Iron IV/common/technology_tags/* 查看列表。
减少到提前罚款。
研究速度的奖励。
如果没有可用的科技，则备份加成。
是否立即提供科技而不是加成。默认情况下为否。
根据类型在即时和非即时之间更改。默认情况下为否。
加成的名称。
要偷窃的国家。
加成可以使用多少次。ahead_reduction = <float>bonus = <float>base_bonus = <float>instant = <bool>dynamic = <bool>name = <localisation key>target = <tag>uses = <int>

steal_random_tech_bonus = {
    category = air_equipment
    folder = naval_folder
    ahead_reduction = 0.8
    bonus = 1.2
    base_bonus = 1.1
    dynamic = yes
    name = LOC_KEY
    target = POL
    uses = 2
}
从指定国家/地区窃取随机科技加成。	如果一个国家没有要窃取的科技，则将以base_bonus为基础应用随机加成。	1.9
人物
与角色相关的国家/地区作用域效果：
名字	参数	例子	描述	笔记	已添加版本
set_nationality	target_country = <scope> / <variable>
目标国家/地区。
character = <character>要转移的人物。

set_nationality = {
    target_country = TZN
    character = OMA_sultan
}
将指定字符切换到指定的国家/地区。	如果您想更改特定角色的国籍，并且获得效果的国家/地区尚未招募该角色，请使用
every_possible_country = {
    limit = { has_character = ID }
    random_character = {
        limit = { is_character = ID }
        set_nationality = TAG
    }
}
命令来调用它们。仅在 1.11 及更高版本中是必需的。

1.11
retire_character	<character>	
retire_character = GER_Character_Token
让角色退役，删除他们担任的所有角色并使他们从游戏中消失。	仅限国家/地区作用域。该角色在退役后不能重新招募。	1.11
set_character_name	character = <character>
要修改的人物。
name = <localisation key>
角色的新名称。

set_character_name = {
	character = my_character
	name = my_name
}
设置目标字符的新名称。	也可用于人物作用域作用域。	1.11
character_list_tooltip	limit = { <triggers> }
必须满足才能显示在列表中的限定。	
character_list_tooltip = {
	limit = {
        has_character_flag = SOV_targeted_for_purge_flag
    }
}
显示符合指定限制并由当前国家/地区招募的每个角色的列表。		1.11
add_trait	character = <character>
要修改的人物。
slot = <slot>角色的插槽。顾问是必需的。
角色的意识形态类型。国家领导人所必需的。

要添加的特质。ideology = <sub-ideology>trait = <trait>

add_trait = {
     character = TAG_jane_smith
     slot = political_advisor
     trait = really_good_boss
}
add_trait = {
     character = TAG_my_leader
     ideology = liberalism
     trait = field_of_gar
}
将指定的国家/地区领导人特质添加到角色中。	也可用于人物作用域作用域。意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。字符槽可以是角色的名称或 ID。建议使用 name，因为 1.11 使 id 过时。	1.11
remove_trait	character = <character>
要修改的人物。
slot = <slot>角色的插槽。顾问是必需的。
角色的意识形态类型。国家领导人所必需的。

要删除的特质。ideology = <sub-ideology>trait = <trait>

remove_trait = {
    character = TAG_jane_smith
    slot = political_advisor
    trait = really_good_boss
}
remove_trait = {
     character = TAG_my_leader
     ideology = liberalism
     trait = field_of_gar
}
从人物中删除指定的特质。	也可用于人物作用域作用域。意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。字符槽可以是角色的名称或 ID。建议使用 name，因为 1.11 使 id 过时。	1.11
将领
将领相关国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
create_corps_commander	name = <string>
领导者的名称。
picture = <string>
领导者图片的图形参考。

领导者的技能。

领导者的攻击技能。

领导者的防御技能。

领导者的计划能力。

领导者的后勤技能。

领导者产生的特质。

领导者的性别。

用于将领的旧 ID。可选。skill = <int>attack_skill = <int>defense_skill = <int>planning_skill = <int>logistics_skill = <int>traits = { <trait> }female = <bool>legacy_id = <int>

create_corps_commander = {
	name = "Jean de Lattre de Tassigny"
	picture = "Portrait_France_Jean_de_Lattre_de_Tassigny.dds"
	traits = { trickster brilliant_strategist }
	skill = 4
	attack_skill = 4
	defense_skill = 2
	planning_skill = 4
	logistics_skill = 3
}
使用指定的属性为当前作用域创建指令器。	性状见于/Hearts of Iron IV/common/unit_leader/*.txt。已弃用，建议尽可能改用add_corps_commander_role。创建的元帅如果通过军官团被分配为部长，将无法拥有肖像，从而导致错误。	1.0
create_field_marshal	name = <string>
领导者的名称。
picture = <string>
领导者图片的图形参考。

领导者的技能。

领导者的攻击技能。

领导者的防御技能。

领导者的计划能力。

领导者的后勤技能。

领导者产生的特质。

领导者的性别。

用于将领的旧 ID。可选。skill = <int>attack_skill = <int>defense_skill = <int>planning_skill = <int>logistics_skill = <int>traits = { <trait> }female = <bool>legacy_id = <int>

create_field_marshal = {
	name = "Maurice Gamelin"
	picture = "Portrait_France_Maurice_Gamelin.dds"
	traits = { defensive_doctrine }
	skill = 2
	attack_skill = 1
	defense_skill = 3
	planning_skill = 2
	logistics_skill = 1
}
使用指定的属性为当前作用域创建字段封送。	性状见于/Hearts of Iron IV/common/unit_leader/*.txt。已弃用，建议尽可能改用add_field_marshal_role。创建的元帅如果通过军官团被指派为部长，将无法拥有肖像，从而导致错误。	1.0
create_navy_leader	name = <string>
领导者的名称。
picture = <string>
领导者图片的图形参考。

领导者的技能。

领导者产生的特质。

领导者的性别。

用于将领的旧 ID。可选。skill = <int>traits = { <trait> }female = <bool>legacy_id = <int>

create_navy_leader = {
	name = "François Darlan"
    picture = "Portrait_France_Francois_Darlan.dds"
	traits = { superior_tactician }
	skill = 3
}
使用指定的属性为当前作用域创建海军领导者。	性状见于/Hearts of Iron IV/common/unit_leader/*.txt。已弃用，建议尽可能改用add_naval_commander_role。	1.0
remove_unit_leader	<id>
将领的 ID。	
remove_unit_leader = 70
按旧 ID 删除指定的将领。	不适用于字符 ID。相反，建议尽可能在人物作用域作用域内remove_unit_leader_role。	1.0
add_corps_commander_role	character = <character>
要修改的人物。
<...>
军队领导人角色定义
add_corps_commander_role = {
    Character = GER_Character_token
    skill = 4
    attack_skill = 2
    defense_skill = 3
    planning_skill = 3
    logistics_skill = 5
}
将指定的人物设置为同时充当元帅。	也可用于人物作用域作用域。	1.11
add_field_marshal_role	character = <character>
要修改的人物。
<...>
军队领导人角色定义
add_field_marshal_role = {
  character = GER_Character_token
  skill = 4
  attack_skill = 2
  defense_skill = 3
  planning_skill = 3
  logistics_skill = 5
}
将指定的人物设置为也充当元帅。	也可用于人物作用域作用域。	1.11
add_naval_commander_role	character = <character>
要修改的人物。
<...>
海军将领角色定义
add_naval_commander_role = {
  Character = GER_Character_token
  skill = 4
  attack_skill = 2
  defense_skill = 3
  planning_skill = 3
  logistics_skill = 5
}
将指定的人物设置为同时充当海军上将。	也可用于人物作用域作用域。	1.11
show_unit_leaders_tooltip	<character>
要显示其名称的人物。	
show_unit_leaders_tooltip = TAG_my_leader
将指定字符的名称显示为自建提示。		1.11
国家领导人
与国家领导人相关的国家作用域效应：
名字	参数	例子	描述	笔记	已添加版本
create_country_leader	name = <string>
领导者的名称。
desc = <string>
领导者的描述。

对领导者肖像的图形引用。

当领导者在历史上死去时。

国家领导人的子意识形态。不接受常规意识形态。

领导者的性别。
特质作用域

要添加的特质。可以添加多个。picture = <spriteType>expire = <string>ideology = <string>female = <bool><trait>

create_country_leader = {
	name = AFG_mohammed_zahir_shah
	desc = "POLITICS_MOHAMMED_ZAHIR_SHAH_DESC"
	picture = GFX_AFG_mohammed_zahir_shah
	expire = "1965.1.1"
	ideology = despotism
	traits = {
	}
}
 	肖像使用GFX代码类型，在/Hearts of Iron IV/interface/*.gfx中定义。
子意识形态在/Hearts of Iron IV/共同/意识形态中定义。
弃用的。建议尽可能改用add_country_leader_role。

1.0
add_country_leader_role	character = <character>
要修改的人物。
country_leader = { ... }
国家/地区领导者角色定义

将提升领导者成为指定方的领导者。可选，默认为 false。promote_leader = <bool>

add_country_leader_role = {
    character = GER_character_token
    promote_leader = yes
    country_leader = {
        ideology = fascism_type
        expire = "1965.1.1.1"
        traits = { war_industrialist }
    }
}
将指定的人物设置为同时充当国家领导人，如果指定，则晋升为党派领导人。	也可用于人物作用域作用域。	1.11
promote_character	<character>
要提升的角色。
或

要提升的角色。

国家领导人角色使用的意识形态类型。character = <character>ideology = <ideology type>

promote_character = GER_erwin_rommel
promote_character = {
    character = GER_erwin_rommel
    ideology = nazism
}
将角色提升为其政党的领导人。	也可用于人物作用域作用域。如果角色具有多个国家/地区领导人角色，则必须指定意识形态类型。意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。	1.11
remove_country_leader_role	character = <character>
要修改的人物。
ideology = <string>
角色的意识形态类型。

remove_country_leader_role = {
    character = GER_Character_Token
    ideology = socialism
}
从角色中删除国家/地区领导者角色。	也可用于人物作用域作用域。意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。	1.11
kill_ideology_leader	<ideology>
思想。	
kill_ideology_leader = communism
杀死当前作用域内指定意识形态的国家领导人。	 	1.9
retire_ideology_leader	<ideology>
思想。	
retire_ideology_leader = fascism
退休并罢免当前作用域内的意识形态党的国家领导人。	 	1.9
kill_country_leader	<bool>
bool。	
kill_country_leader = yes
杀死当前作用域内的国家领导人。	 	1.0
retire_country_leader	<bool>
bool。	
retire_country_leader = yes
退休并罢免国家领导人作为当前作用域的党首。	 	1.0
set_country_leader_ideology	<government>
政府来设定。	
set_country_leader_ideology = socialism
更改当前作用域的国家/地区领导人的政府类型。	 	1.0
set_country_leader_description	ideology = <ideology>
国家领导人的意识形态，可选。
desc = <localisation key>
新描述。

set_country_leader_description = {
	ideology = neutrality
	desc = LOC_KEY
}
更改国家/地区领导人的描述。	必须使用任何 /Hearts of Iron IV/localisation/*.yml 文件中的本地化密钥，将描述放在引号中将不起作用。本地化以获取更多信息	1.9.1
set_country_leader_name	ideology = <ideology>
国家领导人的意识形态，可选。
name = <localisation key>
新名称。

set_country_leader_name = {
	ideology = neutrality
	name = LOC_KEY
}
更改国家/地区领导人的姓名。		1.9.1
set_country_leader_portrait	ideology = <ideology>
国家领导人的意识形态，可选。
portrait = <sprite name>
新肖像。

set_country_leader_portrait = {
	ideology = neutrality
	portrait = GFX_IMAGE_NAME
}
改变国家领导人的肖像。	肖像必须在 /Hearts of Iron IV/interface/*.gfx 中定义	1.9.1
add_country_leader_trait	<trait>
要添加的特质。	
add_country_leader_trait = nationalist_symbol
将指定的特质添加到当前国家/地区的国家/地区领导者。	性状可在 /Hearts of Iron IV/common/country_leader/*.txt 檔案中找到。	1.0
remove_country_leader_trait	<trait>
要删除的特质。	
remove_country_leader_trait = nationalist_symbol
从当前作用域的国家/地区领导者中删除指定的特质。	性状可在 /Hearts of Iron IV/common/country_leader/*.txt 檔案中找到。	1.0
swap_ruler_traits	与swap_ideas类似。删除一个特质并添加另一个特质。	
swap_ruler_traits = { remove = <trait> add = <trait> }
交换特质。	在人物作用域作用域中使用swap_country_leader_traits。	1.6
顾问
顾问相关国家作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
activate_advisor	<character>
要激活的角色。	
activate_advisor = GER_character_token_air_chief
聘请一名顾问，将他们放入各自的位置。		1.11
deactivate_advisor	<character>
要停用的人物。	
deactivate_advisor = GER_character_token_air_chief
将顾问从各自的位置中解雇，将其留空。		1.11
add_advisor_role	character = <character>
要修改的人物。
advisor = { ... }
顾问角色定义

将激活顾问（在向国家/地区政府运行命令时直接添加它们）。可选，默认为 false。activate = <bool>

add_advisor_role = {
    character = GER_Character_token
    activate = yes
    advisor = {
        slot = air_chief
        cost = 50
        idea_token = GER_character_token_air_chief
        traits = {
            air_chief_ground_support_2
        }
    }
}
将指定的人物设置为也充当顾问，如果指定，则激活。	也可用于人物作用域作用域。限定和效果块（例如 和 ）不能添加到以这种方式创建的顾问定义中。allowedon_add	1.11
remove_advisor_role	character = <character>
指定在国家/地区作用域内执行效果时的人物。
slot = <int>
要从中移除顾问插槽的插槽。

remove_advisor_role = {
  character = "SOV_genrikh_yagoda"
  slot = political_advisor
}
从角色中删除指定的顾问角色。	也可用于人物作用域作用域。	1.11
历史
这些效果只能在历史记录文件中使用，在外部使用时会失败。但是，无论如何，它们都被视为效果而不是历史参数，因为它们可以在 if 语句中使用。

要在国家/地区历史文件中使用的效果：
名字	参数	例子	描述	笔记	已添加版本
recruit_character	<character>	
recruit_character = GER_Character_token
最初将指定的人物分配给当前国家/地区。		1.11
generate_character	token_base = <string>
必需的，充当人物旗标。
name = <localisation key>
用于字符的名称。如果未设置，则生成随机名称。

generate_character = {
    token_base = army_chief_defensive_1
    name = funny_name
    advisor = {
        slot = air_chief
        cost = 50
        idea_token = GER_character_token_air_chief
        traits = {
            air_chief_ground_support_2
        }
        allowed = {
            always = yes
        }
    }
}
为当前国家/地区生成人物。		1.11
set_oob	<order of battle>
用于不带扩展名的战斗文件的文件的名称。.txt	
set_oob = BHR_1936
设置当前国家/地区师的战斗文件，覆盖所有其他非海军和非空中战斗文件。	战斗文件在/Hearts of Iron IV/history/单位/*.txt文件中定义。	1.0
set_naval_oob	<order of battle>
用于不带扩展名的战斗文件的文件的名称。.txt	
set_naval_oob = BHR_1936_naval_legacy
设置当前国家/地区师的战斗文件，覆盖所有其他海军战斗文件。	战斗文件在/Hearts of Iron IV/history/单位/*.txt文件中定义。	1.0
set_air_oob	<order of battle>
用于不带扩展名的战斗文件的文件的名称。.txt	
set_air_oob = ITA_1936_air_bba
设置当前国家/地区师的战斗文件，覆盖所有其他空中战斗文件。	战斗文件在/Hearts of Iron IV/history/单位/*.txt文件中定义。	1.12
set_keyed_oob	key = <string>
用于文件的密钥。
name = <order of battle>
用于不带扩展名的战斗文件的文件的名称。.txt

set_keyed_oob = {
    key = naval
    name = BHR_1936_mtg
}
设置用于当前国家/地区师的战斗文件，覆盖使用相同键的所有其他键式战斗文件。	战斗文件在/Hearts of Iron IV/history/单位/*.txt文件中定义。	1.0
状态作用域
此处的效果必须在状态作用域内使用。

一般
常规状态作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
state_event	id = <event>
要触发的事件。
days = <int> / <variable>
在指定的天数内触发事件。可选。

在指定的小时数内触发事件。可选。

将小时的随机数（介于 0 和随机之间，包括 0 和随机）添加到计划的触发时间。可选。

将天数的随机数（介于 <> 和 random_days 之间，包括 <> 和 之间）添加到计划的触发时间。可选。hours = <int> / <variable>random = <int> / <variable>random_days = <int> / <variable>

state_event = {
    id = my_event.1
    days = 10
    random = 50
    random_days = 10
    trigger_for = controller
}
为当前状态触发指定的事件。	不需要重复检查限定的地方可以作为调度事件的性能轻量级替代方案。randommean_time_to_happen
使用天数 = <事件> / <可变>或小时可能仍会被窃听，并且不会触发事件。

1.0
set_state_flag	<flag>
用于标识状态旗标的唯一字符串。
或

要设置的旗标。

将旗标设置为持续指定的天数。可选。

旗标的新值，作用域从 -2 147 483 648 到 2 147 483 647。flag = <flag>days = <int>value = <int>

set_state_flag = my_flag
set_state_flag = {
    flag = my_flag
    days = 123
    value = 1
}
定义状态旗标。	不显示自建提示。此效果中的旗标用于“bool旗标”的含义，用于存储信息。	1.0
clr_state_flag	<flag>
要清除的状态旗标的唯一字符串。	
clr_state_flag = my_flag
清除定义的状态旗标。	不显示自建提示。	1.0
modify_state_flag	flag = <flag>
要修改的状态旗标。
value = <value>
要将其设置为的值：0 或 1

modify_state_flag = {
    flag = my_flag
    value = 1
}
修改状态旗标。	请改用变量。	1.3
set_state_name	<string>
定义新名称。	
set_state_name = "Funland"
将当前状态的名称更改为指定的名称。	 	1.3
reset_state_name	<bool>
bool。	
reset_state_name = yes
重置对当前状态名称所做的任何更改。	 	1.3
add_claim_by	<scope> / <variable>
要为其添加宣称的国家/地区。	
add_claim_by = SOV
在当前作用域内添加指定国家/地区的宣称。	 	1.0
remove_claim_by	<scope> / <variable>
要删除宣称的国家/地区。	
remove_claim_by = SOV
删除当前作用域内指定国家/地区的宣称。	 	1.0
add_core_of	<scope> / <variable>
要为其添加核心的国家/地区。	
add_core_of = SOV
为当前作用域内的指定国家/地区添加核心。	 	1.0
remove_core_of	<scope> / <variable>
要删除核心的国家。	
remove_core_of = SOV
删除当前作用域中指定国家/地区的核心。	 	1.0
set_demilitarized_zone	<bool>
bool。	
set_demilitarized_zone = yes
使当前作用域成为非军事区。	 	1.0
set_state_category	<category>
要更改为的类别。	
set_state_category = rural
将当前状态类别更改为指定的类别。	分类可在/Hearts of Iron IV/common/state_category/*中找到.txt	1.3
add_state_modifier	修正作用域
<modifier> = <float>
向状态添加修正。

add_state_modifier = {
    modifier = {
        local_resources = 2.0
    }
}
向当前状态添加修正。	 	1.3
add_manpower	<int> / <variable>
要添加的量。	
add_manpower = 10000
将指定的人力添加到当前状态。	 	1.0
add_resource	type = <resource>
要添加的资源。
amount = <int> / <variable>
要添加的量。

add_resource = {
    type = oil
    amount = 100
}
将指定数量的指定资源添加到当前状态。	也可用于国家作用域。	1.0
set_border_war	<bool>
bool。	
set_border_war = yes
为当前状态启用边界战争状态。	 	1.0
create_unit	division = <division string>
除法字符串。
owner = <scope>
该部队的所有者。

如果可能的话，该state内的这个省将被使用。可选。

允许在敌人拥有的小地块创建单位。默认为 false。
以下参数在：prioritize_location = <province>allow_spawning_on_enemy_provs = yesdivision = ""
name = \"<string>\"
"
部队的名称。
division_template = \"<string>\"
"
部队要使用的编制。
start_experience_factor = <double>
该部队的经验，0 表示无，1 表示全面训练。默认值为 1。
start_equipment_factor = <double>
该师的装备储备。默认值为 1。
start_manpower_factor = <double>
该师的人力储备。默认值为 1。

create_unit = {
    division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5"
    owner = GER
}
将指定的除法添加到当前状态。	除法字符串必须位于一行上。中间的换行符会破坏效果，导致不会生成任何单位。division = "..."	1.3
teleport_armies	limit = { <triggers> }
军队拥有者必须满足的条件才能传送。
to_state_array = <array>
军队将被传送到的状态数组。

军队将被传送到的小地块。

军队将被传送到的状态。to_province = <ID>to_state = <ID>
teleport_armies = {
    limit = {
        has_war_together_with = ROOT
    }
    to_state_array = owned_controlled_states
}
如果军队的拥有者满足条件，则传送指定状态下的所有军队。	仅定义to_state_array、to_state或to_province之一。如果未指定任何内容，则默认为大写字母。	1.9
add_province_modifier	static_modifiers = { <modifiers> }
修正列表。
要应用修正的小地块。选择多个小地块的作用域。以下参数必须进入其中：
省的 ID。可以指定多个。
选择应用限制的所有小地块。以下参数需要它： 将小地块的选择限制为仅沿海小地块。
将小地块的选择限制为仅与不同国家接壤的小地块。
将小地块的选择限制为仅拥有海军基地的小地块。
将小地块的选择限制为只有那些有胜利点或城市的小地块。province = <id>provinces = {}id = <id>all_provinces = yeslimit_to_coastal = yeslimit_to_border = yeslimit_to_naval_base = yeslimit_to_victory_point = yes
add_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = 1234
}
add_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = {
		id = 1234
		id = 4321
	}


}
add_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = {
		all_provinces = yes
		limit_to_coastal = yes
		limit_to_border = yes
		limit_to_naval_base = yes
		limit_to_victory_point = yes
	}


}
将省修正添加到此state的指定省。	小地块修正在 /Hearts of Iron IV/common/modifiers/* 中定义.txt	1.6
remove_province_modifier	static_modifiers = { <modifiers> }
修正列表。
要应用修正的小地块。选择多个小地块的作用域。以下参数必须进入其中：
省的 ID。可以指定多个。
选择应用限制的所有小地块。以下参数需要它： 将小地块的选择限制为仅沿海小地块。
将小地块的选择限制为仅与不同国家接壤的小地块。
将小地块的选择限制为仅拥有海军基地的小地块。
将小地块的选择限制为只有那些有胜利点或城市的小地块。province = <id>provinces = {}id = <id>all_provinces = yeslimit_to_coastal = yeslimit_to_border = yeslimit_to_naval_base = yeslimit_to_victory_point = yes
remove_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = 1234
}
remove_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = {
		id = 1234
		id = 4321
	}


}
remove_province_modifier = {
	static_modifiers = { mod_modifier_1 mod_modifier_2 }
	province = {
		all_provinces = yes
		limit_to_coastal = yes
		limit_to_border = yes
		limit_to_naval_base = yes
		limit_to_victory_point = yes
	}


}
删除此state指定小地块的小地块修正。	小地块修正在 /Hearts of Iron IV/common/modifiers/* 中定义.txt	1.6
add_victory_points	为小地块添加胜利点数	
add_victory_points = {
	province = 1234
	value = 10
}
为小地块增加胜利点数。	接受负值	1.10
set_victory_points	设置一个省的胜利点	
set_victory_points = {
	province = 1234
	value = 10
}
设置小地块的胜利点数。	接受负值	1.10
set_state_province_controller	controller = <tag>
该省的新控制者。
limit = { <triggers> }
The triggers that must be fulfilled by the province's current controller to be transferred to the new controller.

set_state_province_controller = {
    controller = POL
    limit = {
        OR = {
            tag = GER
            is_in_faction_with = GER
        }
    }
}
将满足限定的国家/地区控制的该state内所有小地块的控制者更改为指定国家/地区。	 	1.9
transfer_state_to	<country>
要转移状态的国家/地区。	
transfer_state_to = JAM
将状态的所有者和控制者设置为给定的国家/地区		1.11
set_state_owner_to	<country>
将状态的所有者（但不是控制者）设置为的国家/地区。	
set_state_owner_to = JAM
将状态的所有者设置为给定的国家/地区	使用transfer_state_to，除非明确不应提供控件。	1.11
set_state_controller_to	<country>
将状态的控制者（但不是所有者）设置为的国家/地区。	
set_state_controller_to = ITA
将状态的控制者设置为给定的国家/地区		1.11
建筑物
与建筑相关的状态作用域效果：
名字	参数	例子	描述	笔记	已添加版本
add_extra_state_shared_building_slots	<int> / <variable>
要添加或删除的插槽数量。	
add_extra_state_shared_building_slots = 2
更改当前状态的共享建筑槽位数。	共享建筑槽位是用于多种建筑类型的槽，例如军用或民用工厂。这与非共享插槽形成鲜明对比，例如无线电台或空军基地使用的插槽，这些插槽只能通过科技在全球作用域内进行更改。	1.0
add_building_construction	type = <string>
要添加的建筑物。
level = <int> / <variable>
要将建筑物设置为的级别。

定义建筑物是否立即构建。

定义要在其中添加省级建筑物的确切小地块。可用作状态。
小地块作用域

效果所有小地块。在小地块作用域内使用。

效果沿海小地块。在小地块作用域内使用。

效果海军基地小地块。在小地块作用域内使用。

效果边境小地块。在小地块作用域内使用。

仅效果建筑物级别低于、等于或高于指定级别的小地块。在小地块作用域内使用。

效果指定的小地块。在小地块作用域内使用。instant_build = <bool>province = <id>all_provinces = <bool>limit_to_coastal = <bool>limit_to_naval_base = <bool>limit_to_border = <bool>level = <int>id = <id>

add_building_construction = {
    type = arms_factory
    level = 5
    instant_build = yes
}
add_building_construction = {
    type = bunker
    level = 10
    instant_build = yes
    province = {
        all_provinces = yes
        limit_to_border = yes
    }
}
add_building_construction = {
    type = bunker
    level = 1
    instant_build = yes
    province = 2999
}
在指定建筑物的当前状态下开始施工。	您可以使用以下方法将建筑限制为胜利点数：（仅在VP超过5的小地块上建造省建筑）（仅在VP以上的小地块上建造省建筑）。对于省级建筑，即使在特定小地块完成，也必须在包含该省的state作用域内完成。limit_to_victory_point > 5limit_to_victory_point = yes	1.0
set_building_level	type = <string>
要添加的建筑物。
level = <int> / <variable>
要将建筑物设置为的级别。

定义建筑物是否立即构建。

定义要在其中添加省级建筑物的确切小地块。可用作状态。
小地块作用域

效果所有小地块。在小地块作用域内使用。

效果沿海小地块。在小地块作用域内使用。

效果海军基地小地块。在小地块作用域内使用。

效果边境小地块。在小地块作用域内使用。

仅效果建筑物级别低于、等于或高于指定级别的小地块。在小地块作用域内使用。

效果指定的小地块。在小地块作用域内使用。instant_build = <bool>province = <id>all_provinces = <bool>limit_to_coastal = <bool>limit_to_naval_base = <bool>limit_to_border = <bool>level = <int>id = <id>

set_building_level = {
    type = infrastructure
    level = 10
    instant_build = yes
}
set_building_level = {
    type = bunker
    level = 3
    province = {
        all_provinces = yes
        limit_to_border = yes
        level < 3
    }
}
将指定的建筑物设置为当前状态（或state内的小地块）。	省级建筑采用省级建筑。您可以使用以下方法将建造限制为胜利点数：（仅在VP超过5的小地块上建造省建筑） （仅在VP以上的小地块内建造省建筑） 对于省级建筑，即使在特定小地块内也必须在包含该省的state作用域内完成。limit_to_victory_point > 5limit_to_victory_point = yes	1.4
damage_building	type = <building>
建筑物损坏。
damage = <float>
要造成的伤害量。

全省目标省级建筑。province = <id>

damage_building = {
    type = infrastructure
    damage = 1
}
在当前状态下损坏指定的建筑物。	建筑物的运行状况由建筑物定义中的值属性确定。乘以他们的等级，得到他们的总生命值。	1.3
remove_building	type = <building>
要移除的建筑物。
level = <int> / <variable>
要删除的级别。

remove_building = {
    type = arms_factory
    level = 5
}
移除处于当前状态的指定建筑物。对于共享建筑物，级别确定数量，而对于其他建筑物，它是实际级别。	 	1.0
抵抗与依从

与抵抗力量相关的状态作用域效应：
名字	参数	例子	描述	笔记	已添加版本
add_compliance	<int> / <variable>
要添加的量。	
add_compliance = 30
将符合性添加到指定状态。	 	1.9
add_resistance	<int> / <variable>
要添加的量。	
add_resistance = 30
将抵抗力量添加到指定状态。	 	1.9
add_resistance_target	<int> / <variable>
要添加的量。	
add_resistance_target = 30
增加指定状态下的抵抗力量目标。	 	1.9
add_resistance_target	id = <int>
目标的 ID 增加。

增加抵抗力量目标的量。

仅当被占领国家/地区在指定作用域内时，才会应用增加。

仅当占用者是指定作用域时，才会应用增加。

如果设置，抵抗力量目标将仅在指定的天数内增加。

要在抵抗力量目标自建提示中显示的自建提示。amount = <int>/<variable>occupied = <scope>occupier = <scope>days = <int>/<variable>tooltip = <string>	
add_resistance_target = {
    id = 123
    amount = 30
    occupied = ENG
    occupier = GER
    days = 365
    tooltip = my_localisation_key
}
增加指定状态下的抵抗力量目标。	 	1.9
cancel_resistance	<bool>
bool。	
cancel_resistance = yes
取消当前状态的抵抗力量活动。	 	1.9
force_disable_resistance	<scope>
目标国家/地区。	
force_disable_resistance = GER
当占用者是指定的国家/地区时，禁用作用域状态的抵抗。	 	1.9
force_disable_resistance	clear = <bool>
如果设置为 yes，将清除抵抗力量。

如果占用者是指定的作用域，则抵抗力量将被禁用。

如果占领国家是指定作用域，则抵抗将被禁用。occupier = <scope>occupied = <scope>	
force_disable_resistance = {
    clear = yes
    occupier = GER
    occupied = ENG
}
当占用者是指定的国家/地区时，禁用作用域状态的抵抗。	 	1.9
force_enable_resistance	<scope>
目标国家/地区。	
force_enable_resistance = GER
当占用者是指定的国家/地区时，为作用域状态启用抵抗力量。	不会自行启动抵抗力量，只会删除强制禁用它的检查。与start_resistance一起使用，以便立即启动抵抗力量。	1.9
force_enable_resistance	clear = <bool>
如果设置为 yes，将清除抵抗力量。

如果占用者是指定的作用域，则将启用抵抗力量。

如果被占领国家在指定作用域内，则将启用抵抗。occupier = <scope>occupied = <scope>	
force_enable_resistance = {
    clear = yes
    occupier = GER
    occupied = ENG
}
当占用者是指定的国家/地区时，为作用域状态启用抵抗力量。	不会自行启动抵抗力量，只会删除强制禁用它的检查。与start_resistance一起使用，以便立即启动抵抗力量。	1.9
remove_resistance_target	<int> / <variable>
要移除的抵抗力量目标的 ID。（必须使用add_resistance_target设置）	
remove_resistance_target = 30
删除指定状态下的设定抵抗力量目标增加。	没有自建提示。	1.9
set_compliance	<int> / <variable>
要将合规性设置为的数值。	
set_compliance = 30
设置指定状态下的符合性。	 	1.9
set_resistance	<int> / <variable>
要设置抵抗力量的量。	
set_resistance = 30
将抵抗力量设置为指定状态。	 	1.9
start_resistance	<bool>/<scope>
是否开始抵抗。如果设置为作用域，则启动指定作用域的抵抗力量。	
start_resistance = POL
start_resistance = yes
在指定状态下启动抵抗力量。	如果在通常无法启动抵抗力量的状态下使用，请与force_enable_resistance一起使用。	1.9
set_garrison_strength	<0-1>
新的驻军力量。	
set_garrison_strength = 0.5
设置指定状态下驻军的兵力。		1.9
set_occupation_law	<law ID>
新特工法颁布的原作用域或.default_law	
GER = { every_controlled_state = { set_occupation_law = military_governor_occupation } } # Changes GER's occupation law for every controlled state.
制定国家的占领法案。	PREV 将是将更改占领法案的国家。如果 PREV 不是一个国家，则什么都不会改变。如果 PREV 不占领该state，则在它占领之前什么都不会发生。如果使用 ，则重置为国家/地区职业设定的法律。default_law	1.12
人物作用域作用域
此处的效果必须在人物作用域作用域内使用。

一般
常规人物作用域作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
set_character_flag	<flag>
用于标识字符旗标的唯一字符串。
或

要设置的旗标。

将旗标设置为持续指定的天数。可选。

旗标的新值，作用域从 -2 147 483 648 到 2 147 483 647。flag = <flag>days = <int>value = <int>

set_character_flag = my_flag
set_character_flag = {
    flag = my_flag
    days = 123
    value = 1
}
定义字符旗标。	不显示自建提示。此效果中的旗标用于“bool旗标”的含义，用于存储信息。	1.11
set_character_name	<localisation key>
要使用的名称。	
set_character_name = GER_my_cool_flag
将字符的名称更改为指定的本地化键的值。		1.11
modify_character_flag	flag = <flag>
要修改的国家/地区旗标。
value = <value>
要将其设置为的值：0 或 1

modify_character_flag = {
  flag = GER_my_cool_flag
  value = 5
}
修改现有字符旗标	请改用变量。	1.11
clr_character_flag		
clr_character_flag = <bool>
清除字符旗标		1.11
退休	<bool>
bool值>	
retire = yes
停用当前字符（删除它们）。	 	1.5
set_nationality	<scope> / <variable>
目标国家/地区。	
set_nationality = GER
将当前字符切换到指定的国家/地区，并为其提供该字符。	如果您想更改特定角色的国籍，并且获得效果的国家/地区尚未招募该角色，请使用
every_possible_country = {
    limit = { has_character = ID }
    random_character = {
        limit = { is_character = ID }
        set_nationality = TAG
    }
}
命令来调用它们。仅在 1.11 及更高版本中是必需的。

1.5
set_portraits	character = <character>
角色名称。如果在人物作用域作用域内，则可选。
军队作用域：
用作顾问的GFX代码。
用作将军的GFX代码。
角色作用域：
用作国家领导人的GFX代码。small = <sprite>large = <sprite>large = <sprite>
set_portraits = {
    character = my_character
    army = { small ="MySmallCharacterGFX" }
    civilian = { large ="MyLargeCharacterGFX" }
}
更改角色的指定肖像。	GFX代码在 /Hearts of Iron IV/interface/*.gfx 文件中定义。	1.11
add_trait	slot = <slot>角色的插槽。顾问是必需的。
ideology = <sub-ideology>角色的意识形态类型。国家领导人所必需的。

要添加的特质。trait = <trait>

add_trait = {
    slot = political_advisor
    trait = really_good_boss
}
add_trait = {
    ideology = liberalism
    trait = field_of_gar
}
将指定的国家/地区领导人特质添加到角色中。	意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。字符槽可以是角色的名称或 ID。建议使用 name，因为 1.11 使 id 过时。	1.11
remove_trait	slot = <slot>角色的插槽。顾问是必需的。
ideology = <sub-ideology>角色的意识形态类型。国家领导人所必需的。

要删除的特质。trait = <trait>

remove_trait = {
    slot = political_advisor
    trait = really_good_boss
}
remove_trait = {
    ideology = liberalism
    trait = field_of_gar
}
从人物中删除指定的特质。	意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。字符槽可以是角色的名称或 ID。建议使用 name，因为 1.11 使 id 过时。	1.11
add_corps_commander_role	<...>
军队领导人角色定义
add_corps_commander_role = {
    skill = 4
    attack_skill = 2
    defense_skill = 3
    planning_skill = 3
    logistics_skill = 5
}
将指定的人物设置为同时充当元帅。		1.11
add_field_marshal_role	<...>
军队领导人角色定义
add_field_marshal_role = {
  skill = 4
  attack_skill = 2
  defense_skill = 3
  planning_skill = 3
  logistics_skill = 5
}
将指定的人物设置为也充当元帅。		1.11
add_naval_commander_role	<...>
海军将领角色定义
add_naval_commander_role = {
  skill = 4
  attack_skill = 2
  defense_skill = 3
  planning_skill = 3
  logistics_skill = 5
}
将指定的人物设置为同时充当海军上将。		1.11
add_country_leader_role	character = <character>
要修改的人物。
country_leader = { ... }
国家/地区领导者角色定义

将提升领导者成为指定方的领导者。可选，默认为 false。promote_leader = <bool>

add_country_leader_role = {
    character = GER_character_token
    promote_leader = yes
    country_leader = {
        ideology = fascism_type
        expire = "1965.1.1.1"
        traits = { war_industrialist }
    }
}
将指定的人物设置为同时充当国家领导人，如果指定，则晋升为党派领导人。		1.11
promote_character	<bool>
bool。
或

国家领导人角色使用的意识形态类型。<ideology type>

promote_character = yes
promote_character = liberalism
将角色提升为其政党的领导人。	如果角色具有多个国家/地区领导人角色，则必须指定意识形态类型。意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。	1.11
remove_country_leader_role	ideology = <string>
角色的意识形态类型。	
remove_country_leader_role = {
    ideology = socialism
}
从角色中删除国家/地区领导者角色。	意识形态类型是指分配给角色的意识形态群体的子类型，在社区术语中通常称为子意识形态。	1.11
add_advisor_role	advisor = { ... }
顾问角色定义
activate = <bool>
将激活顾问（在向国家/地区政府运行命令时直接添加它们）。可选，默认为 false。

add_advisor_role = {
    activate = yes
    advisor = {
        slot = air_chief
        cost = 50
        idea_token = GER_character_token_air_chief
        traits = {
            air_chief_ground_support_2
        }
    }
}
将指定的人物设置为也充当顾问，如果指定，则激活。	限定和效果块（例如 和 ）不能添加到以这种方式创建的顾问定义中。allowedon_add	1.11
remove_advisor_role	slot = <int>
要从中移除顾问插槽的插槽。	
remove_advisor_role = {
  slot = political_advisor
}
从角色中删除指定的顾问角色。		1.11
将领
这些只能与将领类型的人物一起使用。

常规将领作用域效果：
名字	参数	例子	描述	笔记	已添加版本
unit_leader_event	id = <event>
要触发的事件。
days = <int> / <variable>
在指定的天数内触发事件。可选。

在指定的小时数内触发事件。可选。

将小时的随机数（介于 0 和随机之间，包括 0 和随机）添加到计划的触发时间。可选。

将天数的随机数（介于 <> 和 random_days 之间，包括 <> 和 之间）添加到计划的触发时间。可选。hours = <int> / <variable>random = <int> / <variable>random_days = <int> / <variable>

unit_leader_event = {
    id = my_event.1
    days = 10
    random = 50
    random_days = 10
}
为当前将领的所有者触发指定的事件。	使用显示当前将领肖像的特殊界面。
不需要重复检查限定的地方可以作为调度事件的性能轻量级替代方案。randommean_time_to_happen

1.5
set_unit_leader_flag	<flag>
用于标识将领旗标的唯一字符串。	
set_unit_leader_flag = my_flag
定义将领旗标。	弃用的。请改用set_character_flag。不显示自建提示。	1.5
clr_unit_leader_flag	<flag>
要清除的将领旗标的唯一字符串。	
clr_unit_leader_flag = my_flag
清除定义的将领旗标。	弃用的。请改用clr_character_flag。不显示自建提示。	1.5
modify_unit_leader_flag	flag = <flag>
要修改的将领旗标。
value = <value>
要将其设置为的值：0 或 1

modify_unit_leader_flag = {
    flag = my_flag
    value = 1
}
修改将领旗标。	弃用的。请改用modify_character_flag。	1.5
promote_leader	<bool>
bool	
promote_leader = yes
将现任将领提升为陆军元帅（如果是将领）。	 	1.5
demote_leader	<bool>
bool	
demote_leader = yes
将现任元帅降级为将领（如果为陆军元帅）。	 	1.5
add_unit_leader_trait	<trait>
要添加的特质。	
add_unit_leader_trait = old_guard
将指定的特质添加到当前将领。	性状可在 /Hearts of Iron IV/common/unit_leader/*.txt 檔案中找到。	1.0
remove_unit_leader_trait	<trait>
要删除的特质。	
remove_unit_leader_trait = old_guard
从当前将领中删除指定的特质。	性状可在 /Hearts of Iron IV/common/unit_leader/*.txt 檔案中找到。	1.0
add_random_trait	<trait>
要添加的特质。	
add_random_trait = { old_guard brilliant_strategist inflexible_strategist }
将列表中的随机特质添加到角色中。	性状可在 /Hearts of Iron IV/common/unit_leader/*.txt 檔案中找到。	1.5
add_timed_unit_leader_trait	<trait>
要添加的特质。
days = <int>
性状的持续时间。

add_timed_unit_leader_trait = {
    trait = wounded
    days = 90
}
在指定的持续时间内将指定的特质添加到当前将领。	性状可在 /Hearts of Iron IV/common/unit_leader/*.txt 檔案中找到。	1.5
replace_unit_leader_trait	 	 	 	性状可在 /Hearts of Iron IV/common/unit_leader/*.txt 檔案中找到。	1.5
remove_exile_tag	去掉军队领袖身上的流亡标签，使他们不再被视为流亡领袖。	
remove_exile_tag = yes
删除领导者流亡标记。	 	1.6
gain_xp	<int>	
gain_xp = 5
为当前人物增加经验，如果适用，可以晋升到下一个技能级别。	不能与底片一起使用。	1.9
remove_unit_leader	<bool>	
remove_unit_leader = yes
删除当前将领。		1.0
remove_unit_leader_role	<bool>
bool。	
remove_unit_leader_role = yes
从角色中删除每个将领角色		1.11
国家领导人
这些只能与国家/地区领导者类型的人物一起使用。

国家领先作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
add_country_leader_trait	<trait>
要添加的特质。
OR：

添加特质的国家领导人角色的子意识形态。

要添加的特质。ideology = <sub-ideology>trait = <trait>

add_country_leader_trait = nationalist_symbol
add_country_leader_trait = {
    ideology = marxism
    trait = anti_communist
}
将指定的特质添加到当前字符。	性状可在 /Hearts of Iron IV/common/country_leader/*.txt 檔案中找到。前者仅当角色具有一个国家领导人角色时。	1.11
remove_country_leader_trait	<trait>
要删除的特质。
OR：

添加特质的国家领导人角色的子意识形态。

要删除的特质。ideology = <sub-ideology>trait = <trait>

remove_country_leader_trait = nationalist_symbol
remove_country_leader_trait = {
    ideology = marxism
    trait = anti_communist
}
从当前人物中删除指定的特质。	性状可在 /Hearts of Iron IV/common/country_leader/*.txt 檔案中找到。前者仅当角色具有一个国家领导人角色时。	1.11
swap_country_leader_traits	remove = <trait>
要删除的性状
add = <trait>
特质添加
领导者的
子意识形态在哪里交换特质。ideology = <sub-ideology>
swap_country_leader_traits = {
    remove = nationalist_symbol
    add = anti_communist
    ideology = marxism
}
交换当前字符的特质。	在国家/地区作用域内使用swap_ruler_traits。	1.11
战斗
战斗相关单位首领作用域效果：
名字	参数	例子	描述	笔记	已添加版本
supply_units	<int> / <variable>
供应小时数。	
supply_units = 24
将指定数量的补给添加到当前将领的部队中。	 	1.5
add_max_trait	<int>
要添加的量。	
add_max_trait = 1
将指定数量的可分配特质槽添加到当前将领。	 	1.5
add_skill_level	<int>
要添加的技能。	
add_skill_level = 1
为当前将领增加技能。	 	1.5
add_logistics	<int>
要添加多少技能级别。	
add_logistics = 1
为当前将领增加后勤技能。	 	1.5
add_planning	<int>
要添加多少技能级别。	
add_planning = 1
为当前将领增加计划技能。	 	1.5
add_defense	<int>
要添加多少技能级别。	
add_defense = 1
为当前将领增加防御技能。	 	1.5
add_attack	<int>
要添加多少技能级别。	
add_attack = 1
为当前将领增加攻击技能。	 	1.5
add_coordination	<int>
要添加多少技能级别。	
add_coordination = 1
为现任海军将领增加协调能力。		1.5
add_maneuver	<int>
要添加多少技能级别。	
add_maneuver = 1
为当前海军将领增加机动技能。		1.5
add_temporary_buff_to_units	combat_offense = <float>
授予的加成。可选。
combat_breakthrough = <float>
授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

授予的加成。可选。

增益的持续时间。可选。

要为增益显示的自建提示。combat_defense = <float>combat_entrenchment = <float>org_damage_multiplier = <float>str_damage_multiplier = <float>war_support_reduction_on_damage = <float>cannot_retreat_while_attacking = <float>cannot_retreat_while_defending = <float>days = <int>tooltip = <string>

add_temporary_buff_to_units = {
    combat_offense = 0.25
    combat_breakthrough = 0.25
    org_damage_multiplier = -1.0
    str_damage_multiplier = 0.25
    war_support_reduction_on_damage = 0.2
    cannot_retreat_while_attacking = 1.0
				
    days = 7
    tooltip = ABILITY_FORCE_ATTACK_TOOLTIP
}
将指定的战斗增益添加到当前单位首领。	 	1.5
特工
特工作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
add_nationality	<tag>
要将国籍设置为的国家/地区。	
add_nationality = GER
将国籍添加到当前特工。	 	1.9
capture_operative	captured_by = <tag>
被哪个国家俘虏。
ignore_death_chance = <bool>
是否忽略捕获时的死亡几率（默认为否）。
capture_operative = {
    captured_by = POL
    ignore_death_chance = yes
}
使当前特工被特定国家/地区捕获。		1.9
force_operative_leader_into_hiding	<bool>
force_operative_leader_into_hiding = yes
迫使当前特工躲藏起来。		1.9
free_operative	captured_by = <tag>
抓获特工的国家。	
free_operative = { captured_by = POL }
释放当前特工。		1.9
harm_operative_leader	<int>
对特工的伤害有多大。	
harm_operative_leader = 12
伤害当前特工。	该值受修正的效果。	1.9
kill_operative	killed_by = <tag>
会杀死特工的国家。	
kill_operative = { killed_by = POL }
杀死当前特工。		1.9
turn_operative	turned_by = <tag>
操作缺陷的国家/地区。	
turn_operative = {
    turned_by = PREV
}
将当前特工转向他们自己的国家，将他们转移到指定的国家。	这算作手术死亡，并将触发相应的 On 操作。记录错误（如果用于对付您自己的特工）。	1.9
operative_leader_event	id = <event>
要触发的事件。
days = <int> / <variable>
在指定的天数内触发事件。可选。

在指定的小时数内触发事件。可选。

将小时的随机数（介于 0 和随机之间，包括 0 和随机）添加到计划的触发时间。可选。

将天数的随机数（介于 <> 和 random_days 之间，包括 <> 和 之间）添加到计划的触发时间。可选。

事件的发送者。可选，默认为特工的所有者。

事件的接收者。可选，默认为特工的所有者。

在脚本化本地化中设置 FROM 的作用域。可选。

设置 FROM 的作用域。脚本化本地化中的 FROM。可选。

在脚本化本地化中设置 ROOT 的作用域。可选。hours = <int> / <variable>random = <int> / <variable>random_days = <int> / <variable>originator = <tag>recipient = <tag>set_from = <tag>set_from_from = <tag>set_root = <tag>

operative_leader_event = {
    id = my_event.1
	originator = POL
	recipient = GER
    days = 10
    random = 50
    random_days = 10
	set_from = ENG
	set_root = SOV
	set_from_from = FRA
}
为特工触发指定的事件。	使用显示当前操作肖像的特殊界面。
不需要重复检查限定的地方可以作为调度事件的性能轻量级替代方案。randommean_time_to_happen

1.9
划分作用域
此处的效果必须在除法作用域内使用。

部队作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
destroy_unit	<bool>
bool。	
destroy_unit = yes
摧毁当前作用域的部队。		1.12
add_history_entry	key = <localisation key>
条目的名称。
subject = "<string>"
记录的条目。从未向玩家显示。

是否可以在历史条目上向该部队颁发奖章。allow = <bool>

add_history_entry = {
    key = my_history_entry
    subject = "Test entry"
    allow = no
}
在决议的命令历史记录中创建条目。		1.12
change_division_template	<string>
部队的名称。	
change_division_template = "New template"
将分部的编制更改为指定的编制。		1.12
add_random_valid_trait_from_unit	<character>
要授予特质的人物。	
add_random_valid_trait_from_unit = FROM
将随机有效单位特质添加到将领。	仅当除法作用域与 ROOT 作用域相同时，才能使用。	1.12
add_unit_medal_to_latest_entry	unit_medals = <medal ID>
要添加的奖牌。	
add_unit_medal_to_latest_entry = {
    unit_medals = my_medal
}
将指定的奖牌添加到单位历史记录中的最新条目中。		1.12
add_divisional_commander_xp	<decimal>
要添加的经验。	
add_divisional_commander_xp = 10
将指定的经验量添加到师长。		1.12
reseed_division_commander	<int>
要使用的种子。	
reseed_division_commander = 760
使用给定的种子重新随机化师长。	没有自建提示。	1.12
其他作用域
此处的效果必须在注释中指定的作用域内使用。

其他作用域的效果：
名字	参数	例子	描述	笔记	已添加版本
execute_operation_coordinated_strike	amount = <int>
在操作中设置的天数内执行操作的次数。	
execute_operation_coordinated_strike = {
    amount = 12
}
在目标地区所有准备好的港口打击和战略轰炸将在防空系统无法拦截的情况下多次执行。	只能在操作中使用。	1.9
通用限定
这些作用域在效果作用域内用于控制效果的执行。

if 语句
if 语句允许仅在满足某些限定时才执行效果。这是通过块完成的。这用作带有附加参数的效果块，该参数是一个限定块，其中必须满足每个限定才能检查作用域。if = { ... }limit = { ... }

For example, the following will add 10% StabilityStability to the country this is executed on if it has positive Political PowerPolitical Power and below 90% stability:

if = {
    limit = {
        has_political_power > 0
        stability < 0.9
    }
    add_stability = 0.1
}
If the limit is not met, then none of the effects inside will be executed. If it is, then each one will be. If the limit is omitted, it defaults to being always true.
Optionally, (with serving in a similar fashion) and can be added. If the initial limit within is false, it moves on to the next , checking the limit there. If the limit there is false, then it moves on to the next one, until hitting an end or an .
Two variants exist: nested and unnested. In the first case, the or is put directly inside of the preceding or , while in the second case it's put right after. In case of overlap, unnested if statements are preferred. Here is an example using unnested if statements: else_if = { ... }limit = { ... }else = { ... }if = { ... }else_if = { ... }else = { ... }else_ifelseifelse_if

if = {
    limit = {
        stability < 0.3 # If stability is below 30%, add 30%.
    }
    add_stability = 0.3
}
else_if = {
    limit = {
        stability < 0.6 # Otherwise, if it's below 60% (i.e. 30-59%), add 20%
    }
    add_stability = 0.2
}
else = {
    add_stability = 0.1 # If there's 60-100% stability, add 10%
}
在自建提示中，仅显示将要执行的效果。未实现的 if 语句（或由于满足 if 语句而未读取的 /）中的效果将对玩家隐藏，限定也将隐藏。为了避免玩家混淆，可以使用自定义效果自建提示告诉玩家此效果块将执行哪些操作，例如在 .elseelse_ifelse

随机效应
如果您希望效果有随机的机会完成或发生任何事情，那么块是实现此目的的最简单方法：random = { ... }

random = {
    chance = 80
    add_stability = 0.4
    add_war_support = 0.3
}
特别是，这将有80%的机会增加40%的稳定性和30%的战争支持，因此，有20%的机会什么都不做。这里的机会在 0 到 100 的作用域内。

如果您希望游戏在效果块之间进行选择，则可以改用random_list。例如，如果您希望效果随机为玩家提供四分之一的奖励，则可以执行以下操作：

random_list = {
    10 = {
        add_stability = 0.5
    }
    10 = {
        add_manpower = 10000
    }
    10 = {
        add_war_support = 0.5
    }
    10 = {
        army_experience = 100
    }
}
数字不是机会，而是每个选项的权重，因为它们不必加起来为 100 或任何数字。例如，权重为 20 的选项被选中的可能性是概率为 10 的选项的两倍。总的来说，选择期权的概率等于期权的权重除以所有权重的总和。

也可以使用修正（类似于MTTH块）来效果每个可能的随机效应的权重或使用变量作为机会。

random_list = {
    30 = {
        modifier = {
            factor = 1.3
            has_country_flag = inward_perfect_flag
        }
        add_stability = 0.5
    }
    25 = {
        add_manpower = 10000
    }
    20 = {
        add_war_support = 0.5
    }
    my_variable = { # Taking "my_variable" as the variable's name, both "var:my_variable" and "my_variable" are valid options, left up to the developer's preference.
        army_experience = 100
    }
}
如果设置了国旗inward_perfect_flag，它将上述几率 30 乘以 1.3 得到 39。同时，将相应的临时变量或当前作用域的变量的值作为选项的权重。my_variable

请注意，如果要创建包含随机列表的可重复决议，默认情况下，每次在游戏中触发相同的决议时，都会选择相同的随机结果。您可以通过在决议块中包含以下行来扭转此行为：

fixed_random_seed = no
这仅用于决议。在其他地方，默认情况下随机种子是未固定的，因此无需将此参数设置为“no”。
自建提示操作
另请参阅：本地化
在这种情况下，“自建提示”是指在游戏中向玩家显示的文本，用于解释效果块在游戏中的变化，例如“+50 政治点政治力量”。

有 3 种方法可以在效果块中编辑自建提示：

hidden_effect = { ... }用于隐藏其中的效果，使其执行不会显示给玩家。
effect_tooltip = { ... }而是用于将效果放入自建提示中，而无需实际执行它们。
custom_effect_tooltip = my_localisation_key用于放置任意文本段落作为将要执行的效果。
例如，此示例国策的完成奖励利用了所有三个：

completion_reward = { 
    hidden_effect = {
        every_subject_country = { country_event = my_event.1 }
    }
    custom_effect_tooltip = send_event_to_subjects_tt
    effect_tooltip = {
        add_political_power = 100
    }
    custom_effect_tooltip = reject_war_tt
}
在这种情况下，send_event_to_subjects_tt和reject_war_tt是在任何使用 UTF-8-BOM 编码的 /Hearts of Iron IV/localisation/english/*_l_english.yml 文件中定义的本地化键，假设为英语。

 send_event_to_subjects_tt: "Sends a demand to our every subject.\nIf they agree, we get the following for each subject:"
 reject_war_tt: "If they reject the demand, we gain a wargoal against them."
在游戏中，这将如下所示：

效果：
向我们的每个附庸政权发送需求。
如果他们同意，我们会得到每个附庸政权的以下内容：
政治点：+100
如果他们拒绝要求，我们将获得针对他们的战争目标。

值得注意的是，触发国家/地区事件的效果从自建提示中隐藏。完成国策后，唯一发生的是每个附庸国家都会收到一个ID为的事件，该国不会立即获得100的政治点。my_event.1

meta effect
meta effect允许您使用非动态效果（不接受修正且只能使用静态标记或常量值的效果），就好像它们接受变量一样。

add_equipment_to_stockpile = {
    type = infantry_equipment_2
    amount = eq_amount
}
在上面显示的效果中，添加的装备数量是动态的，可以使用变量“eq_amount”进行设置。但是，此效果不允许将变量用作装备类型。您不能将“infantry_equipment_2”存储在变量中并在此处使用它。

但是，meta effect将允许您在其中使用变量和脚本化本地化来构建效果，就好像它们是文本一样并运行它们。让我们使之前的效果接受装备类型和装备级别作为存储在“eq_type”和“eq_level”中的变量。

set_variable={eq_type=1}#将设备类型设置为“1”，这将使用脚本本地化确定给定的设备，如下所示

set_variable={eq_amount=10}#将给定的设备数量设置为10

set_variable={eq_level=2}#将设备级别设置为2，直接用于元效果，不需要脚本本地化

meta_effect = { # 实际的元效应。这可以在您需要的任何地方进行：在决策、脚本效果、脚本GUI单击效果等。。。
    text = {
        add_equipment_to_stockpile = {
            type = [EQ_TYPE]_[EQ_LEVEL]
            amount = eq_amount
        }
    }
    EQ_LEVEL = "[?eq_level|.0]" # 获取“eq_level”变量，并将其保存为“eq_level”以供元效果使用
    EQ_TYPE = "[This.GetEquipmentName]" # 基于“eq_type”变量，从脚本本地化中获取设备类型（包括在下面），并将其保存为“eq_type”以供元效果使用
}
# The scripted localization for the "eq_type" variable, which goes in a scripted localisation file
defined_text = { # Since the "eq_type" variable in this example is equal to 1, the equipment given by the effect is "artillery_equipment"
    name = GetEquipmentName
    text = {
        trigger = {
            check_variable = { eq_type = 0 }
        }
        localization_key = "infantry_equipment"
    }
    text = {
        trigger = {
            check_variable = { eq_type = 1 }
        }
        localization_key = "artillery_equipment"
    }
}
如您所见，我们创建了一个接受两个参数的meta_effect。这些参数将用于替换meta effect中的参数 [EQ_TYPE] 和 [EQ_LEVEL]。EQ_LEVEL将替换为 [？eq_level|。0]，这是eq_level的整数值（在本例中，2.000变为2）。EQ_TYPE有点复杂，它正在被脚本化本地化所取代。此脚本化本地化将检查变量eq_type并根据其值返回装备的密钥令牌。如果为 0，它将返回“infantry_equipment”。如果为 1，它将返回“artillery_equipment”。

所以最终的结果是 [EQ_TYPE] 被 “artillery_equipment” 替换，[EQ_LEVEL] 被 “2” 替换，最后我们的效果将被构建为：

add_equipment_to_stockpile = {
    type = artillery_equipment_2
    amount = eq_amount
}
这将给你 10 artillery_equipment_2。

debug = 是 可以添加到meta effect中。这会将最终效果打印到游戏中.log当效果被执行时，并使调试更容易。

脚本效果
脚本效果与函数的作用类似，因为它们可以在 /Hearts of Iron IV/common/scripted_effects/*.txt 中定义，然后在其他地方用作缩短版本。除此之外，游戏还允许创建自定义控制台命令，这些命令是脚本效果。

脚本化效果简单地定义为

scripted_effect_name = {
	<effects>
}
此示例可在常规代码中用作效果，如 。scripted_effect_name = yes

脚本效果可以通过键入来在控制台中通过键入来运行它们来访问它们。e scripted_effect_name

要创建自定义控制台命令，脚本化效果的名称应以 开头。控制台命令本身不包括 ，因此将在控制台中运行，因为在
自定义控制台命令中，运行命令的国家/地区是 FROM，而 ROOT 是所选的国家/地区、state或字符。在控制台命令之后输入的任何内容，用空格分隔，如添加到“args”临时数组中。脚本效果的一个示例，它将作为参数输入的每个状态传输到运行控制台命令的国家/地区，例如d_d_d_test_commandtest_commandtest_command 123 321 GER

d_transfer_states = {
	for_each_scope_loop = {
		array = args
		FROM = {
			transfer_state = PREV
		}
	}
}

限定
（重定向自条件）
跳到导航跳到搜索
这是一个社区维护的维基。如果您发现错误，欢迎您修复它。

条件（也称为限定）用于指定效果的执行时间。当限定返回 true 时，执行将继续，否则将停止。多个限定（包括默认的 AND 限定）允许嵌套创建更复杂的表达式。

限定列表可能已过时。完整但未排序的限定列表可以在 /Hearts of Iron IV/documentation/triggers_documentation.html 或 /Hearts of Iron IV/document/triggers_documentation.md 中找到。从 1.12.3 开始，此文件上次更新在版本 1.11.4 中。



目录
1	运营商
2	上下文作用域
3	作用域
3.1	触发作用域
3.2	双作用域
4	通用限定工具
5	任何作用域
5.1	常规
5.2	变量
5.3	调试
6	国家作用域
6.1	常规
6.2	政治
6.3	权力平衡（BOP）
6.4	建筑物
6.5	科技
6.6	idea
6.7	外交
6.8	战争
6.9	state
6.10	军事
6.11	装备
6.12	情报
6.13	.AI
6.14    人物
6.15	和平会议
7	状态作用域
7.1	常规
7.2	抵抗和合规性
8	人物作用域作用域
8.1	常规
8.2	国家领导人
8.3	将领
8.4	特工
9	战斗
10	分部作用域
11	meta trigger
12	脚本化限定
12.1	有用的脚本限定
13	引用
运算符
每个限定都使用三个运算符之一：等号或比较符号和 .=><

等号可以表示严格相等（与系列中检查是否等于或大于的先前游戏不同），也可以作为引入附加限定块的一种方式，如 .比较符号起到了严格的比较作用：例如，如果该国正好拥有100个政治点，则不是真的。has_opinion = { target = GRE value < -10 }has_political_power > 100

并非所有限定都支持等号或比较符号。请参阅每个限定注释中的详细信息。如果未另行说明，限定仅支持等号。

上下文作用域
所有限定都在三个常规作用域中运行：

国家
state
字符
它们通过说明限定正在检查的内容来为限定提供上下文。

每个国家作为一般国家作用域的子作用域，即 将只检查德国，而将检查所有国家。状态和字符也是如此。GER = { }any_country

限定在未分配到的作用域中不起作用。国家限定不适用于state，反之亦然。

作用域
主条目：作用域
这些不用作限定，而是作为作用域，用于更改要为其检查限定的对象。每个都用作 AND 语句。

触发作用域
触发作用域：
名字	用法	目标类型	例	描述	已添加版本
all_country	始终可用	国家	all_country = { … }	检查是否所有国家/地区都符合限定。	1.0
any_country	始终可用	国家	any_country = { … }	检查是否有任何国家/地区符合限定。	1.0
all_other_country	仅在国家作用域内	国家	all_other_country = { … }	检查除此作用域所在的国家/地区以外的所有国家/地区是否都符合限定。	1.0
any_other_country	仅在国家作用域内	国家	any_other_country = { … }	检查此作用域所在国家/地区以外的任何国家/地区是否符合限定。	1.0
all_country_with_original_tag	始终可用	国家	
all_country_with_original_tag = {
    original_tag_to_check = TAG  #required
    …                  #triggers to check
}
检查来自指定国家/地区的所有国家/地区（包括为内战和其他目的创建的动态国家/地区）是否满足限定。 用于指定原始标记。original_tag_to_check = TAG	1.9
any_country_with_original_tag	始终可用	国家	
any_country_with_original_tag = {
    original_tag_to_check = TAG  #required
    …                  #triggers to check
}
检查来自指定国家/地区的任何国家/地区（包括为内战和其他目的而创建的动态国家/地区）是否符合限定。 用于指定原始标记。original_tag_to_check = TAG	1.9
all_neighbor_country	仅在国家作用域内	国家	all_neighbor_country = { … }	检查与此作用域所在的国家/地区接壤的所有国家/地区是否都符合限定。	1.0
any_neighbor_country	仅在国家作用域内	国家	any_neighbor_country = { … }	检查与此作用域所在的国家/地区接壤的任何国家/地区是否符合限定。	1.0
any_home_area_neighbor_country	仅在国家作用域内	国家	any_home_area_neighbor_country = { … }	检查与此作用域所在的国家接壤的任何国家/地区以及在其母国区域（即国家首都之间的直接陆地连接）是否符合限定。	1.0
all_guaranteed_country	仅在国家作用域内	国家	all_guaranteed_country = { … }	检查此作用域所在国家/地区保证的所有国家/地区是否满足限定。	1.9
any_guaranteed_country	仅在国家作用域内	国家	any_guaranteed_country = { … }	检查此作用域所在国家/地区保证的任何国家/地区是否满足限定。	1.9
all_allied_country	仅在国家作用域内	国家	all_allied_country = { … }	检查与此作用域所在的国家结盟的所有国家 - 这意味着他们要么是该国的附庸，要么是其领主，要么是他们共享一个阵营 - 是否满足限定。不包括国家本身。	1.9
any_allied_country	仅在国家作用域内	国家	any_allied_country = { … }	检查与此作用域所在的国家结盟的任何国家 - 这意味着他们要么是该国的附庸，要么是其领主，要么是他们共享一个阵营 - 满足限定。不包括国家本身。	1.9
all_occupied_country	仅在国家作用域内	国家	all_occupied_country = { … }	检查此作用域所在国家/地区所占领的所有国家/地区（即被占领国家/地区具有由占领者所在国家/地区控制的核心国家/地区）是否满足限定。	1.9
any_occupied_country	仅在国家作用域内	国家	any_occupied_country = { … }	检查此作用域所在国家/地区所占领的任何国家/地区（即被占领国家/地区具有由占领者国家/地区控制的核心国家/地区）是否满足限定。	1.9
all_enemy_country	仅在国家作用域内	国家	all_enemy_country = { … }	检查与此作用域所在的国家交战的所有国家/地区是否都符合限定。	1.9
any_enemy_country	仅在国家作用域内	国家	any_enemy_country = { … }	检查与此作用域所在的国家/地区交战的任何国家/地区是否满足限定。	1.9
all_subject_countries	仅在国家作用域内	国家	all_subject_countries = { … }	检查作为此作用域所在附庸政权的所有国家/地区是否都满足限定。请注意作用域中的复数拼写。	1.11
any_subject_country	仅在国家作用域内	国家	any_subject_country = { … }	检查作为此作用域所在作用域的附庸政权的任何国家/地区是否符合限定。	1.11
any_country_with_core	仅在状态作用域内	国家	any_country_with_core = { … }	检查以当前作用域为核心状态的任何国家/地区是否符合限定。对于其他效果/限定作用域类型，没有等效项。	1.12
all_state	始终可用	state	all_state = { … }	检查是否所有状态都满足限定。	1.0
any_state	始终可用	state	any_state = { … }	检查是否有任何状态满足限定。	1.0
all_neighbor_state	仅在状态作用域内	state	all_neighbor_state = { … }	检查与此作用域所在的状态相邻的所有状态是否都满足限定。	1.0
any_neighbor_state	仅在状态作用域内	state	any_neighbor_state = { … }	检查与此作用域所在的状态相邻的任何状态是否符合限定。	1.0
all_owned_state	仅在国家作用域内	state	all_owned_state = { … }	检查此作用域所在国家/地区拥有的所有state是否都符合限定。	1.0
any_owned_state	仅在国家作用域内	state	any_owned_state = { … }	检查此作用域所在国家/地区拥有的任何state是否满足限定。	1.0
all_core_state	仅在国家作用域内	state	all_core_state = { … }	检查此作用域所在国家/地区的核心状态是否符合限定。	1.11
any_core_state	仅在国家作用域内	state	any_core_state = { … }	检查此作用域所在国家/地区的核心状态是否都符合限定。	1.11
all_controlled_state	仅在国家作用域内	state	all_controlled_state = { … }	检查此作用域所在国家/地区控制的所有state是否都满足限定。	1.9
any_controlled_state	仅在国家作用域内	state	any_controlled_state = { … }	检查此作用域所在国家/地区控制的任何状态是否符合限定。	1.9
all_unit_leader	仅在国家作用域内	人物	all_unit_leader = { … }	检查此作用域所在国家/地区雇用的所有将领（陆军将领、元帅、海军上将）是否满足限定。	1.5
any_unit_leader	仅在国家作用域内	人物	any_unit_leader = { … }	检查此瞄准镜所在国家/地区雇用的任何将领（陆军将领、陆军元帅、海军上将）是否符合限定。	1.5
all_army_leader	仅在国家作用域内	人物	all_army_leader = { … }	检查此作用域所在国家/地区雇用的所有军队领导人是否满足限定。	1.5
any_army_leader	仅在国家作用域内	人物	any_army_leader = { … }	检查此作用域所在国家/地区雇用的任何军队领导人是否符合限定。	1.5
all_navy_leader	仅在国家作用域内	人物	all_navy_leader = { … }	检查此作用域所在国家/地区雇用的所有海军将领是否满足限定。	1.5
any_navy_leader	仅在国家作用域内	人物	any_navy_leader = { … }	检查此作用域所在国家/地区雇用的任何海军将领是否符合限定。	1.5
all_operative_leader	仅在国家/地区作用域内或业务作用域内	动作的	all_operative_leader = { … }	检查此作用域所在国家/地区雇用的所有特工是否满足限定。	1.9
any_operative_leader	仅在国家/地区作用域内或业务作用域内	动作的	any_operative_leader = { … }	检查此作用域所在国家/地区雇用的任何特工是否符合限定。	1.9
all_character	仅在国家作用域内	人物	all_character = { … }	检查此作用域所在国家/地区招募的所有字符是否都符合限定。	1.11
any_character	仅在国家作用域内	人物	any_character = { … }	检查此作用域所在国家/地区招募的任何角色是否满足限定。	1.11
any_country_division	仅在国家作用域内	划分	any_country_division = { … }	检查当前国家/地区拥有的任何部队是否符合限定。	1.12
any_state_division	仅在状态作用域内	划分	any_state_division = { … }	检查当前状态中的任何除法是否满足限定。	1.12
双作用域
以下作用域可用作效果作用域或限定作用域;有些还可以用作某些效果的右侧，并作为目标限定。如果可以用作目标，则会在表中标记它。

多个双作用域可能具有一个作用域，该作用域因使用位置而异，例如变量，可以设置为任何内容。

双作用域：
名字	用法	目标类型	例	描述	可用作目标	已添加版本
根	始终可用	取决于使用情况	
ENG = {
    FRA = {
        GER = {
            declare_war_on = {
                target = ROOT
                type = annex_everything
            }
        }
    }
} #GER declares war on ENG (if there is no scope before ENG)
以块的根节点或第一个输入的作用域为目标。这包括默认的假定作用域，因此，例如，国家重点中的 ROOT 将始终指执行重点的国家/地区。	✓	1.0
这	始终可用	取决于使用情况	
set_temp_variable = { target_country = THIS.id }
以使用它的当前作用域为目标。例如，在every_state中使用时，它将引用当前正在评估的状态。主要用于变量或内置本地化命令。除了这两种情况之外，几乎没有用法。	✓	1.0
昨日	始终可用	取决于使用情况	
FRA = {
    random_country = {
        GER = {
            declare_war_on = {
                target = PREV
                type = annex_everything
            }
        }
    }
} #Germany declares war on random_country
以当前作用域所包含的作用域为目标。可以具有假定的默认作用域与 ROOT 不同的其他应用程序，例如在状态事件或某些on_actions中。可以无限期地链接为 PREV.PREV。	✓	1.0
从	始终可用	取决于使用情况	
declare_war_on = {
    target = FROM
    type = annex_everything
}

FROM = {
    load_oob = defend_ourselves
}
可以无限期地链接为 FROM。用于面向各种硬编码作用域，通常用作与 ROOT 相反的特定辅助作用域。例如：
在事件中，这是指发送事件的国家/地区。
在有针对性的决议或外交脚本限定中，这是指有针对性的作用域。
✓	1.0
<TAG>	始终可用	国家作用域	SOV = { … }	由标签或标签别名定义的国家/地区。标签别名在 /Hearts of Iron IV/common/country_tag_aliases 中定义，作为除了实际标签之外指代特定国家（例如内战一方）的一种方式。	✓	1.0
霸王	仅在国家作用域内	国家作用域	overlord = { … }	国家的领主，如果它是一个臣民。如果现在的国家是独立的，什么也做不了。	X	1.3
faction_leader	仅在国家作用域内	国家作用域	faction_leader = { … }	该国所属阵营的阵营领导人。	X	1.10.1
<state_id>	始终可用	状态作用域	145 = { … }	此 id 定义的状态。	✓	1.0
所有者	仅在state或战斗员作用域内	国家作用域	owner = { … }	在state作用域内，拥有state的国家/地区。在战斗作用域内，拥有师的国家。	X	1.0
控制者	仅在状态作用域内	国家作用域	controller = { … }	当前状态的控制者。	X	1.0
capital_scope	仅在国家作用域内	状态作用域	capital_scope = { … }	当前国家/地区首都所在的state。	X	1.0
<角色>	始终可用	人物作用域作用域	ENG_theodore_makhno = { … }	在 1.12.8 之前的游戏版本中，角色必须已由其作用域所在的国家/地区招募。	✓	1.11
event_target：<event_target_key>	始终可用	取决于使用情况	event_target:my_event_target = { … }	保存的事件目标或全局事件目标（注意，冒号后没有空格）	✓	1.0
变量：<变量>	始终可用	取决于使用情况	var:my_variable = { … }
add_to_faction = my_variable或
add_to_faction = var:my_variable	设置为作用域的变量。
当用作目标而不是作用域时，在大多数情况下可以省略 。var:

✓	1.5

通用限定工具
主条目：状态#流控制工具
这些限定更像是一种在如何评估限定时建立联系的方法。每个都用作具有附加参数的限定作用域，并且无论作用域如何都可以使用。

通用限定工具：
名字	其他参数	例子	描述	笔记	已添加版本
和	没有	
AND = {
    original_tag = GER
    has_stability > 0.5
}
如果任何附加条件返回 false，则返回 false，否则返回 true。评估在第一个错误的附加条件处停止。	仅在 OR 语句和 NOT 语句中是必需的，因为其他所有内容都是隐式的 AND。	1.0
或	没有	
OR = {
    original_tag = ENG
    original_tag = USA
}
如果任何附加条件返回 true，则返回 true，否则返回 false。评估在第一个真正的附加条件处停止。		1.0
不	没有	
NOT = {
    has_stability > 0.5
    has_war_support > 0.5
}
如果任何附加条件返回 true，则返回 false，否则返回 true。评估在第一个真正的附加条件处停止。	等效于 NOR 而不是 NAND。	1.0
count_triggers	amount = <int>
需要满足的限定数量。	
count_triggers = {
    amount = 2
    10 = { state_population = 100000 }
    11 = { state_population = 100000 }
    12 = { state_population = 100000 }
}
对所有附加条件的结果求和（false=0，true=1），如果总和至少为 。amount		1.5
如果	limit = <trigger block>
else_if = <if-trigger>
替代条件。可选。

最后的替代条件。可选。else = <AND-trigger>

if = {
    limit = {
        has_dlc = "Poland: United and Ready"
    }
    has_political_power > 100
}
else_if = {
    limit = {
        has_dlc = "Waking the Tiger"
    }
    has_war_support > 0.5
}
else = {
    always = no
}
如果为 true，则像 AND 限定一样评估附加条件。如果为 false，则按顺序尝试块，最后（如果存在）。否则返回 true。limitlimitelse_ifelse	嵌套（如在内部）和非嵌套（如示例中）和存在。在重叠的情况下，最好使用非嵌套。if = { ... }elseelse_if
可用于自建提示管理：与效果相同，如果未达到限制，则不会显示任何内容。如果满足限制，则隐藏限制，而超出限制的条件将显示在自建提示中。

1.0
hidden_trigger	没有	
hidden_trigger = {
    country_exists = GER
}
隐藏向玩家显示的自建提示中的限定。	也用作 AND 语句。	1.0
custom_trigger_tooltip	tooltip = <string>
要使用的本地化密钥。	
custom_trigger_tooltip = {
    tooltip = sunrise_invasion_tt		
    any_state = {
        is_owned_by = JAP
        is_on_continent = europe
        is_coastal = yes
    }
}
隐藏向播放器显示的自建提示中的限定，而是使用指定的本地化键。	也用作 AND 语句。	1.0
任何作用域
这些限定不需要任何特定作用域。

一般
常规任意作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
总是	<bool>
bool。	
always = yes
始终返回 true 或 false。对调试很有用。		1.0
has_global_flag	<string>
要检查的旗标。	
has_global_flag = my_flag
检查是否已设置指定的旗标。		1.0
has_global_flag	flag = <string>
要检查的旗标。
value = <int>
要检查的旗标值。可选。

要检查的旗标创建日期。可选。

旗标存在的持续时间。可选。date = <date>days = <int>

has_global_flag = {
    flag = my_flag
    days > 30
    date > 1936.6.1
    value > 0
}
比较指定旗标的上次设置日期、自上次设置以来的天数AND\OR值。	如果未设置，则值比较为 。 限制在 -32768 和 32767 之间。>0value	1.0
has_dlc	<string>
要检查的 DLC 名称。	
has_dlc = "Waking the Tiger"
检查指定的 DLC 是否已启用。		1.0
has_start_date	<date>
要检查的日期。	
has_start_date > 1950.01.01
检查指定的日期是否是用于当前游戏的开始日期。	年.月.日
必须使用 > 或 < 运算符。

1.0
日期	<date>
要检查的日期。	
date < 1950.01.01
根据当前日期检查指定的日期是否。	年.月.日
必须使用 > 或 < 运算符。

1.0
困难	<int>
难度值。	
difficulty > 0
检查指定的难度是否与当前难度相对应。	必须使用 > 或 < 运算符。	1.0
has_any_custom_difficulty_setting	<bool>
bool。	
has_any_custom_difficulty_setting = yes
检查是否有任何自定义难度设置从其默认值更改。	在这种情况下，自定义难度是指/Hearts of Iron IV/common/difficulty_settings/*.txt，用于基础游戏以加强特定国家。	1.0
has_custom_difficulty_setting	<string>
要检查的设置。	
has_custom_difficulty_setting = custom_diff_strong_sov
检查指定的自定义难度设置是否从默认值更改。	在这种情况下，自定义难度是指/Hearts of Iron IV/common/difficulty_settings/*.txt，用于基础游戏以加强特定国家。	1.0
game_rules_allow_achievements	<bool>
bool。	
game_rules_allow_achievements = yes
检查是否所有活动游戏规则选项都允许成就。		1.9
country_exists	<scope> / <variable>
要检查的国家/地区。	
country_exists = GER
检查游戏中当前是否存在指定的国家/地区。		1.0
is_ironman	<bool>
bool。	
is_ironman = yes
检查当前游戏是否在铁人模式下运行。		1.0
is_historical_focus_on	<bool>
bool。	
is_historical_focus_on = yes
检查当前游戏是否在打开“历史国策”的情况下运行。		1.0
is_tutorial	<bool>
bool。	
is_tutorial = yes
检查当前游戏是否在教程模式下运行。		1.0
is_debug	<bool>
bool。	
is_debug = yes
检查游戏是否处于调试模式（使用 -debug 参数启动）。		1.9
威胁	<float>
要检查的数值。	
threat > 0.5
检查世界紧张度是否高于指定量。	必须使用 > 或 < 运算符。	1.0
has_game_rule	<string>
要检查的游戏规则。
<string> / <bool>
要检查的选项。
has_game_rule = { rule = GER_can_remilitarize_rhineland option = yes }
检查游戏规则是否设置为特定选项。		1.5
变量
变量相关限定：
名字	参数	例子	描述	笔记	已添加版本
has_variable	<variable>
要检查的变量。	
has_variable = my_var
检查当前作用域是否存在指定的变量。		1.5
check_variable	var = <variable>
要检查的变量。
value = <float> / <variable>
要检查的值。

比较的类型。可选，可以改用<或>。compare = <type>

check_variable = {
    var = my_var
    value = 10
    compare = greater_than_or_equals
}
check_variable = {
    my_var > 10
}
检查当前作用域的指定变量。	可能的比较类型：
less_than
less_than_or_equals
greater_than
greater_than_or_equals
equals
not_equals
1.5
请记住，变量需要引用它们设置的作用域。这意味着，如果不限定变量的作用域，则无法在state作用域内检查国家/地区变量。

例如，若要在state作用域内获取国家/地区变量，请执行以下操作：

<country> = {
    <state> = {
        limit = {
            check_variable = { from.my_country_var > 0.0 }
        }
    }
}
有关详细信息，请参阅变量。

调试
这些既可以用作效果也可以用作限定，并用于调试，玩家永远不会看到它们。

调试有用的限定：
名字	参数	例子	描述	笔记	已添加版本
.log	<string>
要记录的内容。支持动态本地化。
log = "Added [?temp_add] to [THIS.GetTag]'s variable [?THIS.varvalue]"
在评估限定时将条目追加到游戏中.log如果打开，则追加到控制台。	game.log 存储在用户目录中的 /Hearts of Iron IV/logs/ 中	1.5
print_variables	print_global = <bool>
打印全局变量。默认值为 。no
var_list = <list>
要打印的变量。默认为所有变量。
要记录到的文件路径。默认为“variable_dump”。不包括扩展名。
要前置的文本。默认为“无标头”。
是否追加到文件而不是覆盖。默认为file = <string>.logtext = <string>append = <bool>yes

print_variables = {
    var_list = { myvar1 myvar2 }
    file = "my_dump_file"
    text = "my header"
}
将指定的变量从当前作用域和全局作用域（可选）转储到具有指定名称的日志文件中。	日志将位于用户目录中的 /Hearts of Iron IV/logs/variable_dumps/ 中。另请参阅调试变量。	1.5
国家作用域
可用于国家/地区作用域。

一般
常规国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
存在	<bool>
bool。	
exists = yes
检查游戏中是否存在当前作用域。		1.0
标记	<scope> / <variable>
要检查的国家/地区。	
tag = GER
tag = var:my_country
检查当前作用域是否为指定的国家/地区。		1.0
original_tag	<scope> / <variable>
要检查的国家/地区。	
original_tag = GER
original_tag = var:my_country
检查当前作用域是否来自指定的国家/地区。	通过 start_civil_war 或 create_dynamic_country 源自指定国家/地区（与指定国家/地区本身一起）的动态国家/地区将具有此限定 true。	1.0
is_ai	<bool>
bool。	
is_ai = yes
检查当前作用域是否为 AI。		1.0
has_collaboration	target = <country>
要检查的国家/地区。
value <> <decimal>
协作在 0-1 作用域内的价值。

has_collaboration = {
    target = GER
    value > 0.5
}
检查当前作用域在目标作用域中是否具有合作度。	目标被当前作用域占用。必须在值参数中使用<或>。	1.9
has_country_flag	<string>
要检查的旗标。	
has_country_flag = my_flag
检查当前作用域是否具有指定的旗标。		1.0
has_country_flag	flag = <string>
要检查的旗标。
value = <int>
要检查的旗标值。可选。

要检查的旗标创建日期。可选。

旗标存在的持续时间。可选。date = <date>days = <int>

has_country_flag = {
    flag = my_flag
    days > 30
    date > 1936.6.1
    value > 0
}
比较指定旗标的上次设置日期、自上次设置以来的天数AND\OR值。	如果未设置，则值比较为 。 限制在 -32768 和 32767 之间。>0value	1.0
has_cosmetic_tag	<string>
要检查的外观标签。	
has_cosmetic_tag = SOV_custom
检查当前作用域是否具有活动的指定修饰标记。		1.5
has_event_target	<event target>
要检查的事件目标。	
has_event_target = my_var
检查是否将当前作用域指定为指定的事件目标。		1.0
has_decision	<string>
检查的决定。	
has_decision = my_decision
检查当前作用域是否激活了指定的决议。		1.5
has_dynamic_modifier	modifier = <string>
要检查dynamic_modifier。
scope = <scope>
要检查的国家/地区。可选，如果原始修正已作为目标。

has_dynamic_modifier = {
    modifier = my_dynamic_modifier
    scope = GER
}
检查当前作用域是否激活了指定的动态修正。		1.6
has_active_mission	<string>
检查任务。	
has_active_mission = my_mission
检查当前作用域是否具有指定的任务处于活动状态。		1.5
has_focus_tree	<string>
要检查的国策树。	
has_focus_tree = soviet_tree
检查当前作用域是否具有指定的国策树。		1.3
has_completed_focus	<string>
要检查的重点。	
has_completed_focus = my_focus
检查当前作用域是否已完成指定的国策。		1.0
focus_progress	focus = <string>
要检查的重点。
progress = <string>
要检查的进度。

focus_progress = {
    focus = my_focus
    progress > 0.5
}
检查当前作用域的指定国策是否已按指定百分比完成。	必须使用 > 或 < 运算符才能取得进展。	1.0
has_country_custom_difficulty_setting	<bool>
bool。	
has_country_custom_difficulty_setting = yes
检查以当前作用域为目标的任何自定义难度设置是否从默认值更改。	在这种情况下，自定义难度是指/Hearts of Iron IV/common/difficulty_settings/*.txt，用于基础游戏以加强特定国家。	1.0
has_terrain	<terrain>
地形。	
has_terrain = urban
检查当前作用域是否具有指定地形的任何小地块。	只能在国家/地区作用域内使用。	1.11
is_dynamic_country	<bool>
bool。	
is_dynamic_country = yes
检查当前作用域是否为动态国家/地区。	有活力的国家包括内战中产生的国家以及具有create_dynamic_country效应的国家，例如合作政府。	1.11
num_of_supply_nodes	<int>
要检查的数值。	
num_of_supply_nodes > 10
检查当前作用域是否控制了指定数量的供应节点。	只能使用<或>运算符。	1.11
has_completed_custom_achievement	mod = <mod ID>
成就来自的模组。
achievement = <achievement ID>
成就的名称。

has_completed_custom_achievement = {
    mod = my_mod_unique_id
    achievement = my_achievement_token
}
检查控制当前作用域的玩家是否已完成指定的自定义成就。	成就（包括它来自的模组的 ID）在 /Hearts of Iron IV/common/achievements/*.txt 文件中定义[1]。这项成就可以在前一届会议期间完成，而不一定是本届会议。
如果未加载定义成就的模组，则限定的计算结果为 false。

1.12.5
政治
政治国家作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
has_political_power	<float>
要检查的数值。	
has_political_power > 100
检查当前作用域是否具有指定的政治点量。	必须使用 > 或 < 运算符。	1.0
political_power_daily	<float> / <variable>
要检查的数值。	
political_power_daily > 1
检查当前作用域是否具有指定的每日政治点增益量。	必须使用 > 或 < 运算符。	1.5
political_power_growth	<float> / <variable>
要检查的数值。	
political_power_growth > 1
检查当前作用域是否具有指定的每日政治点增益量。	必须使用 > 或 < 运算符。	1.5
command_power	<float> / <variable>
要检查的数值。	
command_power > 1
检查当前作用域是否具有指定的命令力量。	必须使用 > 或 < 运算符。	1.5
command_power_daily	<float> / <variable>
要检查的数值。	
command_power_daily > 1
检查当前作用域是否具有指定的每日命令力量增益。	必须使用 > 或 < 运算符。	1.5
has_war_support	<float> / <variable>
要检查的数值。	
has_war_support > 0.5
检查当前作用域是否具有指定百分比的战争支持。	必须使用 > 或 < 运算符。	1.5
has_stability	<float> / <variable>
要检查的数值。	
has_stability > 0.5
检查当前作用域是否具有指定的稳定性百分比。	必须使用 > 或 < 运算符。	1.5
<意识形态>	<ideology> = <float> / <variable>
要检查的意识形态的数量。	
fascism > 0.5
democratic > party_popularity@communism
检查当前作用域是否具有高于指定数量的指定意识形态。		1.0
has_government	<ideology>
要检查的意识形态组。
或

要比较的国家/地区。<country>

has_government = fascism
has_government = ROOT
检查当前作用域的执政党是否符合指定意识形态团体或与指定国家具有相同意识形态团体的要求。		1.0
has_elections	<bool>
bool。	
has_elections = yes
检查当前作用域是否举行选举。		1.0
is_staging_coup	<bool>
bool。	
is_staging_coup = yes
检查当前作用域是否正在发动政变。		1.3
is_target_of_coup	<bool>
bool。	
is_target_of_coup = yes
检查当前作用域是否是政变的目标。		1.0
has_civil_war	<bool>
bool。	
has_civil_war = yes
检查当前作用域是否处于活动状态的内战。		1.0
civilwar_target	<scope>
目标国家/地区。	
civilwar_target = GER
检查指定的国家/地区是否是内战的目标。		1.0
has_manpower_for_recruit_change_to	value = <float>
要检查的数值。
group = <group>
要检查的组。

has_manpower_for_recruit_change_to = {
    value > 0.05
    group = mobilization_laws
}
检查当前作用域是否具有指定的人力来更改指定的idea组。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.0
has_rule	<string>
要检查的规则。	
has_rule = can_create_factions
检查当前作用域是否具有指定的国家/地区规则。		1.6
has_casualties_war_support	<float> / <variable>
要检查的数值。	
has_casualties_war_support < 0
检查当前作用域是否具有指定百分比的战争支持来自自己的战斗伤亡。	必须使用 > 或 < 运算符。	1.12
has_convoys_war_support	<float> / <variable>
要检查的数值。	
has_convoys_war_support < 0
检查当前作用域是否具有来自自己车队的指定百分比的战争支援沉没。	必须使用 > 或 < 运算符。	1.12
has_bombing_war_support	<float> / <variable>
要检查的数值。	
has_bombing_war_support < 0
检查当前作用域是否具有来自被敌人轰炸的本国的指定百分比的战争支持。	必须使用 > 或 < 运算符。	1.12
权力平衡
权力平衡（BOP）存储在/Hearts of Iron IV/common/bop/*.txt文件中。

与权力相关的国家作用域触发因素的平衡：
名字	参数	例子	描述	笔记	已添加版本
has_power_balance	id = <bop ID>
要检查的余额。	
has_power_balance = {
    id = TAG_my_bop
}
检查当前状态是否具有指定的权力平衡处于活动状态。		1.12
has_any_power_balance	<bool>
bool。	
has_any_power_balance = yes
检查当前状态是否有任何权力平衡处于活动状态。		1.12
power_balance_value	id = <bop ID>
要签到的余额。
value = <float>
要检查的值。

power_balance_value = {
    id = TAG_my_bop
    value > 0.7
}
检查当前作用域是否在权力平衡中具有指定的值。	允许使用 =、> 或 < 运算符。	1.12
power_balance_daily_change	id = <bop ID>
要签到的余额。
value = <float>
要检查的值。

power_balance_daily_change = {
    id = TAG_my_bop
    value < -0.01
}
检查当前作用域的权力平衡是否每天按指定值变化。	允许使用 =、> 或 < 运算符。	1.12
power_balance_weekly_change	id = <bop ID>
要签到的余额。
value = <float>
要检查的值。

power_balance_weekly_change = {
    id = TAG_my_bop
    value < -0.01
}
检查当前作用域的权力平衡是否每周按指定值变化。	允许使用 =、> 或 < 运算符。	1.12
is_power_balance_in_range	id = <bop ID>
要签到的余额。
range = <range ID>
要检查的作用域。

is_power_balance_in_range = {
    id = TAG_my_bop
    range > TAG_my_bop_right_range
}
检查当前状态的力量值平衡是否在指定作用域内。	作用域是在权力平衡内定义的。可以使用 =、> 和 < 运算符。在>或<的情况下，比较是“严格的”，即排除作用域本身。	1.12
is_power_balance_side_active	id = <bop ID>
要签到的余额。
side = <side ID>
要检查的一面。

is_power_balance_side_active = {
    id = TAG_my_bop
    side = TAG_my_bop_right_range
}
检查当前状态的力量值平衡是否使一侧处于活动状态。	双方是在权力平衡（BOP）中定义的。	1.12
has_power_balance_modifier	id = <bop ID>
要签到的余额。
modifier = <modifier ID>
静态修正。

has_power_balance_modifier = {
    id = TAG_my_bop
    modifier = TAG_my_bop_modifier
}
检查当前作用域的力量值平衡是否激活修正。	BoP 修正在 /Hearts of Iron IV/common/modifiers/*.txt 文件中定义，而它们在权力平衡定义中激活。	1.12
建筑物
与建筑相关的国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本

<建筑>	<building> = <int>
要检查的指定建筑物的数量。	
arms_factory > 10

检查当前作用域是否具有指定建筑物的指定数量。	必须使用 > 或 < 运算符。	1.0
num_of_military_factories	<int>
要检查的数值。	
num_of_military_factories > 10
检查当前作用域是否具有指定数量的军工厂。	必须使用 > 或 < 运算符。	1.0
num_of_civilian_factories	<int>
要检查的数值。	
num_of_civilian_factories > 10
检查当前作用域是否具有指定数量的民用工厂。	必须使用 > 或 < 运算符。	1.0
num_of_naval_factories	<int>
要检查的数值。	
num_of_naval_factories > 10
检查当前作用域是否具有指定的船坞数量。	必须使用 > 或 < 运算符。	1.0
num_of_available_military_factories	<int>
要检查的数值。	
num_of_available_military_factories > 10
检查当前作用域是否具有指定数量的可用军工厂。	必须使用 > 或 < 运算符。	1.0
num_of_available_civilian_factories	<int>
要检查的数值。	
num_of_available_civilian_factories > 10
检查当前作用域是否具有指定数量的可用民用工厂。	必须使用 > 或 < 运算符。	1.0
num_of_available_naval_factories	<int>
要检查的数值。	
num_of_available_naval_factories > 10
检查当前作用域是否具有指定数量的可用船坞。	必须使用 > 或 < 运算符。	1.0
num_of_factories	<int>
要检查的数值。	
num_of_factories > 10
检查当前作用域是否具有指定数量的军用、民用或造船厂工厂。	必须使用 > 或 < 运算符。	1.0
num_of_controlled_factories	<int>
要检查的数值。	
num_of_controlled_factories > 10
检查当前作用域是否控制了指定数量的军用、民用或造船厂工厂。	必须使用 > 或 < 运算符。	1.11
num_of_owned_factories	<int>
要检查的数值。	
num_of_owned_factories > 10
检查当前作用域是否具有指定数量的军事、民用或船坞工厂。	必须使用 > 或 < 运算符。	1.11
num_of_civilian_factories_available_for_projects	<int>
要检查的数值。	
num_of_civilian_factories_available_for_projects > 10
检查当前作用域是否具有可用于项目的指定数量的民用工厂。	必须使用 > 或 < 运算符。	1.5
ic_ratio	tag = <scope>
要检查的国家/地区。
ratio = <float>
要检查的比率。

ic_ratio = {
    tag = GER
    ratio > 0.5
}
检查当前作用域是否具有指定的工厂与目标国家/地区的比例。	必须使用 > 或 < 运算符作为比率。	1.0
has_damaged_buildings	<bool>
bool。	
has_damaged_buildings = yes
检查当前作用域在其状态中是否有任何受阻建筑物。		1.0
has_built	type = <building>
要检查的建筑物。
value = <int>
要检查的数值。

has_built = {
    type = arms_factory
    value > 10
}
检查当前作用域是否已生成指定的建筑物指定的次数。	必须使用 > 或 < 运算符来获取值。	1.0
科技
与科技相关的国家作用域的触发因素：
名字	参数	例子	描述	笔记	已添加版本
has_tech	<string>
要检查的科技。	
has_tech = my_technology
检查当前作用域是否具有指定的科技。		1.0
is_researching_technology	<string>
要检查的科技。	
is_researching_technology = my_tech
检查当前作用域当前是否正在研究指定的科技。		1.0
can_research	<string>
要检查的科技。	
can_research = my_tech
检查当前作用域是否可以开始研究指定的科技。		1.0
original_research_slots	<int>
要检查的数值。	
original_research_slots > 3
检查当前作用域在游戏开始时是否具有指定的插槽数量。	必须使用 > 或 < 运算符。	1.0
amount_research_slots	<int>
要检查的数值。	
amount_research_slots > 3
检查当前作用域是否具有指定数量的研究槽。	必须使用 > 或 < 运算符。	1.3
is_in_tech_sharing_group	<string>
要检查的组。	
is_in_tech_sharing_group = us_research
检查当前作用域是否在指定的科技共享组中。		1.3
num_tech_sharing_groups	<int>
要检查的数值。	
num_tech_sharing_groups > 3
检查当前作用域是否在指定数量的科技共享组中。	必须使用 > 或 < 运算符。	1.3
has_tech_bonus	technology = <string>
要检查的科技。可选。
category = <string>
要检查的类别。可选。
has_tech_bonus = {
    technology = my_tech
has_tech_bonus = {
    category = my_category
}
检查当前作用域是否具有指定类别或特定科技的科技加成。		1.3
land_doctrine_level	<int>
要检查的数值。	
land_doctrine_level > 2
检查当前作用域是否具有指定数量的土地理论科技。	必须使用 > 或 < 运算符。	1.0
num_researched_technologies	<int>
要检查的数值。	
num_researched_technologies > 10
检查目标研究了多少科技。	必须使用 > 或 < 运算符。	1.3
idea
与创意相关的国家作用域触发因素：
名字	参数	例子	描述	笔记	已添加版本
has_idea	<string>
要检查的idea。	
has_idea = my_idea
检查当前作用域是否具有指定的idea。	
has_idea_with_trait	<string>
要检查的特质。	
has_idea_with_trait = my_trait
检查当前作用域是否具有具有指定特质的任何idea。		1.0
has_allowed_idea_with_traits	idea = <string>
要检查的特质。
limit = <int>
要检查的数值。

如果设置，将仅在字符上运行此操作。

如果设置，则忽略里面的idea。可选。characters = <bool>ignore = { <ideas> }
has_available_idea_with_traits = {
    idea = my_trait
    limit = 1
    ignore = { generic_head_of_intelligence }
}
检查当前作用域是否具有具有指定特质的指定数量的idea。	忽略 = idea_name适用于 1 个idea。	1.9.1
has_available_idea_with_traits	idea = <string>
要检查的特质。
limit = <int>
要检查的数值。

如果设置，将仅在字符上运行此操作。

如果设置，则忽略里面的idea。可选。characters = <bool>ignore = { <ideas> }
has_available_idea_with_traits = {
    idea = my_trait
    limit = 1
    ignore = { generic_head_of_intelligence }
}
检查当前作用域是否具有具有指定特质的指定数量的idea。	忽略 = idea_name适用于 1 个idea。	1.0
amount_taken_ideas	amount = <int>
要检查的数值。
slots = { <string> }
插槽类型。

amount_taken_ideas = {
    amount > 3
    slots = {
        political_advisor
    }
}
检查当前作用域是否具有指定槽类型的指定数量的idea。排除精神、隐藏的idea和法律。	插槽类型可在 /Hearts of Iron IV/common/idea_tags/*.txt 中找到。	1.4
外交
外交国家作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
is_major	<bool>
bool。	
is_major = yes
检查当前作用域是否被视为主要作用域。		1.0
is_ally_with	<scope> / <variable>
要检查的国家/地区。	
is_ally_with = GER
is_ally_with = var:country
检查当前作用域是否为盟友（阵营成员或附庸政权主关系）。		1.0
is_in_faction_with	<scope> / <variable>
要检查的国家/地区。	
is_in_faction_with = GER
is_in_faction_with = var:country
检查当前作用域是否位于具有指定国家/地区的阵营中。		1.0
is_in_faction	<bool>
bool。	
is_in_faction = yes
检查当前作用域是否在阵营中。		1.0
is_faction_leader	<bool>
bool。	
is_faction_leader = yes
检查当前作用域是否为阵营的领导者。		1.0
is_spymaster	<bool>
bool。	
is_spymaster = yes
检查当前作用域是否是阵营的间谍主管。		1.9
num_faction_members	<int>
要检查的数值。	
num_faction_members > 1
检查当前作用域的阵营是否具有指定数量的成员。	必须使用 > 或 < 运算符。	1.0
has_non_aggression_pact_with	<scope> / <variable>
要检查的国家/地区。	
has_non_aggression_pact_with = GER
检查当前作用域是否与指定国家/地区签订了互不侵犯条约。		1.0
is_guaranteed_by	<scope> / <variable>
要检查的国家/地区。	
is_guaranteed_by = GER
检查当前作用域是否已由指定国家/地区保证。		1.0
has_guaranteed	<scope> / <variable>
要检查的国家/地区。	
has_guaranteed = GER
检查当前作用域是否保证了指定的国家/地区。		1.0
has_military_access_to	<scope> / <variable>
要检查的国家/地区。	
has_military_access_to = GER
检查当前作用域是否具有对指定国家/地区的军事访问权限。		1.0
gives_military_access_to	<scope> / <variable>
要检查的国家/地区。	
gives_military_access_to = GER
检查当前作用域是否向指定国家/地区提供军事。		1.0
is_neighbor_of	<scope> / <variable>
要检查的国家/地区。	
is_neighbor_of = GER
检查当前作用域是否为指定国家/地区的邻居。		1.0
is_owner_neighbor_of	<scope> / <variable>
要检查的国家/地区。	
is_owner_neighbor_of = GER
检查当前作用域是否是指定国家/地区及其核心领土的邻居。		1.0
is_puppet_of	<scope> / <variable>
要检查的国家/地区。	
is_puppet_of = GER
检查当前作用域是否为指定国家/地区的傀儡。	“傀儡”是一种自治状态，在其定义中具有/Hearts of Iron IV/common/autonomous_states/。对于任何附庸政权类型，请参阅is_subject_of。is_puppet = yes	1.0
is_subject_of	<scope> / <variable>
要检查的国家/地区。	
is_subject_of = GER
检查当前作用域是否为指定作用域的附庸政权。		1.0
is_puppet	<bool>
bool。	
is_puppet = yes
如果当前国家/地区是傀儡，则返回 true。	“傀儡”是一种自治状态，在其定义中具有/Hearts of Iron IV/common/autonomous_states/。对于任何附庸政权类型，请参阅is_subject。is_puppet = yes	1.0
is_subject	<bool>
bool。	
is_subject = yes
检查当前作用域是否为附庸政权。		1.0
has_subject	<bool>
bool。	
has_subject = GRE
检查国家/地区是否具有给定国家/地区。		1.0
num_subjects	<int>
要检查的数值。	
num_subjects > 3
检查当前作用域是否具有指定数量的使用者。	必须使用 > 或 < 运算符。	1.3
has_autonomy_state	<string>
要检查的自治状态。	
has_autonomy_state = autonomy_dominion
检查当前作用域是否处于指定的自治状态。		1.0
compare_autonomy_state	<string>
要检查的自治状态。	
compare_autonomy_state > autonomy_dominion
检查当前作用域的自治状态是小于还是大于指定的自治状态。特殊值“autonomy_free”比任何自治状态都大。如果当前作用域不是附庸，则将其视为大于任何自治状态（包括“autonomy_free”）。使用 ，检查当前作用域是否处于指定的自治状态。min_freedom_level=	1.0
compare_autonomy_progress_ratio	<float>
要检查的数值。	
compare_autonomy_progress_ratio > 0.5
检查当前作用域自治进度是否处于指定比率。如果当前作用域不是附庸政权，则比率为 1。	1.3
has_opinion_modifier	<string>
要检查的外交修正。	
has_opinion_modifier = my_modifier
检查当前作用域是否具有指定的外交修正。		1.0
has_opinion	target = <scope>
要检查的国家/地区。
value = <float>
要检查的数值。

has_opinion = {
    target = GER
    value > 50
}
检查当前作用域是否与指定国家/地区具有指定的意见。	必须使用 > 或 < 运算符。	1.0
has_relation_modifier	target = <scope>
要检查的国家/地区。
modifier = <modifier>
要检查的修正。

has_relation_modifier = {
    target = GER
    modifier = my_modifier
}
检查当前作用域是否具有与指定国家/地区的指定关系修正。		1.0
has_legitimacy	<int>
要检查的数值。	
has_legitimacy > 50
检查现任流亡政府的合法性。	必须使用 > 或 < 运算符。合法性作用域从 0 到 100。	1.6
is_exile_host	<bool>
bool。	
is_exile_host = yes
检查当前国家/地区是否正在收容流亡者。		1.6
is_hosting_exile	<tag>
国家。	
is_hosting_exile = POL
检查当前国家/地区是否正在接待特定的流亡者。		1.6
is_government_in_exile	<bool>
bool。	
is_government_in_exile = yes
检查当前国家/地区是否流亡到其他国家/地区。		1.6
is_exiled_in	<tag>
被流放的国家。	
is_exiled_in = POL
检查当前国家/地区是否流亡到特定国家/地区。		1.6
received_expeditionary_forces	sender = <tag>
派遣军队的国家。
value <> <int>
力的大小。

received_expeditionary_forces = {
    sender = POL
    value > 10
}
检查当前国家/地区是否从指定国家/地区接收了 X 个单位。		1.6
can_declare_war_on	<tag>
要检查的国家/地区。	
can_declare_war_on = POL
检查当前作用域是否能够对指定国家/地区宣战。		1.9
foreign_manpower	<int>
要检查的数值。	
foreign_manpower > 10000
检查我们收到了多少外国劳动力进行驻军。	必须使用 > 或 < 运算符。	1.9
is_embargoed_by	<scope>
要检查的数值。	
is_embargoed_by = USA
检查当前作用域是否被指定国家/地区禁运。		1.12
is_embargoing	<scope>
要检查的数值。	
is_embargoing = CUB
检查当前作用域是否禁止指定国家/地区。		1.12
战争
与战争有关的国家作用域触发因素：
名字	参数	例子	描述	笔记	已添加版本
has_war	<bool>
bool。	
has_war = yes
检查当前作用域是否处于战争状态。		1.0
has_war_with	<scope> / <variable>
要检查的国家/地区。	
has_war_with = GER
has_war_with = var:country
检查当前作用域是否与指定国家/地区交战。		1.0
has_offensive_war_with	<scope> / <variable>
要检查的国家/地区。	
has_offensive_war_with = GER
检查当前作用域是否处于针对指定国家/地区的攻击性战争中。		1.0
has_defensive_war_with	<scope> / <variable>
要检查的国家/地区。	
has_defensive_war_with = GER
检查当前作用域是否处于针对指定国家/地区的防御战中。		1.0
has_offensive_war	<bool>
bool。	
has_offensive_war = yes
检查当前作用域是否处于攻击性战争中。		1.0
has_defensive_war	<bool>
bool。	
has_defensive_war = yes
检查当前作用域是否处于防御战中。		1.0
has_war_together_with	<scope> / <variable>
要检查的国家/地区。	
has_war_together_with = GER
检查当前作用域是否与指定国家/地区处于战争状态。		1.0
has_war_with_major	<bool>
bool。	
has_war_with_major = yes
检查当前作用域是否与被视为主要的任何其他国家/地区交战。		1.12
has_war_with_wargoal_against	target = <scope> / <variable>
要检查的国家/地区。
type = <wargoal>
要检查的战争目标。可选。

has_war_with_wargoal_against = {
    target = ENG
    type = independence_wargoal
}
检查当前作用域是否与指定国家/地区处于战争状态，并且指定的战争目标处于活动状态。	战争目标存储在/Hearts of Iron IV/common/wargoals/*.txt文件中。如果未指定战争目标，则检查是否有任何战争目标。加入盟友的战争不算作战争目标。	1.12
surrender_progress	<float> / <variable>
要检查的数值。	
surrender_progress > 0.1
检查当前作用域是否具有指定的投降倾向。	必须使用 > 或 < 运算符。	1.0
any_war_score	<float>
要检查的数值。	
any_war_score > 10
检查当前作用域在任何战争中是否具有指定的战争进度（不是战争参与）[2]。	必须使用 > 或 < 运算符。	1.0
has_capitulated	<bool>
bool。	
has_capitulated = yes
检查当前作用域是否已投降。		1.0
days_since_capitulated	<int>
天数。	
days_since_capitulated > 10
检查自目标上次投降以来的天数。	如果目标从未投降，天数非常大。建议与has_capitulated混合使用。	1.9
has_border_war_with	<scope> / <variable>
要检查的国家/地区。	
has_border_war_with = GER
检查当前作用域是否与指定国家/地区存在边界战争。		1.5
has_border_war_between	attacker = <scope> / <variable>
要检查的状态。
defender = <scope> / <variable>
要检查的状态。

has_border_war_between = {
    attacker = 1
    defender = 2
}
检查两个指定state之间是否存在边界战争。		1.5
has_border_war	<bool>
bool。	
has_border_war = yes
检查当前作用域是否激活了边界战争。		1.5
has_added_tension_amount	<float> / <variable>
要检查的数值。	
has_added_tension_amount > 10
检查当前作用域是否导致了指定的世界紧张度量。	必须使用 > 或 < 运算符。	1.0
has_wargoal_against	<scope> / <variable>
要检查的国家/地区。	
has_wargoal_against = GER
检查当前作用域是否对指定国家/地区有任何战争目标。		1.0
has_wargoal_against	target = <scope> / <variable>
要检查的国家/地区。
type = <string>
要检查的战争目标的类型。

has_wargoal_against = {
    target = FROM
    type = take_state
}
检查当前作用域是否具有针对指定国家/地区的特定战争目标类型。		1.8
is_justifying_wargoal_against	<scope> / <variable>
要检查的国家/地区。	
is_justifying_wargoal_against = GER
检查当前作用域是否证明针对指定国家的战争目标是合理的。		1.0
has_annex_war_goal	<scope> / <variable>
要检查的国家/地区。	
has_annex_war_goal = GER
检查当前作用域是否具有针对指定国家的附件战争目标。		1.0
any_claim	<bool>
bool。	
any_claim = yes
检查当前作用域是否对另一个国家/地区有任何宣称。		1.0
is_in_peace_conference	<bool>
bool。	
is_in_peace_conference = yes
检查当前作用域是否在和平会议中。	请在游戏中测试1.12。	1.0
controls_province	<id>
要检查的小地块。	
controls_province = 1239
检查当前作用域是否控制了指定的小地块。		1.9
状态
这些是国家/地区作用域内与状态相关的限定，而不是状态作用域的限定。

与国家/地区相关的国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
controls_state	<scope> / <variable>
要检查的状态。	
controls_state = 39
controls_state = var:state
检查当前作用域是否具有对指定状态的控制。		1.0
owns_state	<scope> / <variable>
要检查的状态。	
owns_state = 39
检查当前作用域是否拥有指定的状态。		1.0
num_of_controlled_states	<int>
要检查的数值。	
num_of_controlled_states > 5
检查当前作用域是否具有指定数量的受控状态。	必须使用 > 或 < 运算符。	1.0
num_occupied_states	<int>
要检查的数值。	
num_occupied_states > 5
检查当前作用域是否具有指定的占用状态数。	必须使用 > 或 < 运算符。	1.0
has_full_control_of_state	<scope> / <variable>
要检查的状态。	
has_full_control_of_state = 39
检查当前作用域是否完全控制（100% 占用）指定状态。		1.3
core_compliance	occupied_country_tag = <TAG>
要检查其合规性的国家/地区。
value = <int>
要检查的值。
core_compliance = {
    occupied_country_tag = ITA
    value > 10
}
比较指定国家/地区的核心状态在当前作用域的受控状态内的平均合规性。	必须使用 > 或 < 运算符来获取值。	1.9
core_resistance	occupied_country_tag = <TAG>
检查抵抗力量的国家/地区。
value = <int>
要检查的值。
core_resistance = {
    occupied_country_tag = ITA
    value > 10
}
比较指定国家/地区核心状态在当前作用域的受控状态下的平均抵抗力量。	必须使用 > 或 < 运算符来获取值。	1.9
garrison_manpower_need	<int>
要检查的数值。	
garrison_manpower_need > 10000
检查我们在受控状态下抵抗需要多少驻军人力。	必须使用 > 或 < 运算符。	1.9
has_core_occupation_modifier	occupied_country_tag = <scope> / <variable>
要检查的国家/地区。
modifier = <token>要检查的修正。

has_core_occupation_modifier = { occupied_country_tag = ITA modifier = token }
检查当前作用域是否具有适用于指定国家/地区的占领状态的抵抗/合规性的占领修正符。		1.9
occupation_law	<law ID>
要检查的法律。	
POL = { POL = { occupation_law = brutally_oppressive_occupation } }   # Checks POL's default occupation law
HOL = { BEL = { occupation_law = foreign_civilian_oversight } }  # Checks HOL's occupation law over BEL
检查默认或适用于特定国家/地区的特工法。	检查 PREV 对当前国家的占领法案。如果它们的作用域相同，请检查默认特工法。	1.12
军事
与军事相关的国家作用域的触发因素：
名字	参数	例子	描述	笔记	已添加版本
has_army_experience	<float> / <variable>
要检查的数值。	
has_army_experience > 10
has_army_experience > var:number
检查当前作用域是否具有指定的陆军经验量。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.3
has_air_experience	<float> / <variable>
要检查的数值。	
has_air_experience > 10
检查当前作用域是否具有指定的空中经验量。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.3
has_navy_experience	<float> / <variable>
要检查的数值。	
has_navy_experience < 10
检查当前瞄准镜是否具有指定的海军经验量。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.3
has_manpower	<float> / <variable>
要检查的数值。	
has_manpower > 1000
检查当前作用域是否具有指定的人力。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.0
has_army_manpower	size = <int>
要检查的数值。	
has_army_manpower = {
    size > 1000
}
检查当前作用域是否有使用指定人力的军队。	必须使用 > 或 < 运算符。	1.0
manpower_per_military_factory	<float>
要检查的数值。	
manpower_per_military_factory > 1000
检查当前作用域是否具有指定的人力乘以其军工厂数量。	必须使用 > 或 < 运算符。	1.0
conscription_ratio	<float> / <variable>
要比较的比率。	
conscription_ratio < 0.2
检查当前作用域当前是否具有指定的征兵率，不要与目标征兵率混淆。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.9
current_conscription_amount	<float> / <variable>
要比较的数量。	
current_conscription_amount > 2000
检查当前作用域是否已经征召了那么多人力。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.9
target_conscription_amount	<float> / <variable>
要比较的数量。	
target_conscription_amount > 2000
检查当前作用域是否旨在征召那么多人力。	必须使用 > 或 < 运算符，因为 = 运算符检查确切的值	1.9
num_divisions	<int>
要检查的数值。	
num_divisions > 5
检查当前作用域是否具有指定的部队数。	必须使用 > 或 < 运算符。	1.3
num_of_nukes	<int>
要检查的数值。	
num_of_nukes > 5
检查当前状态是否具有指定数量的核武器。	必须使用 > 或 < 运算符。	1.0
伤亡	<int>
要检查的数值。	
casualties > 10000
检查当前作用域是否遭受了指定数量的伤亡。	必须使用 > 或 < 运算符。	1.0
casualties_k	<int>
要检查的数值。	
casualties_k > 10
检查当前作用域是否遭受了指定数量的数千人伤亡。	必须使用 > 或 < 运算符。	1.0
casualties_inflicted_by	opponent = <tag>
造成伤亡的标签。
thousands <> <int>
伤亡人数以千计。

casualties_inflicted_by = {
    opponent = POL
    thousands > 10
}
检查当前作用域是否遭受了来自特定国家/地区的数千人伤亡。	必须使用数千>或<运算符。	1.6
amount_manpower_in_deployment_queue	<float>
要检查的数值。	
amount_manpower_in_deployment_queue > 1000
检查当前作用域的部署队列中是否具有指定的人力。	必须使用 > 或 < 运算符。	1.5
has_attache_from	<scope> / <variable>
要检查的国家/地区。	
has_attache_from = GER
检查当前作用域是否具有指定作用域的附件。		1.5
has_attache	<bool>
bool。	
has_attache = yes
检查当前作用域是否有附件。		1.5
is_lend_leasing	<scope> / <variable>
要检查的国家/地区。	
is_lend_leasing = GER
检查当前作用域是否是向指定作用域借租。		1.0
has_template	<string>
编制的名称。	
has_template = "Infantry Division"
检查当前作用域是否具有指定名称的划分编制。		1.0
has_template_majority_unit	<string>
要检查的装备。	
has_template_majority_unit = infantry
检查当前作用域是否具有主要由指定单位组成的划分编制。		1.0
has_template_containing_unit	<string>
装备的名称。	
has_template_containing_unit = light_armor
检查当前作用域是否具有包含任何指定单位的分部编制。		1.0
strength_ratio	tag = <scope>
要检查的国家/地区。
ratio <> <float>
要检查的比率。

strength_ratio = {
    tag = GER
    ratio > 1
}
检查当前作用域是否具有指定国家/地区的指定强度比。该比率是当前作用域的已部署师数除以（如果没有师，则为 1）。如果目前的瞄准镜拥有更强大的空军，则该比例会增加 10%。[3]tagtag	必须在比率中使用>或<。	1.0
naval_strength_ratio	tag = <scope>
要检查的国家/地区。
ratio <> <float>
要检查的比率。

naval_strength_ratio = {
    tag = GER
    ratio <> 1
}
检查当前瞄准镜是否具有指定的海军力量与指定国家/地区的比例。	必须在比率中使用>或<。	1.0
naval_strength_comparison	other = <scope>
要检查的国家/地区。
tooltip = <string>
要检查的比率。可选。

要检查的比率。
要分配给每个单位的重量。可选。ratio <> <float>sub_unit_def_weights = { ... }

naval_strength_comparison = {
    other = POL
    tooltip = my_loc_key_tt
    ratio > 1
    sub_unit_def_weights = {
        carrier = 1
        submarine = 2
    }
}
检查当前瞄准镜是否具有指定的海军力量与指定国家/地区的比例。	必须在比率中使用>或<。如果未设置sub_unit_def_weights，则假定每个单位具有 1 个权重。如果设置了sub_unit_def_weights，则只有指定的单位将计入强度。单位在 /Hearts of Iron IV/common/units/*.txt 中定义。	1.6
alliance_strength_ratio	<float> / <variable>
要检查的比率。	
alliance_strength_ratio > 0.5
检查当前作用域和盟友的军队兵力是否高于指定与估计敌方兵力的比率。	必须使用 > 或 < 运算符。	1.0
alliance_naval_strength_ratio	<float> / <variable>
要检查的比率。	
alliance_naval_strength_ratio > 0.5
检查当前作用域和盟友的海军实力比率是否高于指定与估计敌人实力的比率。	必须使用 > 或 < 运算符。	1.0
enemies_strength_ratio	<float> / <variable>
要检查的比率。	
enemies_strength_ratio > 0.5
检查估计的敌军兵力比例是否高于指定比例。	必须使用 > 或 < 运算符。	1.0
enemies_naval_strength_ratio	<float> / <variable>
要检查的比率。	
enemies_naval_strength_ratio > 0.5
检查估计的敌方海军兵力比率是否高于指定比率。	必须使用 > 或 < 运算符。	1.0
has_army_size	size = <float>
要检查的数值。
type = <string>
要检查的营类型。该类型中由营组成的大多数师计数。可选，默认情况下计算所有部队。
has_army_size = {
    size > 10
    type = armor
}
检查当前作用域是否具有指定数量的部队或指定类型的部队。	营类型在 /铁之心 IV/普通/单位/*.txt 文件中定义。必须使用 > 或 < 运算符来表示大小。	1.0
has_navy_size	size = <float>/<variable>
要检查的数值。
type = <string>
要检查的类型。可选。

要检查的飞船原型。可选。archetype = <string>
has_navy_size = {
    size > 10
    type = capital_ship
    archetype = ship_hull_heavy
}
检查当前作用域是否具有指定数量的船舶或指定类型的船舶。	船型在 /Hearts of Iron IV/common/units/*.txt 文件中定义。必须使用 > 或 < 运算符来表示大小。飞船原型可在/Hearts of Iron IV/common/units/equipment/*.txt files中找到。	1.0
has_deployed_air_force_size	size = <float>
要检查的数值。
type = <string>
要检查的类型。可选。
has_deployed_air_force_size = {
    size > 10
    type = cas
}
检查当前作用域是否具有指定数量的飞机或指定类型的飞机。	Airwing类型在/Hearts of Iron IV/common/units/*.txt文件中定义。必须使用 > 或 < 运算符来表示大小。	1.0
divisions_in_state	size = <float>
要检查的数值。
type = <string>
要检查的营类型。该类型中由营组成的大多数师计数。可选，默认情况下计算所有部队。

要检查的确切营。由该营组成的大多数师计算在内。可选，默认情况下计算所有部队。

要签入的状态。unit = <string>state = <scope> / <variable>

divisions_in_state = {
    type = armor
    size > 10
    state = 49
}
检查指定的状态是否包含指定的部队数。	营及其类型在/Hearts of Iron IV/common/units/*.txt文件中定义。必须使用 > 或 < 运算符来表示大小。	1.0
army_manpower_in_state	amount <> <float>
要检查的数值。
type = <string>
要检查的类型。可选。

要签入的状态。state = <scope> / <variable>

army_manpower_in_state = {
    type = support
    amount > 10000
    state = 49
}
检查指定state是否包含state内指定数量的军队人力。	营类型在 /铁之心 IV/普通/单位/*.txt 文件中定义。必须使用 > 或 < 运算符来表示大小。	1.6
divisions_in_border_state	size = <float>
要检查的数值。
type = <string>
要检查的营类型。该类型中由营组成的大多数师计数。可选，默认情况下计算所有部队。

要签入的状态。要签入的边界状态。

state = <scope> / <variable>border_state = <scope> / <variable>

divisions_in_border_state = {
    type = infantry
    size > 10
    state = 49
    border_state = var:state
}
检查指定state和边境state之间的边境小地块是否包含指定数量的部队。	营类型在 /铁之心 IV/普通/单位/*.txt 文件中定义。必须使用 > 或 < 运算符来表示大小。	1.5
num_divisions_in_states	count = <int>
要检查的数值。
states = { <int> <...> <int> }
The states to check in.
types = { <string> <...> <string> }
The battalion types to check for. Divisions that are majority made up of battalions in that type count. Optional, counts all divisions by default.
exclude = { <string> <...> <string> }
The sub-units to exclude from the search. Divisions that are majority made up of specified battalions are excluded. Optional, excludes no divisions by default.

num_divisions_in_states = {
    count > 24
    states = { 550 559 271 }
    exclude = { irregular_infantry }
}
检查指定的状态是否包含指定类型的足够部队。	营及其类型在/Hearts of Iron IV/common/units/*.txt文件中定义。可以使用 =、> 或 < 运算符进行计数。自建提示不指定运行检查的状态，也不指定筛选的类型。	1.12
num_battalions_in_states	count = <int>
要检查的数值。
states = { <int> <...> <int> }
The states to check in.
types = { <string> <...> <string> }
The battalion types to check for.
exclude = { <string> <...> <string> }
The sub-units to exclude from the search.

num_battalions_in_states = {
    count > 24
    states = { 550 559 271 }
    exclude = { irregular_infantry }
}
检查指定state是否包含足够多的指定类型的营（或子单位）。	部队及其类型在 /Hearts of Iron IV/common/units/*.txt 文件中定义。可以使用 =、> 或 < 运算符进行计数。自建提示不指定运行检查的状态，也不指定筛选的类型。	1.12
ships_in_state_ports	size = <float>
要检查的数值。
type = <string>
要检查的类型。可选。

要签入的状态。state = <scope> / <variable>
ships_in_state_ports = {
    type = capital_ship
    size > 10
    state = 49
}
检查指定状态是否包含指定数量的船舶或指定类型的船舶。	船型在 /Hearts of Iron IV/common/units/*.txt 文件中定义。必须使用 > 或 < 运算符来表示大小。	1.0
num_planes_stationed_in_regions	value = <float>
要检查的数值。
regions = { <id> <...> <id> }
要签入的区域。
num_planes_stationed_in_regions = {
    value > 10
    regions = { 123 321 }
}
检查当前作用域是否具有指定数量的飞机驻扎在战略区域内。	必须对值使用 =、> 或 < 运算符。	1.12
has_volunteers_amount_from	tag = <scope>
要检查的国家/地区。
count = <int>
要检查的数值。

has_volunteers_amount_from = {
    tag = GER
    count > 10
}
检查当前作用域是否接收了来自指定国家/地区的指定数值的志愿者。	必须使用 > 或 < 运算符进行计数。	1.0
convoy_threat	<float>
要应对的威胁。	
convoy_threat > 0.5
检查车队受到的威胁程度。	必须使用 > 或 < 运算符进行计数。威胁始终介于 0 和 1 之间。	1.6
has_mined	target = <tag>
其海岸被开采的国家。
value <> <int>
要比较的地雷数量。

has_mined = {
    target = POL
    value > 1000
}
检查当前作用域在指定国家/地区的海岸上是否有 X 个地雷。	必须使用 > 或 < 运算符来获取值。	1.6
has_mines	region = <ID>
包含地雷的战略区域。
amount = <int>
要比较的地雷数量。

has_mined = {
    target = POL
    amount = 1000
}
检查当前作用域是否在指定的战略区域内至少有 X 个地雷。		1.6
mine_threat	<float>
要应对的威胁。	
mine_threat < 0.6
检查敌方地雷的危险程度。	必须使用 > 或 < 运算符进行计数。威胁始终介于 0 和 1 之间。	1.6
装备
与装备相关的国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
stockpile_ratio	archetype = <string>
要检查的装备原型。
ratio = <float>
要检查的装备比率。

stockpile_ratio = {
    archetype = infantry_equipment
    ratio > 0.5
}
检查当前状态是否已将指定装备与相同类型的现场装备按指定比率储存。	必须使用 > 或 < 运算符作为比率。
对于未作为其他装备部署的车队装备，比例不应为百分比，而应为直接数量（例如256个车队）	1.5
has_equipment	<equipment> = <int> / <variable>
要检查的装备以及要检查的数值。	
has_equipment = {
    infantry_equipment_1 > 10
}
检查当前状态是否具有指定数量的指定装备。	必须使用 > 或 < 运算符。	1.0
has_any_license	<bool>
bool。	
has_any_license = yes
检查当前作用域是否具有来自其他国家/地区的任何许可证。		1.0
is_licensing_any_to	<scope>
要检查的国家/地区。	
is_licensing_any_to = GER
检查当前作用域是否向指定作用域授予许可。		1.0
is_licensing_to	target = <scope>
要检查的国家/地区。
archetype = <string>
要检查的装备原型。可选。
装备作用域

要检查的装备。可选。

装备的变体 ID。可选。type = <string>version = <int>

is_licensing_to = {
    target = GER
    archetype = infantry_equipment
}
is_licensing_to = {
    target = GER
    equipment = {
        type = light_tank_equipment
        version = 1
    }
}
检查当前作用域是否将指定装备许可给指定国家/地区。		1.0
has_license	from = <scope>
要检查的国家/地区。
archetype = <string>
要检查的装备原型。可选。
装备作用域

要检查的装备。可选。

装备的变体 ID。可选。type = <string>version = <int>

has_license = {
    from = GER
    archetype = infantry_equipment
}
has_license = {
    from = GER
    equipment = {
        type = light_tank_equipment
        version = 1
    }
}
检查当前作用域是否具有指定国家/地区的指定装备的许可证。		1.0
fuel_ratio	<float>
要检查的比率。	
fuel_ratio > 0.4
检查国家的燃料比。	必须使用 < 或 > 运算符。	1.6
has_fuel	<int>
要比较的数量。	
has_fuel > 400
检查国家的燃料量。	必须使用 < 或 > 运算符。	1.6
has_design_based_on	<archetype>
装备原型。	
has_design_based_on = light_tank_chassis
检查国家/地区是否具有基于指定装备原型的可构建非过时设计。	装备原型可以在/Hearts of Iron IV/普通/单位/装备/*中看到。	1.11
情报
与情报相关的国家作用域的触发因素：
名字	参数	例子	描述	笔记	已添加版本
estimated_intel_max_piercing	tag = <scope>
要检查的国家/地区。
value = <float>
要检查的数值。

estimated_intel_max_piercing = {
    tag = GER
    value > 0.5
}
根据当前状态的情报检查指定状态是否具有指定的穿孔量。	必须使用 > 或 < 运算符来获取值。	1.0
estimated_intel_max_armor	tag = <scope>
要检查的国家/地区。
value = <float>
要检查的数值。

estimated_intel_max_armor = {
    tag = GER
    value > 0.5
}
根据当前瞄准镜的情报检查指定瞄准镜是否具有指定数量的护甲。	必须使用 > 或 < 运算符来获取值。	1.0
compare_intel_with	target = <tag>
要与之比较的目标。
civilian_intel <>= <float>
民用情报的比较。

军队情报的比较。

海军情报的比较。

空军情报的比较。army_intel <>= <float>navy_intel <>= <float>airforce_intel <>= <float>
compare_intel_with = { 
    target = POL 
    civilian_intel > 0.5
    army_intel = 0
    navy_intel < 0
}
比较 2 个国家/地区的英特尔。	可以使用<（在这种情况下，当前国家/地区的英特尔量较少）、>和 =（在这种情况下，它必须相等）。	1.9
intel_level_over	target = <tag>
要与之比较的目标。
civilian_intel <>= <float>
民用情报的比较。

军队情报的比较。

海军情报的比较。

空军情报的比较。army_intel <>= <float>navy_intel <>= <float>airforce_intel <>= <float>
intel_level_over = { 
    target = POL 
    civilian_intel > 0.5
    army_intel = 0
    navy_intel < 0
}
检查当前国家/地区超过指定国家/地区的英特尔级别。	可以使用<（在这种情况下，当前国家/地区的英特尔量较少）、>和 =（在这种情况下，它必须相等）。	1.9
has_intelligence_agency	<boolean>
情报机构要检查。
has_intelligence_agency = yes
检查当前作用域是否有情报机构。		1.9
network_national_coverage	target = <tag>
检查的国家/地区。
value <> <float>
网络的价值。

network_national_coverage = {
    target = POL
    value < 70
}
检查特定国家/地区的网络全国覆盖作用域。	必须使用<或>作为值。
network_strength	target = <tag>
检查的国家/地区。
state = <id>
检查的状态。

网络的力量。value <> <float>

network_strength = {
    target = POL
    value < 70
}
检查特定国家/地区的网络全国覆盖作用域。	必须使用<或>作为值。可以使用目标和状态中的一个或两者。	1.9
has_done_agency_upgrade	<string>
代理升级检查。
has_done_agency_upgrade = upgrade_army_department
检查当前作用域是否具有指定的代理升级（到其最高级别）。		1.9
agency_upgrade_number	<int>
要检查的代理升级量。
agency_upgrade_number > 4
检查当前作用域的情报机构中完成的升级次数。	必须使用 > 或 < 运算符。	1.9
decryption_progress	target = <tag>
要比较的国家。
value <> <float>
要比较的值。

decryption_progress = {
    target = POL
    value < 0.5
}
检查对某个国家/地区的解密进度。	必须使用 > 或 < 运算符来获取值。	1.9
has_captured_operative	<tag>/<bool>
特工被抓获的国家/特工是否被抓获。	
has_captured_operative = POL
has_captured_operative = yes
检查当前作用域是否已捕获特工。		1.9
has_finished_collecting_for_operation	target = <tag>
行动所针对的国家/地区。
operation = <token>
当前作用域针对目标规划的操作。

has_finished_collecting_for_operation = {
    target = POL
    operation = operation_infiltrate_armed_forces_navy
}
检查当前作用域是否已完成为操作收集资源。		1.9
is_preparing_operation	target = <tag>
行动所针对的国家/地区。
operation = <token>
当前作用域针对目标规划的操作。可选。

is_preparing_operation = {
    target = POL
    operation = operation_infiltrate_armed_forces_navy
}
检查当前作用域是否正在针对指定的国家/地区准备操作。		1.9
is_running_operation	target = <tag>
行动所针对的国家/地区。
operation = <token>
当前作用域针对目标规划的操作。可选。

is_running_operation = {
    target = POL
    operation = operation_infiltrate_armed_forces_navy
}
检查当前作用域是否正在针对指定的国家/地区运行操作。		1.9
num_finished_operations	target = <tag>
行动所针对的国家/地区。
operation = <token>
当前作用域针对目标规划的操作。可选。

num_finished_operations = {
    target = POL
    operation = operation_infiltrate_armed_forces_navy
}
检查当前作用域针对指定国家/地区已完成的操作数。		1.9
has_operation_token	tag = <tag>
行动所针对的国家/地区。
token = <token>
操作令牌。

has_operation_token = {
    tag = POL
    token = token_name
}
检查当前作用域是否具有针对另一个国家/地区的操作令牌。		1.9
is_active_decryption_bonuses_enabled	<tag>
启用加成的国家/地区。	
is_active_decryption_bonuses_enabled = POL
检查当前作用域是否对指定国家/地区有任何解密奖励。		1.9
is_cryptology_department_active	<bool>
bool。	
is_cryptology_department_active = yes
检查当前作用域是否具有活动的密码部队。		1.9
is_decrypting	<tag>
解密的国家/地区。	
is_decrypting = POL
检查当前作用域是否正在解密某个国家/地区。		1.9
is_fully_decrypted	<tag>
解密的国家/地区。	
is_fully_decrypted = POL
检查当前作用域是否已完全解密某个国家/地区。		1.9
num_fake_intel_divisions	<int>
分割数量。	
num_fake_intel_divisions > 10
检查虚假情报部队的数量。	必须使用<或>。	1.9
num_free_operative_slots	<int>
插槽数量。	
num_free_operative_slots > 2
检查空闲操作插槽的数量。	必须使用<或>。	1.9
num_operative_slots	<int>
插槽数量。	
num_operative_slots > 2
检查操作槽的数量。	必须使用<或>。	1.9
num_of_operatives	<int>
特工数量。	
num_of_operatives > 2
检查特工的数量。	必须使用<或>。	1.9
AI
与 AI 相关的国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
ai_irrationality	<int>
要检查的数值。	
ai_irrationality > 10
检查当前作用域 AI 是否具有指定的非合理性。	必须使用 > 或 < 运算符。	1.0
ai_liberate_desire	target = <scope>
要检查的国家/地区。
count = <float>
要检查的数值。

ai_liberate_desire = {
    target = GER
    count > 1
}
检查当前作用域 AI 是否对指定国家/地区具有指定的解放愿望。	必须使用 > 或 < 运算符进行计数。	1.0
ai_has_role_division	<string>
要检查的角色。	
ai_has_role_division = infantry
检查当前作用域 AI 是否具有具有指定角色的部队。	角色在 /Hearts of Iron IV/common/ai_templates/* 中定义.txt	1.0
ai_has_role_template	<string>
要检查的角色。	
ai_has_role_template = armor
检查当前作用域 AI 是否具有具有指定角色的划分编制。	角色在 /Hearts of Iron IV/common/ai_templates/* 中定义.txt	1.0
ai_wants_divisions	<int>
要检查的数值。	
ai_wants_divisions > 10
检查当前作用域 AI 是否需要指定的分割数。	必须使用 > 或 < 运算符。	1.0
has_template_ai_majority_unit	<string>
要检查的装备。	
has_template_ai_majority_unit = infantry
检查当前作用域 AI 是否具有主要由指定单位组成的划分编制。		1.0
人物
这些是与字符相关的限定，而不是人物作用域作用域的限定。

与字符相关的国家/地区作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
can_be_country_leader	<character>
要检查的人物。	
can_be_country_leader = POL_character_test
检查指定角色是否具有国家/地区领导角色（活动与否），以及是否可以在该国/地区使用它。		1.11
has_character	<string>
要检查的人物。	
has_character = my_character
检查当前作用域是否招募了指定的人物。角色不需要掌权。		1.11
has_country_leader	ruling_only = <bool>（默认值 = 是）将检查限制为仅裁决。
character = <character_token>（推荐标准）要检查的人物。可选。

要检查的名称。可选。

要检查的 ID。可选。name = <string>id = <int>
has_country_leader = {
    id = 10
}
has_country_leader = {
	character = SPR_niceto_alcala_zamora
	ruling_only = yes
}


has_country_leader = {
    name = "John Smith"
    ruling_only = yes
}
检查当前作用域是否具有指定的国家/地区领导者。		1.3
has_country_leader_ideology	<意识形态>
检查活跃国家领导人的意识形态

has_country_leader_ideology = nazism	检查当前作用域的活动国家/地区领导者是否具有指定的意识形态。		1.11
has_country_leader_with_trait	<string>
要检查的特质。	
has_country_leader_with_trait = champion_of_peace_1
检查国家领导人是否具有特定特质。		1.6
is_female	<bool>
bool。	
is_female = yes
检查当前国家领导人是否为女性。		1.9
has_unit_leader	<int>
要检查的 ID。	
has_unit_leader = 1
检查当前作用域是否具有具有指定 ID 的装备领导。		1.0
和平会议
这些并不完全是与和平会议有关的触发因素，而是只能在和平会议中使用的限定。

仅限和平会议的国家作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
pc_is_winner	<bool>
bool。	
pc_is_winner = yes
检查当前作用域是否是和平会议中的赢家。		1.12
pc_is_on_winning_side	<bool>
bool。	
pc_is_on_winning_side = yes
检查当前作用域是否在和平会议中处于获胜方。		1.12
pc_is_loser	<bool>
bool。	
pc_is_loser = yes
检查当前作用域是否是和平会议中的失败者。		1.12
pc_is_untouched_loser	<bool>
bool。	
pc_is_untouched_loser = yes
检查当前作用域是否是和平会议中未触及的失败者。		1.12
pc_is_on_same_side_as	<scope>
要检查的国家/地区。	
pc_is_on_same_side_as = BHR
检查当前作用域是否与指定国家/地区位于和平会议的同一侧。		1.12
pc_is_liberated	<bool>
bool。	
pc_is_liberated = yes
检查和平会议是否解放了当前作用域。		1.12
pc_is_liberated_by	<scope>
要检查的国家/地区。	
pc_is_liberated_by = BHR
检查当前作用域是否已在指定国家/地区在和平会议中解放。		1.12
pc_is_puppeted	<bool>
bool。	
pc_is_puppeted = yes
检查当前作用域是否已在和平会议中被傀儡化。		1.12
pc_is_puppeted_by	<scope>
要检查的国家/地区。	
pc_is_puppeted_by = BHR
检查当前作用域是否已被指定国家/地区在和平会议中操纵。		1.12
pc_is_forced_government	<bool>
bool。	
pc_is_forced_government = yes
检查当前作用域是否在和平会议中强制政府变更。		1.12
pc_is_forced_government_by	<scope>
要检查的国家/地区。	
pc_is_forced_government_by = BHR
检查当前作用域是否在指定国家要求的和平会议中强制政府变更。		1.12
pc_is_forced_government_to	<ideology group>
要检查的意识形态组。	
pc_is_forced_government_to = democratic
检查当前作用域是否已强制政府对指定的意识形态组进行更改。		1.12
pc_total_score	<decimal>
要检查的作用域。	
pc_total_score > 2400
检查当前作用域在和平会议中的总分中是否具有指定的数值。	只能用于获胜国家。	1.12
pc_current_score	<decimal>
要检查的作用域。	
pc_current_score > 100
检查当前作用域在和平会议中的当前分数中是否具有指定的数量。	只能用于获胜国家。	1.12
状态作用域
可以在状态作用域内使用。

一般
常规状态作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
state	<scope> / <variable>
要检查的作用域。	
state = 10
state = var:state
检查当前作用域是否为指定作用域。		1.0
地区	<int>
要检查的战略区域 ID。	
region = 10
检查当前作用域是否为指定战略区域中的地区。		1.0
<建筑>	<building> = <int>
要检查的指定建筑物的数量。	
arms_factory > 10
检查当前作用域是否具有指定建筑物的指定数量。	必须使用 > 或 < 运算符。	1.0
free_building_slots	building = <string>
要检查的建筑物。
size = <int>
要检查的数值。

是否包括锁定的插槽。include_locked = <bool>

free_building_slots = {
    building = arms_factory
    size > 10
    include_locked = yes
}
检查当前作用域是否具有指定数量的建筑物的可用槽位。	必须使用 > 或 < 运算符来表示大小。	1.0
non_damaged_building_level	building = <string>
要检查的建筑物。
level = <int>
要检查的数值。
non_damaged_building_level = {
    building = arms_factory
    level > 4
}
检查当前作用域是否具有指定数量的指定未损坏建筑物。	必须使用 > 或 < 运算符进行级别。	1.9
any_province_building_level	building = <string>
要检查的建筑物。
limit = <int>
要检查的数值。
小地块作用域

要检查的小地块。

是否将检查限制在边境小地块。id = <int>limit_to_border = <bool>

any_province_building_level = {
    province = {
        id = 445
        id = 494
        limit_to_border = yes
    }
    building = bunker
    level < 5
}
检查当前作用域是否具有指定小地块指定数量的指定省级建筑。	必须使用 > 或 < 运算符进行级别。	1.0
has_state_flag	<string>
要检查的旗标。	
has_state_flag = my_flag
检查当前作用域是否具有指定的旗标。		1.0
has_state_flag	flag = <string>
要检查的旗标。
value = <int>
要检查的旗标值。可选。

要检查的旗标创建日期。可选。

旗标存在的持续时间。可选。date = <date>days = <int>

has_state_flag = {
    flag = my_flag
    days > 30
    date > 1936.6.1
    value > 0
}
比较指定旗标的上次设置日期、自上次设置以来的天数AND\OR值。	如果未设置，则值比较为 。 限制在 -32768 和 32767 之间。>0value	1.0
state_population	<float>
要检查的数值。	
state_population > 10000
检查当前作用域是否具有指定的状态填充。	必须使用 > 或 < 运算符。	1.0
state_population_k	<float>
要检查的数值。	
state_population_k > 10
检查当前作用域是否具有指定的状态人口（以千为单位）。	必须使用 > 或 < 运算符。	1.0
is_capital	<bool>
bool。	
is_capital = yes
检查当前作用域是否为大写。		1.5
is_controlled_by	<scope> / <variable>
要检查的国家/地区。	
is_controlled_by = GER
检查当前作用域是否由指定的国家/地区控制。		1.0
is_fully_controlled_by	<scope> / <variable>
要检查的国家/地区。	
is_fully_controlled_by = GER
检查当前作用域是否完全由指定国家/地区控制。		1.5
is_owned_by	<scope> / <variable>
要检查的国家/地区。	
is_owned_by = GER
检查当前作用域是否归指定国家/地区所有。		1.0
is_claimed_by	<scope> / <variable>
要检查的国家/地区。	
is_claimed_by = GER
检查当前作用域是否由指定的国家/地区宣称。		1.0
is_core_of	<scope> / <variable>
要检查的国家/地区。	
is_core_of = GER
检查当前作用域是否为指定国家/地区的核心。		1.0
is_owned_and_controlled_by	<scope> / <variable>
要检查的国家/地区。	
is_owned_and_controlled_by = GER
检查当前作用域是否由指定国家/地区拥有和控制。		1.0
is_demilitarized_zone	<bool>
bool。	
is_demilitarized_zone = yes
检查当前作用域是否为非军事区。		1.0
is_border_conflict	<bool>
bool。	
is_border_conflict = yes
检查当前作用域是否是边界战争的一部分。		1.0
is_in_home_area	<bool>
bool。	
is_in_home_area = yes
检查当前作用域是否连接到土地上的首都状态。还需要拥有作用域才能使语句为真。		1.0
is_coastal	<bool>
bool。	
is_coastal = yes
检查当前作用域是否为沿海状态。		1.0
is_island_state	<bool>
bool。	
is_island_state = yes
检查当前作用域是否为没有相邻陆地状态的沿海状态。		1.0
is_on_continent	<string>
要检查的大陆。	
is_on_continent = europe
检查当前作用域是否在指定的大陆上。	大陆位于/Hearts of Iron IV/map/continent.txt。	1.0
不可逾越	<bool>
bool。	
impassable = yes
检查当前作用域是否不可通行。		1.9.1
has_state_category	<string>
要检查的类别。	
has_state_category = rural
检查当前作用域是否具有指定的类别。	状态类别可在/Hearts of Iron IV/common/state_category/*.txt中找到。	1.0
state_strategic_value	<int>
要检查的数值。	
state_strategic_value > 10
检查当前作用域是否具有指定的战略价值。	必须使用 > 或 < 运算符。	1.5
state_and_terrain_strategic_value	<int>
要检查的数值。	
state_and_terrain_strategic_value > 10
检查当前作用域是否具有指定的状态和地形战略值。	必须使用 > 或 < 运算符。	1.5
num_owned_neighbour_states	owner = <scope>
要检查的国家/地区。
count = <int>
要检查的数值。

num_owned_neighbour_states = {
    owner = GER
    count > 2
}
检查当前作用域是否具有属于指定国家/地区的指定数量的相邻状态。	必须使用 > 或 < 运算符进行计数。	1.0
distance_to	distance = <float>
要检查的距离。
target = <scope>
要比较的状态。

distance_to = {
    value > 1000
    target = 49
}
检查当前作用域是否与指定状态处于指定距离。	必须使用 > 或 < 运算符表示距离。	1.0
ships_in_area	area = <int>
要检查的战略区域。
size = <int>
要检查的数值。

ships_in_area = { area = 104 size > 14 } 
检查当前作用域在指定战略区域中是否具有指定数量的船舶。	必须使用 > 或 < 运算符进行计数。	1.0
has_resources_amount	resource = <string>
要检查的资源。
amount = <int>
要检查的数值。

如果指定，则检查应用修正后的数值，而不是基本资源值。delivered = yes

has_resources_amount = {
    resource = oil
    amount > 10
    delivered = yes
}
检查当前作用域是否具有指定数量的指定资源。	必须使用>或<运算符来获取数值。	1.3
has_resources_rights	state = <scope>
要签入的状态。如果在国家/地区作用域内使用，则为必填项。
receiver = <int>
资源权限的接收方。如果在状态作用域内使用，则为必需。

要检查的资源。可选，如果未设置，则默认为 any。resources = { <resource> <...> <resource> }

has_resources_rights = {    # Used in country scope
    state = 123 
    resources = { oil steel }
}
has_resources_rights = {    # Used in state scope
    receiver = POL
}
检查是否存在具有指定参数的资源权限。	可用于state或国家/地区作用域。	1.12
has_resources_in_country	resource = <string>
要检查的资源。
amount = <int>
要检查的数值。

has_resources_in_country = {
    resource = oil
    amount > 10
}
检查当前作用域是否保留了指定数量的指定资源。	必须使用>或<运算符来获取数值。“储备”意味着它不用于装备生产或出口。	1.12
days_since_last_strategic_bombing	<int>
要比较的数量。	
days_since_last_strategic_bombing < 10 
检查自上次对该state进行战略轰炸以来已经过去了多少天。	必须使用 > 或 < 运算符。	1.6
has_railway_connection	<scope> / <variable>
要检查的状态。
<id>

要检查的小地块。可选。

has_railway_connection = {
	start_state = 10
	target_state = 90
}
has_railway_connection = {
	start_province = 402
	target_province = 9400
}


如果各state通过铁路连接，则返回 true。还可以检查小地块。		1.11
can_build_railway	<scope> / <variable>
要检查的状态。
<id>

要检查的小地块。可选。

can_build_railway = {
	start_state = 10
	target_state = 90
}
can_build_railway = {
	start_province = 402
	target_province = 9400
}


如果可以在state之间建造铁路，则返回 true。还可以检查小地块。		1.11
has_railway_level	<scope> / <variable>
要检查的状态。
<int>

铁路水平。

has_railway_level = {
    	state = 114
    	level = 5
}
检查指定state是否具有指定级别的铁路线。		1.11
pc_does_state_stack_demilitarized	<bool>
bool。	
pc_does_state_stack_demilitarized = yes
检查当前作用域在当前或先前结束的和平会议期间是否非军事化。		1.12
pc_does_state_stack_dismantled	<bool>
bool。	
pc_does_state_stack_dismantled = yes
检查当前作用域是否在当前或先前结束的和平会议期间被拆除。		1.12
pc_is_state_claimed_by	<scope>
要检查的国家/地区。	
pc_is_state_claimed_by = BHR
检查指定国家在和平会议期间是否声称当前作用域。	只能在和平会议中使用。	1.12
抵抗与合规
与抵抗力量相关的状态作用域限定：
名字	参数	例子	描述	笔记	已添加版本
合规	<int>
要比较的数量。	
compliance > 50
将当前作用域的符合性值与给定值进行比较。	必须使用 > 或 < 运算符。	1.9
compliance_speed	<int>
要比较的数量。	
compliance_speed > 50
将当前作用域的合规速度与给定值进行比较。	必须使用 > 或 < 运算符。	1.9
has_active_resistance	<bool>
bool。	
has_active_resistance = yes
检查当前状态是否具有非零抵抗力量。		1.9
has_resistance	<bool>
bool。	
has_resistance = yes
检查当前状态是否有抵抗力量。		1.9
抵抗力量	<int>
要比较的数量。	
resistance > 50
将当前状态的抵抗力量值与给定值进行比较。	必须使用 > 或 < 运算符。	1.9
resistance_speed	<int>
要比较的数量。	
resistance_speed > 50
将电流状态的抵抗力量速度与给定值进行比较。	必须使用 > 或 < 运算符。	1.9
resistance_target	<int>
要比较的数量。	
resistance_target > 50
将当前状态的目标抵抗力量值与给定值进行比较。	必须使用 > 或 < 运算符。	1.9
has_occupation_modifier	<token>
要检查的职业修正。	
has_occupation_modifier = modifier_name
检查当前作用域是否具有职业修正，更改抵抗力量/合规性。		1.9
occupation_law	<token>
要检查的特工法。	
occupation_law = law_name
检查当前作用域是否具有占用法。		1.9
occupied_country_tag	<tag>
要检查的职业标记。	
occupied_country_tag = POL
检查哪个国家/地区产生抵抗力量。		1.9
人物作用域作用域
可以在人物作用域作用域中使用。

一般
常规人物作用域作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
is_character	<bool>
bool。	
is_character = POL_test_character
检查当前人物旗标是否与指定的标记匹配。		1.11
can_be_country_leader	<bool>
bool。	
can_be_country_leader = yes
检查当前作用域中的人物是否具有国家/地区领导角色（活动或非活动）。		1.11
is_country_leader	<bool>
bool。	
is_country_leader = yes
检查当前作用域中的人物是否为活动国家/地区领导者。		1.11
is_unit_leader	<bool>
bool。	
is_unit_leader = yes
检查当前作用域中的角色是否具有活动将领（陆军/海军队长）角色。		1.11
is_advisor	<bool>
bool。	
is_advisor = yes
检查当前作用域中的人物是否具有顾问角色（包括顾问/理论家/高级命令）。		1.11
is_air_chief	<bool>
bool。	
is_air_chief = yes
检查当前作用域中的人物是否被选为空中首长。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_army_chief	<bool>
bool。	
is_army_chief = yes
检查当前作用域中的角色是否被选为陆军首领。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_army_leader	<bool>
bool。	
is_army_leader = yes
检查当前作用域中的角色是否具有军队领袖（将军/陆军元帅）角色。		1.11
is_navy_chief	<bool>
bool。	
is_navy_chief = yes
检查当前作用域中的人物是否被选为海军首长。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_navy_leader	<bool>
bool。	
is_navy_leader = yes
检查当前作用域中的角色是否具有海军领袖（海军上将）角色。		1.11
is_high_command	<bool>
bool。	
is_high_command = yes
检查当前作用域中的人物是否被选为高命令。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_corps_commander	<bool>
bool。	
is_corps_commander = yes
检查当前作用域中的角色是否为元帅。		1.11
is_operative	<bool>
bool。	
is_operative = yes
检查当前作用域中的人物是否为操作字符。		1.11
is_political_advisor	<bool>
bool。	
is_political_advisor = yes
检查当前作用域中的人物是否被选为政治顾问。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_theorist	<bool>
bool。	
is_theorist = yes
检查当前作用域中的人物是否被选为理论家。	在 1.12 之前，检查角色是否在插槽中具有角色，无论是否被选中。	1.11
is_character_slot	<string>
要检查的顾问插槽。	
is_character_slot = political_advisor
检查当前作用域中的人物是否在指定的人物槽中具有角色	角色槽在 /Hearts of Iron IV/common/idea_tags/*.txt 中定义。	1.11
has_air_ledger	<bool>
bool。	
has_air_ledger = yes
检查当前作用域中的人物是否具有航空账本。		1.11
has_army_ledger	<bool>
bool。	
has_army_ledger = yes
检查当前作用域中的人物是否具有军队分类帐。		1.11
has_navy_ledger	<bool>
bool。	
has_navy_ledger = yes
检查当前作用域中的人物是否具有海军分类帐。		1.11
has_character_flag	<string>
要检查的旗标。	
has_character_flag = my_flag
检查当前作用域是否具有指定的旗标。		1.11
has_character_flag	flag = <string>
要检查的旗标。
value = <int>
要检查的旗标值。可选。

要检查的旗标创建日期。可选。

旗标存在的持续时间。可选。date = <date>days = <int>

has_character_flag = {
    flag = my_flag
    days > 30
    date > 1936.6.1
    value > 0
}
比较指定旗标的上次设置日期、自上次设置以来的天数AND\OR值。	如果未设置，则值比较为 。 限制在 -32768 和 32767 之间。>0value	1.11
has_trait	<trait>
要检查的特质。	
has_trait = really_good_boss
检查当前作用域是否具有指定的特质。		1.5
has_id	<int>
要检查的 ID。	
has_id = 1
检查当前字符是否具有特定的 ID。		1.5
not_already_hired_except_as	<slot>
签入的插槽。	
not_already_hired_except_as = political_advisor
检查当前角色是否未被雇用，但指定的插槽除外。		1.5
国家领导人
这些触发因素将专门用于国家领导人。

国家/地区领导作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
has_ideology	<ideology>
要检查的子意识形态。	
has_ideology = liberalism
检查当前角色是否分配了特定的子意识形态。		1.11
has_ideology_group	<ideology>
要检查的意识形态。	
has_ideology_group = democratic
检查当前角色是否分配了特定的意识形态。		1.11
将领
这些限定将专门用于将领，即将军和海军上将。

将领作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
has_unit_leader_flag	<string>
要检查的旗标。	
has_unit_leader_flag = my_flag
检查当前作用域是否具有指定的旗标。	弃用的。请改用has_character_flag。	1.5
has_unit_leader_flag	flag = <string>
要检查的旗标。
value = <int>
要检查的旗标值。可选。

要检查的旗标创建日期。可选。

旗标存在的持续时间。可选。date = <date>days = <int>

has_unit_leader_flag = {
    flag = my_flag
    days > 30
    date > 1936.6.1
    value > 0
}
比较指定旗标的上次设置日期、自上次设置以来的天数AND\OR值。	弃用的。请改用has_character_flag。如果未设置，则值比较为 。 限制在 -32768 和 32767 之间。>0value	1.5
is_leading_army	<bool>
bool。	
is_leading_army = yes
检查当前作用域是否领导一支军队。		1.5
is_leading_army_group	<bool>
bool。	
is_leading_army_group = yes
检查当前作用域是否正在领导一个集团军。		1.5
is_leading_volunteer_group	<tag>
国家/地区标签。	
is_leading_volunteer_group = POL
检查当前作用域是否在指定国家/地区领导志愿军。	如果目标国家处于内战中，这只对一方有效。	1.11
is_leading_volunteer_group_with_original_country	<tag>
国家/地区标签。	
is_leading_volunteer_group_with_original_country = POL
检查当前作用域是否在指定原始标记的国家/地区内领导志愿军。	如果目标国家处于内战中，这只对双方有效。	1.11
is_field_marshal	<bool>
bool。	
is_field_marshal = yes
检查当前作用域是否为元帅。		1.5
is_assigned	<bool>
bool。	
is_assigned = yes
检查当前作用域是否为指定的将领。		1.5
can_select_trait	<string>
要检查的特质。	
can_select_trait = offensive_doctrine
检查当前作用域是否可以选择指定的特质。		1.5
has_ability	<string>
检查的能力。	
has_ability = glider_planes
检查当前作用域是否具有指定的将领能力。		1.5
技能	<int>
要检查的数值。	
skill > 1
检查当前作用域的技能是否超过指定数量。	必须使用 > 或 < 运算符。	1.5
skill_advantage	<int>
要检查的数值。	
skill_advantage > 1
检查当前瞄准镜在战斗中对抗敌方单位首领的技能优势是否超过指定数量。	必须使用 > 或 < 运算符。	1.5
planning_skill_level	<int>
要检查的数值。	
planning_skill_level > 1
检查当前作用域的计划技能是否高于指定数值。	必须使用 > 或 < 运算符。	1.5
logistics_skill_level	<int>
要检查的数值。	
logistics_skill_level > 1
检查当前作用域是否具有高于指定数量的物流技能。	必须使用 > 或 < 运算符。	1.5
defense_skill_level	<int>
要检查的数值。	
defense_skill_level > 1
检查当前作用域的防御技能是否超过指定数量。	必须使用 > 或 < 运算符。	1.5
attack_skill_level	<int>
要检查的数值。	
attack_skill_level > 1
检查当前作用域的攻击技能是否超过指定数量。	必须使用 > 或 < 运算符。	1.5
average_stats	<int>
要检查的数值。	
average_stats > 5
检查当前作用域的平均技能是否高于指定数量。	必须使用 > 或 < 运算符。	1.5
is_border_war	<bool>
bool。	
is_border_war = yes
检查当前 socpe 是否处于边界战争中。		1.5
num_units	<int>
要检查的数值。	
num_units > 5
检查当前作用域是否控制指定数量的部队。	必须使用 > 或 < 运算符。	1.5
is_exiled_leader	<bool>
bool。	
is_exiled_leader = yes
检查当前作用域是否是来自流亡国家的将军。		1.6
is_exiled_leader_from	<tag>
国家。	
is_exiled_leader_from = POL
检查当前作用域是否是来自指定流亡国家的将军。		1.6
is_female	<bool>
bool。	
is_female = yes
检查当前作用域是否为女性。	适用于王牌。	1.9
特工
这些限定仅适用于特工。

特工作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
has_nationality	<tag>
要检查的国籍。	
has_nationality = POL
检查当前特工是否具有国籍。		1.9
is_operative_captured	<bool>
bool。	
is_operative_captured = yes
检查是否捕获了当前作用域。		1.9
operative_leader_mission	<token>
任务。	
operative_leader_mission = mission_name
检查当前作用域是否在给定任务上。		1.9
operative_leader_operation	<token>
操作。	
operative_leader_operation = operation_name
检查当前作用域是否在给定操作上。		1.9
战斗
这些限定在战斗作用域内使用，在能力、战斗战术和将领特质中检查。

战斗作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
硬度	<float>
要检查的数值。	
hardness > 0.5
检查当前状态是否具有指定的硬度。	必须使用 > 或 < 运算符。	1.0
装甲	<float>
要检查的数值。	
armor > 0.5
检查当前瞄准镜是否具有指定数量的装甲单位。	必须使用 > 或 < 运算符。	1.0
dig_in	<float>
要检查的数值。	
dig_in > 0.5
检查当前作用域是否具有指定的挖掘加成数值。	必须使用 > 或 < 运算符。	1.0
min_planning	<float>
要检查的数值。	
min_planning > 0.5
检查当前作用域是否具有指定的计划量。	必须使用 > 或 < 运算符。	1.0
fastest_unit	<float>
要检查的速度（以公里/小时为单位）。	
fastest_unit > 12
检查当前状态是否具有指定速度的单位。	必须使用 > 或 < 运算符。	1.0
温度	<float>
要检查的温度（以摄氏度为单位）。	
temperature > 20
检查当前作用域是否位于温度高于指定值的小地块。	必须使用 > 或 < 运算符。	1.0
储量	<float>
要检查的数值。	
reserves > 10
检查当前作用域是否具有指定的等待量预留。	必须使用 > 或 < 运算符。	1.0
has_cavalry_ratio	<float>
要检查的比率。	
has_cavalry_ratio > 0.5
检查当前瞄准镜在其师组成中是否具有指定的骑兵比例。	必须使用 > 或 < 运算符。	1.0
has_combat_modifier	<string>
要检查的修正。	
has_combat_modifier = river_crossing
检查当前瞄准镜是否具有指定的战斗修正符。		1.0
is_fighting_in_terrain	<string>
要检查的地形。	
is_fighting_in_terrain = desert
检查当前瞄准镜是否在指定地形中战斗。		1.0
is_fighting_in_weather	<string>
要检查的天气。
OR 要在 OR

语句中检查的天气。{ <string> <...> <string> }

is_fighting_in_weather = sandstorm
is_fighting_in_weather = { rain_light rain_heavy }
检查当前瞄准镜是否在指定的天气下战斗。		1.0
阶段	<bool>
bool。	
phase = yes
检查当前作用域是否处于相位状态。		1.0
recon_advantage	<bool>
bool。	
recon_advantage > 0
检查当前作用域是否具有 x 侦察优势。		1.0
晚上	<bool>
bool。	
night = yes
检查当前状态是否在夜间战斗。		1.0
frontage_full	<bool>
bool。	
frontage_full = yes
检查当前瞄准镜是否具有完整的战斗宽度。		1.0
has_flanked_opponent	<bool>
bool。	
has_flanked_opponent = yes
检查当前瞄准镜是否侧翼了对手。		1.0
has_max_planning	<bool>
bool。	
has_max_planning = yes
检查当前作用域是否具有最大规划奖励。		1.0
has_reserves	<bool>
bool。	
has_reserves = yes
检查当前作用域是否有任何预留在等待。		1.0
is_amphibious_invasion	<bool>
bool。	
is_amphibious_invasion = yes
检查当前瞄准镜是否正在执行两栖入侵。		1.0
is_attacker	<bool>
bool。	
is_attacker = yes
检查当前作用域是否正在攻击。		1.0
is_defender	<bool>
bool。	
is_defender = yes
检查当前作用域是否正在防御。		1.0
is_winning	<bool>
bool。	
is_winning = yes
检查当前作用域是否正在赢得他们的战斗。		1.0
is_fighting_air_units	<bool>
bool。	
is_fighting_air_units = yes
检查当前瞄准镜是否正在与空中单位作战。		1.0
less_combat_width_than_opponent	<bool>
bool。	
less_combat_width_than_opponent = yes
检查当前瞄准镜的战斗宽度是否小于对手。		1.0
has_carrier_airwings_on_mission	<bool>
bool。	
has_carrier_airwings_on_mission = yes
检查当前瞄准镜是否有航母机翼执行任务。		1.0
has_carrier_airwings_in_own_combat	<bool>
bool。	
has_carrier_airwings_in_own_combat = yes
检查当前瞄准镜在自己的战斗中是否有航母机翼。		1.0
划分作用域
可用于除法作用域。

部队作用域的限定：
名字	参数	例子	描述	笔记	已添加版本
division_has_majority_template	<battalion>
营检查。	
division_has_majority_template = light_armor
检查当前作用域是否由指定营组成。	营在/Hearts of Iron IV/普通/单位/*.txt文件中定义。	1.12
division_has_battalion_in_template	<battalion>
营检查。	
division_has_battalion_in_template = light_armor
检查当前作用域在编制中是否有该类型的任何营。	营在/Hearts of Iron IV/普通/单位/*.txt文件中定义。	1.12
unit_strength	<battalion>
营检查。	
unit_strength < 0.3
在从 0 到 1 的刻度上检查单位的当前强度。	必须使用 < 或 > 运算符。	1.12
unit_organisation	<battalion>
营检查。	
unit_organisation < 0.3
在从 0 到 1 的等级上检查单位的当前组织结构。	必须使用 < 或 > 运算符。	1.12
is_unit_template_reserves	<bool>
bool。	
is_unit_template_reserves = yes
检查当前部队是否将供应优先级设置为“储备”，即最低优先级。	必须使用 < 或 > 运算符。	1.12
meta trigger
meta trigger是与 1.6 枪手 一起添加的系统，带有枪手[4]，其使用方式与meta effect完全相同：为了将触发块绑定到动态定位条目。这通常与非数字检查的脚本化本地化结合使用。这也可以用于在不可能的地方进行变量检查。
meta trigger适用于任何支持限定的作用域，包括战斗作用域。

以下参数位于脚本限定内部：

text = { ... }是meta trigger使用的限定块。在这里，任何必须动态的人物串都用每边的方括号标记为 。[EXAMPLE]
EXAMPLE = "..."是一个字符串，将用作 内 的动态替换。这在有限的程度上接受动态本地化，例如获取变量的值或某些命名空间，如 .[EXAMPLE]text = { ... }[?var_name][ROOT.GetTag]
debug = yes，如果添加，会将最终输出添加到用户目录的 /Hearts of Iron IV/logs/game.log 文件中，以便进行调试。
例如，以下内容可以与has_equipment一起使用，使其依赖于变量的值：

meta_trigger = {
    text = {
        has_equipment = { [EQUIPMENT_ARCHETYPE] > 100 }
    }
    EQUIPMENT_ARCHETYPE = "[GetEquipmentArchetype]"
}
在本例中，是脚本化本地化。在这种情况下，脚本化本地化的示例定义如下：GetEquipmentArchetype

defined_text = {
    name = GetEquipmentArchetype
    text = {
        trigger = {
            check_variable = { v = 0 }
        }
        localization_key = artillery_equipment
    }
    text = {
        localization_key = infantry_equipment
    }
}
脚本化限定
脚本限定的作用与函数类似，因为它们可以在 /Hearts of Iron IV/common/scripted_triggers/*.txt 中定义，然后在其他地方用作缩短版本。除此之外，游戏还具有某些基础游戏脚本限定，这些限定直接在游戏代码中检查，以确定无法更改的功能的限定。

脚本限定简单地定义为

scripted_trigger_name = {
	<triggers>
}
此示例可用作常规代码中的限定 as 或 。scripted_trigger_name = yesscripted_trigger_name = no
从 1.12 开始，以下脚本限定直接在游戏代码中检查：

diplomacy_scripted_triggers.txt决定何时可以发送外交选项的限定，其中 ROOT 是检查限定的国家/地区，FROM 是外交选项所针对的目标国家/地区。为了找到不在文件中的外交职能的内部名称，/Hearts of Iron IV/localisation/diplomacy_l_english.yml。例如，表示“宣战”外交行动的ID为DIPLOMACY_WAR。DIPLOMACY_WAR_TITLE:0 "Declare war"
00_diplo_action_valid_triggers.txt决定何时可以看到外交行动。
00_resistance_initiate_triggers.txt决定何时可以启动抵抗。除了适用于每个状态的默认全局限定外，还可以使用
should_initiate_resistance_123_321 = {
	if = {
		limit = {
			tag = ENG
		}
		is_core_of = FRA
	}
	else = {
		should_initiate_resistance = yes
	}
}
如果英格兰是法国的核心，这个例子将激活英格兰 123 和 321 state的抵抗力量，否则将遵循正常规则。请注意，这将完全覆盖指定状态下抵抗力量启动时的默认限定。

有用的脚本限定
这些脚本限定是在基础游戏中定义的，在 Mod 中实现以减少代码量可能很有用。作为脚本限定，所有这些都使用bool值作为参数。

脚本化限定：
名字	作用域	例	描述	笔记
can_ROOT_get_wargoal_on_THIS	国家	
can_ROOT_get_wargoal_on_THIS = yes
检查 ROOT 是否可以在当前作用域上获取战争目标。	若要评估为 true，当前作用域必须存在，而不是与 ROOT 共享阵营，并且不是 ROOT 的附庸政权。
is_free_or_subject_of_root	国家	
is_free_or_subject_of_root = yes
检查当前作用域是独立的还是 ROOT 的附庸政权。	
has_same_ideology	国家	
has_same_ideology = yes
检查当前作用域是否与 ROOT 具有相同的意识形态。	如果有自定义意识形态，则需要修改。相当于基础游戏意识形态。has_government = ROOT
is_enemy_ideology	国家	
is_enemy_ideology = yes
检查当前作用域是否具有被视为 ROOT 敌人的意识形态。	共产主义共产主义、民主民主和法西斯主义法西斯主义被认为是彼此的敌人。
has_ROOT_at_least_1_div_in_current_state_scope	state	
has_ROOT_at_least_1_div_in_current_state_scope = yes
检查 ROOT 在当前作用域中是否至少有一个部队。	
controls_or_subject_of	state	
controls_or_subject_of = yes
检查当前状态是由 ROOT 还是由 ROOT 的附庸政权控制。	
is_controlled_by_ROOT_or_ally	state	
is_controlled_by_ROOT_or_ally = yes
检查当前状态是否由 ROOT、ROOT 的附庸或与 ROOT 属于同一阵营的国家/地区控制。	
owns_or_subject_of	state	
owns_or_subject_of = yes
检查当前作用域是归 ROOT 还是 ROOT 的使用者所有。	
参考文献
 [模组] 模组成就 在模组
中写入成就文件的教程
 any_war_score如何工作？
 论坛：1356228/#post-26361808
 HOI4 开发日记 - 模组和特质
模组
文档	效果 • 限定 • 定义 • 修正 • 修正列表 • 作用域 • 本地化 • 操作 • 数据结构（旗标、事件定位条件、国家/地区标签别名、变量、数组）)
脚本	AI • AI 国策 • 自治状态 • 权力平衡 • 书签（场景） • 建筑物 • 角色和特质 • 化妆品标签 • 国家 • 部队 • 决议 • 装备 • 事件 • idea • 意识形态 • 国家国策 • 资源 • 脚本化 GUI • 科技和学说 • 单位
地图	地图 • 国家 • 供应区 • 战略区域
图形	界面 • 图形资源 • 实体 • 后期效果 • 粒子 • 字体
化妆品	肖像 • 姓名列表 • 音乐 • 声音
其他	控制台命令 • 故障排除 • 模组结构 • 模组
分类：1.12模组
切换侧边栏
导航菜单
页面讨论
阅读编辑编辑源代码查看历史

修饰 符
跳到导航跳到搜索
这是一个社区维护的维基。如果您发现错误，欢迎您修复它。

修正本质上是内部计算中使用的变量。但是，与定义不同，修正在任何修正块中都是动态可变的。通常，修饰剂通常用于创建易于逆转的一致且持久的效果。
每个修正具有完全相同的布局：。这会将指定的值添加到修正应用它的作用域的总值中。例如，假设没有其他修正将其更改为国家/地区，拥有并应用于国家/地区（可能在不同的修正块中）将导致总共比基本增益高出 +0.15 的政治点增益。由于修正的工作方式，值为 0 的修正将始终不执行任何操作。
修正的当前总值可以通过读取作为变量接收，例如。这适用于国家和state，但适用于将领，而是使用。modifier_name = 0.1political_power_gain = 0.2political_power_gain = -0.05modifier@modifier_nameset_variable = { my_var = modifier@political_power_gain }unit_modifier@modifier_nameleader_modifier@modifier_name


目录
1	应用修正
1.1	自建提示修改
2	动态修正
2.1	参数
2.2	例
2.3	添加动态修正
3	静态修正
3.1	全局修正
3.2	难度修正
3.3	关系修正
3.4	小地块修正
4	修正定义
4.1	例子
4.2	在变量中使用
5	修正列表
5.1	国家作用域
5.1.1	常规
5.1.2	政治
5.1.3	外交
5.1.4	自治
5.1.5	流亡政府
5.1.6	装备
5.1.7	燃料和供应
5.1.8	建筑物
5.1.9	抵抗和依从
5.1.10	情报
5.1.11	特工
5.1.12	.AI
5.1.13	战斗之外的军事
5.1.14	将领
5.1.15	一般战斗
5.1.16	陆战
5.1.17	海军入侵
5.1.18	海战
5.1.19	航空公司及其飞机
5.1.20	空战
5.1.21	目标修正
5.2	状态作用域
5.3	将领作用域
5.4	战略区域作用域
以下内容不是修正，即使它们相似：

研究加成允许对特定科技类别进行提升。相反，这是思想中的争论，可以以同样的方式应用于顾问和国家领导人特质，但不能应用于其他地方。
装备加成，例如降低建造装备原型的成本。同样，这是思想内部的论点，可以以同样的方式应用于顾问和国家领导人特质，但不能应用于其他地方。
外交修正，可用于改变国家内部的意见（包括贸易效果），在 /Hearts of Iron IV/common/opinion_modifiers/*.txt 文件中定义。
应用修正
应用修正的方法有很多种，但这些是主要的：

思想 - 主要包括但不限于民族精神和隐藏思想。这些是通过使用效果块（例如国家国策奖励）将修正添加到国家/地区的最简单方法，方法是使用 add_ideas 或add_timed_idea。这些仅适用于国家/地区。
动态修正 - 这类似于idea（显示在国家/地区的同一屏幕中），但它们接受变量，也可以应用于state和将领人。这些是向状态添加修正的主要方法。
性状：
国家领导人特质 - 这些可以添加到idea（包括功能相似的顾问）和国家领导人中，这将适用于国家。
将领特质 - 这些特质可以添加到将领中，并对领导本身或其单位施加效果。这些是向将领添加修正的主要方法。
静态修正：
全局修正 - 这些在应用时完全是硬编码的，例如用于稳定性和战争支持加成的修正。但是，这些可以在它们应用的内容中进行更改。
省级修正 - 这些是将修正应用于特定小地块的主要方法（如果不是唯一方法）。
关系修正 - 这是将目标修正从一个国家/地区应用于另一个国家/地区的唯一方法，而无需在目标修正块中指定特定的国家/地区标记。
每个修正都遵循分配数字的相同结构，例如支持修正的许多块中的以下格式：

modifier = {
    political_power_gain = 0.1
    disabled_ideas = 1
}
任何修正都不能具有非数值，包括必须为 1 才能产生任何效果的bool值。 请注意，修正不支持 if 语句。最接近的复制品是动态修正，它允许使用变量。

自建提示修改
修正块在其中支持块，该块可用于防止其中的修正显示在自建提示中。此外，可用于添加自定义本地化字符串，以作为修正之一显示在本地化中。组合起来，这将如下所示：hidden_modifier = { ... }custom_modifier_tooltip = localisation_key_tt

modifier = {
    hidden_modifier = {
        political_power_gain = 0.1
    }
    custom_modifier_tooltip = political_power_gain_tt
}
自定义修正自建提示不支持动态命令，其中包括使用方括号的任何命令。

动态修正
动态修正（在 /Hearts of Iron IV/common/dynamic_modifiers/*.txt 文件中定义）是一种应用接受变量的修正的类型。修正每天更新，除非使用force_update_dynamic_modifier效果强制刷新修正的效果。它们可以应用于国家和state，如果是后者，则必须为state定义变量，而不是为国家所有者或控制者定义变量。它们也可以应用于将领。

无法通过调试模式或控制台重新加载动态修正的定义，对其定义的任何更改都需要重新启动游戏才能在游戏中应用。

参数
图标决定用于动态修正的图标。该图标使用在界面文件夹中的 .gfx 文件中定义的子画面。如果未指定该图标，则该图标将被隐藏。
“启用”决定何时应用动态修正的修正。如果设置了动态修正，但设置为的国家/地区或state不符合要求，则其效果将不适用。可选。
remove_trigger将在满足限定时自动删除动态修正。可选。
如果在状态作用域的动态修正中设置为 true，attacker_modifier将另外使修正应用于虽然在动态修正的状态下不存在，但正在攻击位于该状态的敌人的师。可选，默认为 false。
修正作为列表直接放在动态修正中。

示例
dynamic_modifier_name = {
	icon = GFX_idea_unknown
	enable = { always = yes }
	remove_trigger = {
		NOT = {
			has_variable = var_name
		}
	}
	political_power_gain = var_name
	weekly_manpower = 1000
}
添加动态修正
动态修正是通过add_dynamic_modifier效果添加的。动态修正的典型添加如下所示：

add_dynamic_modifier = { modifier = dynamic_modifier_name }
由于动态修正没有分配的作用域，因此可以将相同的修正分配给一个国家、一个state、一个将领或同时分配给多个 - 这仅取决于执行效果的位置。add_dynamic_modifier

在 GUI 中，动态修正将占据以下位置（如果可见）：

对于一个国家，一个动态修正会出现在民族精神列表中，出现在常规精神之后。
对于一个状态，动态修正将显示在所选状态视图底部的特殊部分中，在 /Hearts of Iron IV/interface/countrystateview.gui 中标记。dynamic_modifiers_grid
添加动态修正时，还可以使其定时或使其使用不同的作用域作为变量的基础。例如，以下代码将dynamic_modifier_name应用于 GER 30 天，但变量将从 POL 读取：

GER = {
    add_dynamic_modifier = {
        modifier = dynamic_modifier_name
        scope = POL  # The modifier itself will be applied to GER, but the variables will be read off POL.
        days = 30
    }
}
特别是，假设dynamic_modifier_name是之前创建的示例动态修正，如果您这样做，那么作为此效果的结果分配给 GER 的动态修正将每天获得 0.3 的政治点增益。但是，如果动态修正将变量的作用域限定为 ROOT，则 将完成。set_variable = { POL.var_name = 0.3 }political_power_gain = ROOT.var_nameset_variable = { GER.var_name = 0.3 }

动态修正通过 remove_dynamic_modifier 删除，措辞类似于 add_dynamic_modifier： 。如果在添加时为动态修正分配了作用域，则在删除它时也必须指定该作用域。remove_dynamic_modifier = { modifier = dynamic_modifier_name }

使用变量的修正不会显示在 add_dynamic_modifier 的自建提示中，而设置为静态值的修正将显示。虽然这可能会使动态修正在仅读取自建提示时看起来已损坏，但添加后实际上并非如此。在这种情况下，可以更改效果的自建提示，并隐藏添加动态修正的效果。

静态修正
静态修正存储在 /Hearts of Iron IV/common/modifiers/*.txt 文件中，其中每个代码块都是一个修正块，名称是静态修正的 ID。静态修正主要有 4 类：

全局修正
全局修正由硬编码的游戏功能应用。它们的名称不能更改，因为代码在内部使用它们，但它们的效果可以编辑。全局修正的例子是对非核心国家的惩罚或稳定和战争支持的效果。

难度修正
这些应用于 /Hearts of Iron IV/common/difficulty_settings/*.txt 文件中。这在菜单中用于在游戏规则内在游戏开始时加强特定国家。如果未定义难度设置，则菜单将无法打开。
每个难度设置都定义为一个块，该块必须位于总体块内。以下参数可以进入难度设置：difficulty_setting = { ... }difficulty_settings = { ... }

key = localisation_key是用作难度设置名称的本地化键，因为它显示在游戏规则菜单中/
modifier = static_modifier设置此难度设置要使用的静态修正。
countries = { ... }是以空格分隔的国家/地区标签列表，难度设置适用于这些标签。
multiplier = 2.0是静态修正在最大值处乘以的值。由于每个难度规则有 5 个级别，包括 0，因此每个级别分为四分之一，第二个是四分之一，第三个是一半，第四个是四分之三。
难度设置文件的示例如下：

difficulty_settings = {
    difficulty_setting = {
        key = difficulty_weaken_GER
        modifier = weaken_country
        countries = { GER }
        multiplier = 2.0
    }
    difficulty_setting = {
        key = difficulty_weaken_SOV
        modifier = weaken_country
        countries = { SOV UKR BLR }
        multiplier = 2.0
    }
}
关系修正
不要与外交修正混淆。关系修正将目标修正从一个国家/地区应用于另一个国家/地区，当限定达到时会自动删除。ROOT 是应用修正的国家/地区，FROM 是目标。一个例子是：

test_relation_modifier = {
	valid_relation_trigger = {
		FROM = {
			has_government = ROOT		# same ruling party as ROOT
		}
	}
	compliance_gain = 0.2				# FROM's states have 20% more compliance gain when controlled by ROOT
}
它们可以通过add_relation_modifier效果添加，如下所示：

add_relation_modifier = {
	target = TAG
	modifier = test_relation_modifier
}
remove_relation_modifier的工作方式类似，可以删除它们。

小地块修正
省修正将修正应用于特定省而不是state。它们可以通过add_province_modifier效果应用，并用remove_province_modifier去除。有关如何使用这些内容的更多信息，请参阅效果页面。
示例定义如下所示

mod_modifier = { 
	army_speed_factor = -0.5
	army_defence_factor = 0.5
	dig_in_speed_factor = 0.5
}
许多state作用域的修正也将在小地块作用域内工作。为了在GUI中制作GFX，你首先需要编辑/Hearts of Iron IV/interface/countrystateview.gui。图标必须在custom_icon_container内部定义，与其他示例类似。示例定义如下所示

iconType = {
	name = "<modifier name>_icon"
	spriteType = "GFX_modifiers_<modifier name>_icon"
	position = { x = 0 y = 0 }
	Orientation = "UPPER_LEFT"			
}
您定义的GFX代码类型需要在 /Hearts of Iron IV/interface/*.gfx 中定义，类似于此示例：

spriteType = {
	name = "GFX_modifiers_<modifier name>_icon"
	textureFile = "gfx/interface/modifiers_<modifier name>_icon.dds"
}
修正定义
修正定义允许创建自定义修正，当您希望使用它时，可以将其作为变量进行访问。定义后，它们的功能完全像一个新变量，可以通过相同的过程作为变量读取。默认情况下，它们不会产生任何效果，并且仅用作使用修正块以加法方式更改变量值的一种方式。
每个修正标记在 /Hearts of Iron IV/common/modifier_definitions/*.txt 文件中定义为单独的代码块，其中代码块的名称用作修正定义的 ID。其中可以包含以下参数：modifier@modifier_name

color_type = good决定修正本身值的颜色。有三个值：、 和 。 永久为黄色，而正值变为绿色，负值变为红色。 是 的反转。goodbadneutralneutralgoodbadgood
value_type = percentage决定数字在自建提示中的显示方式。可以将此参数设置为以下值：
number将显示修正的确切值。0.02 将显示为“修正定义：0.02”。
percentage将使修正在从 0 到 1 的作用域内显示为百分比。0.2 将显示为“修正令牌：20%”。
percentage_in_hundred将使修正在 0 到 100 的作用域内显示为百分比。10 将显示为“修正令牌：10%”。
yes_no显示为bool值：大于 1 的任何值将显示为 ，而 0 将显示为 。yesno
precision = 1决定在自建提示中的句点之后将显示多少个数字。例如，如果设置为 1，则自建提示将显示 0.341，就好像它是 0.3 一样。请注意，游戏本身不支持超过 3 个十进制数字，因此它不能大于 3。
postfix决定在自建提示中修正的值之后添加的内容。允许的值为“无”（默认值）、“天”、“小时”和“每天”。
category决定修正的类别。默认情况下，类别为“全部”，这使得它位于每个类别中。某些自建提示仅当修正属于特定类别时才会显示修正。可以通过一个接一个地定义同一个修正定义来设置多个类别。
允许的值为“无”、“全部”、“国家”、“state”、“unit_leader”、“陆军”、“海军”、“空中”、“和平”、“政治”、“ai”、“防御”、“侵略”、“war_production”、“military_advancements”、“military_equipment”、“自治”、“government_in_exile”和“intelligence_agency”。
修正定义的 ID 还用作根据当前打开的语言更改修正名称所需的本地化键。

示例
modifier_definition_example = {
	color_type = good
	value_type = number
	precision = 1
	postfix = daily
	
	category = country
	category = state
}
modifier_definition_example_2 = {
    color_type = bad
    value_type = percentage
}
在变量中使用
修正定义的功能是修改游戏变量的值，该值可以被其他变量读取。您可以通过执行 将变量设置为等于当前作用域内同一修正令牌的所有值的总和。此示例将var_name设置为等于 modifier_token_name 的总值。set_variable = { var_name = modifier@modifier_token_name }

请注意，与国家和state不同，将领在其作用域内使用leader_modifier@modifier_definition_name或unit_modifier@modifier_definition_name。

修正列表
修正列表可能已过时。完整但未排序的修正列表可以在 /Hearts of Iron IV/documentation/modifiers_documentation.html 或 /Hearts of Iron IV/documentation/modifiers_documentation.md 中找到。

国家作用域
一般
常规修正：
名字	效果	例子	修正类型	笔记	已添加版本
monthly_population	改变国家拥有的state的月度人口增长。	
monthly_population = 0.5
百分比。	不适用于状态。	1.0
nuclear_production	能够生产核武器。	
nuclear_production = 1
bool值（仅 1）。		1.0
nuclear_production_factor	改变核武器的生产速度。	
nuclear_production_factor = 0.5
百分比。	在状态作用域内工作，在这种情况下，它将应用于所有者。	1.0
research_sharing_per_country_bonus	科技共享时更改每个国家/地区研究速度的奖励。	
research_sharing_per_country_bonus = 0.5
平。		1.3
research_sharing_per_country_bonus_factor	当科技共享时，每个国家/地区的研究速度奖励将百分比更改为百分比。	
research_sharing_per_country_bonus_factor = 0.5
百分比。		1.3
research_speed_factor	改变研究速度。	
research_speed_factor = 0.5
百分比。		1.0
local_resources_factor	资源开采效率。修改可用资源量。	
local_resources_factor = 0.3
百分比。		1.0
surrender_limit	改变国家需要失去控制才能投降的胜利点数百分比。	
surrender_limit = 0.1
百分比。	越大，投降一个国家所需的胜利点就越多。	1.0
max_surrender_limit_offset	控制一个国家的最大投降进度。	
max_surrender_limit_offset = 0.3
平。	例如，0.4 表示无论surrender_limit如何，国家都不能要求超过 60% 的胜利点投降。	1.9
forced_surrender_limit	改变国家需要失去控制才能投降的胜利点数百分比，绕过最小或最高。	
forced_surrender_limit = 0.1
百分比。	越大，投降一个国家所需的胜利点就越多。在应用最小值和最大值后应用，从而可以使其低于 20% 或高于 max_surrender_limit_offset 定义的最大值。	1.0
政治
政治修正：
名字	效果	例子	修正类型	笔记	已添加版本
min_export	将资源量更改为市场。	
min_export = 0.5
平。		1.0
trade_opinion_factor	使AI更有可能从这个国家购买资源。	
trade_opinion_factor = 0.5
百分比。		1.0
defensive_war_stability_factor	将惩罚更改为参与防御战争所引起的稳定性。	
defensive_war_stability_factor = 0.5
百分比。		1.0
disabled_ideas	禁用手动更改idea（包括部长和法律）。	
disabled_ideas = 1
bool值（仅 1）。		1.9
<idea|角色槽>_cost_factor	更改政治点的成本以在指定的插槽中添加idea或角色。	
political_advisor_cost_factor = 0.5
百分比。	idea插槽可以在公共/idea_tags中找到。需要事先加载该类别的idea或角色。	1.4
<账本>_advisor_cost_factor	更改政治点成本以添加分配了指定军事分类账的顾问。	
air_advisor_cost_factor = 0.5
百分比。	分类账被分配给共同/idea_tags和共同/idea的类别和字符。修正适用于空军、陆军和海军。	1.11
unit_leader_as_advisor_cp_cost_factor	改变指挥权的成本，将将领变成顾问。	
unit_leader_as_advisor_cp_cost_factor = 0.5
百分比。		1.11
improve_relations_maintain_cost_factor	改变政治点的成本以维持关系的改善。	
improve_relations_maintain_cost_factor = 0.5
百分比。		1.4
female_random_country_leader_chance	将随机生成的国家领导人的几率更改为女性。	
female_random_country_leader_chance = 0.3
百分比。		1.0
offensive_war_stability_factor	修改参与攻击性战争所受到的稳定惩罚。	
offensive_war_stability_factor = 0.3
百分比。		1.0
party_popularity_stability_factor	修正执政党的声望所获得的稳定性。	
party_popularity_stability_factor = 0.3
百分比。		1.0
political_power_cost	政治点的日常成本。	
political_power_cost = 0.3
平。		1.0
political_power_gain	修改政治点的每日收益。	
political_power_gain = 0.3
平。		1.0
political_power_factor	按百分比修改政治点的每日收益。	
political_power_factor = 0.3
百分比。		1.0
stability_factor	修改国家的稳定。	
stability_factor = 0.3
平。		1.0
stability_weekly	修改国家每周的稳定收益。	
stability_weekly = 0.01
平。		1.0
stability_weekly_factor	按百分比修改国家的每周稳定性增益。	
stability_weekly_factor = 0.3
百分比。		1.0
war_stability_factor	修改因处于战争状态而造成的稳定性损失。	
war_stability_factor = 0.3
百分比。		1.0
war_support_factor	修改对国家的战争支持。	
war_support_factor = 0.3
平。		1.0
war_support_weekly	修改国家每周的战争支持收益。	
war_support_weekly = 0.01
平。		1.0
war_support_weekly_factor	按百分比修改该国的每周战争支持收益。	
war_support_weekly_factor = 0.3
百分比。		1.0
weekly_casualties_war_support	根据国家遭受的伤亡情况修改每周的战争支援收益。	
weekly_casualties_war_support = 0.006
百分比。		1.12
weekly_convoys_war_support	根据被击沉的车队数量修改该国的每周战争支持收益。	
weekly_convoys_war_support = 0.006
百分比。		1.12
weekly_bombing_war_support	根据敌人对其各state的轰炸来修改该国的每周战争支持收益。	
weekly_bombing_war_support = 0.006
百分比。		1.12
drift_defence_factor	意识形态漂移防御。	
drift_defence_factor = 0.3
百分比。		1.0
power_balance_daily	每天按指定量推动权力平衡。	
power_balance_daily = 0.01
平。	正值导致它被向右推，而负值会导致它被向左推。	1.12
power_balance_weekly	每周按指定量推动权力平衡。	
power_balance_weekly = 0.01
平。	正值导致它被向右推，而负值会导致它被向左推。	1.12
<意识形态>_drift	指定意识形态的每日收益。	
communism_drift = 0.03
平。		1.0
<意识形态>_acceptance	AI接受来自特定意识形态国家的报价的可能性。	
fascism_acceptance = 50
平。		1.0
外交
外交修饰语：
名字	效果	例子	修正类型	笔记	已添加版本
civil_war_involvement_tension	改变干预盟友内战所需的世界紧张度。	
civil_war_involvement_tension = 0.5
平。		1.0
enemy_declare_war_tension	改变敌人为我们的战争目标辩护所需的世界紧张度。	
enemy_declare_war_tension = 0.5
平。		1.0
enemy_justify_war_goal_time	改变敌人证明对我们进行战争目标所需的时间。	
enemy_justify_war_goal_time = 0.5
百分比。	这也改变了政治点的成本。	1.0
faction_trade_opinion_factor	改变通过阵营成员之间的交易获得的意见收益。	
faction_trade_opinion_factor = 0.5
百分比。		1.0
generate_wargoal_tension	改变必要的紧张度，让我们产生战争目标。	
generate_wargoal_tension = 0.3
平。		1.0
guarantee_cost	国家的政治点成本，以保证另一个国家。	
guarantee_cost = 0.3
百分比。		1.4
guarantee_tension	必要的世界紧张度，使该国保证另一个国家。	
guarantee_tension = 0.3
平。		1.0
join_faction_tension	该国加入阵营所必需的世界紧张度。	
join_faction_tension = 0.3
平。		1.0
justify_war_goal_time	证明战争目标合理性所需的时间。	
justify_war_goal_time = 0.3
百分比。	这也改变了政治点的成本。	1.0
justify_war_goal_when_in_major_war_time	在与主要国家的战争中证明战争目标合理性所需的时间。	
justify_war_goal_when_in_major_war_time = 0.3
百分比。	这也改变了政治点的成本。	1.0
lend_lease_tension	该国租借的必要世界紧张度。	
lend_lease_tension = 0.3
平。		1.0
opinion_gain_monthly	改变“改善关系”外交行动的意见。	
opinion_gain_monthly = 5
平。		1.0
opinion_gain_monthly_factor	将“改善关系”外交行动的意见收益改变一定百分比。	
opinion_gain_monthly_factor = 0.3
百分比。		1.0
opinion_gain_monthly_same_ideology	改变意见从“改善关系”外交行动中获得相同意识形态的国家。	
opinion_gain_monthly_same_ideology = 5
平。		1.0
opinion_gain_monthly_same_ideology_factor	改变意见从“改善关系”外交行动中获得相同意识形态的国家的百分比。	
opinion_gain_monthly_same_ideology_factor = 0.3
百分比。		1.0
request_lease_tension	该国要求租借的必要世界紧张度。	
request_lease_tension = 0.3
百分比。		1.9
annex_cost_factor	修改胜利点的成本，以在和平协议中吞并各state。	
annex_cost_factor = 0.1
百分比。		1.0
puppet_cost_factor	修改每个state的胜利点数成本，以和平协议中的傀儡国家。	
puppet_cost_factor = 0.1
百分比。		1.0
send_volunteer_divisions_required	更改派遣志愿者所需的部队数量。	
send_volunteer_divisions_required = -0.3
百分比。		1.0
send_volunteer_factor	按百分比更改国家/地区可以作为志愿者派遣的部队数量。	
send_volunteer_factor = 0.3
百分比。		1.0
send_volunteer_size	更改国家/地区可以作为志愿者派遣的师数。	
send_volunteer_size = 5
平。		1.0
send_volunteers_tension	改变该国派遣志愿者所需的世界紧张度。	
send_volunteers_tension = -0.1
平。		1.0
air_volunteer_cap	更改您可以作为志愿者派遣的空军数量。	
air_volunteer_cap = 100
平。		1.5
embargo_threshold_factor	改变必要的世界紧张度水平，以便能够禁运一个国家。	
embargo_threshold_factor = 0.2
百分比。		1.12
embargo_cost_factor	改变政治点的成本以发送禁运。	
embargo_cost_factor = 0.3
百分比。		1.12
自治
自治相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
autonomy_gain	每天获得自主权。	
autonomy_gain = 0.5
平。	正数会增加总自主权，这意味着SUBJECT可以更快地自由。负数会降低总自主性，这意味着领主可以更快地吞并人力奴隶。	1.3
autonomy_gain_global_factor	修改附庸获得的所有自主权。	
autonomy_gain_global_factor = 0.5
百分比。		1.4
subjects_autonomy_gain	每天在我们的科目中获得自主权。	
subjects_autonomy_gain = 0.5
平。		1.3
autonomy_gain_ll_to_overlord	修改从租借到主世界的自主权。	
autonomy_gain_ll_to_overlord = 0.5
平。		1.3
autonomy_gain_ll_to_overlord_factor	将租借给领主的自治权获得修改一定百分比。	
autonomy_gain_ll_to_overlord_factor = 0.5
百分比。		1.3
autonomy_gain_ll_to_subject	修改从租借到附庸的自主权丧失。	
autonomy_gain_ll_to_subject = 0.5
平。		1.3
autonomy_gain_ll_to_subject_factor	将租借给附庸的自主权丧失修改为百分比。	
autonomy_gain_ll_to_subject_factor = 0.5
百分比。		1.3
autonomy_gain_trade	修改从领主与附庸交易中获得的自主权。	
autonomy_gain_trade = 0.5
平。		1.3
autonomy_gain_trade_factor	将领主与附庸交易获得的自治权修改为一定百分比。	
autonomy_gain_trade_factor = 0.5
百分比。		1.3
autonomy_gain_warscore	修改从获得战争分数的附庸获得的自主性。	
autonomy_gain_warscore = 0.5
平。		1.3
autonomy_gain_warscore_factor	将获得战争分数的附庸获得的自主性修改为百分比。	
autonomy_gain_warscore_factor = 0.5
百分比。		1.3
autonomy_manpower_share	修改领主可以从附庸政权使用的人手数量。	
autonomy_manpower_share = 0.5
百分比。		1.3
can_master_build_for_us	使领主能够在附庸政权中建立。	
can_master_build_for_us = 1
bool值（仅 1）。		1.3
cic_to_overlord_factor	修改附庸的民用工业进入领主的数量。	
cic_to_overlord_factor = 0.3
百分比。		1.3
mic_to_overlord_factor	修改附庸的军工数量，进入领主。	
mic_to_overlord_factor = 0.3
百分比。		1.3
extra_trade_to_overlord_factor	修改领主可以通过交易获得的附庸资源数量。	
extra_trade_to_overlord_factor = 0.3
百分比。		1.3
license_subject_master_purchase_cost	修改领主许可生产的成本。	
license_subject_master_purchase_cost = 0.3
百分比。		1.4
master_build_autonomy_factor	将附庸状态中领主建筑的自主性丧失修改百分比。	
master_build_autonomy_factor = 0.3
百分比。		1.3
master_ideology_drift	改变领主意识形态在该国的日常收益。	
master_ideology_drift = 0.03
平。		1.6
overlord_trade_cost_factor	修改了平民工厂中领主和附庸之间的贸易成本。	
overlord_trade_cost_factor = -0.3
百分比。		1.3
流亡政府
流亡政府相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
dockyard_donations	捐赠的造船厂数量。	
dockyard_donations = 2
平。		1.6
industrial_factory_donations	捐赠的民用工厂数量。	
industrial_factory_donations = 2
平。		1.6
military_factory_donations	捐赠的军工厂数量。	
military_factory_donations = 2
平。		1.6
exile_manpower_factor	给予东道主国的人力。	
exile_manpower_factor = 0.5
百分比。		1.6
exiled_government_weekly_manpower	每周给予东道主国的人力数量。	
exiled_government_weekly_manpower = 100
百分比。		1.11
legitimacy_daily	改变每天获得的合法性量。	
legitimacy_daily = 1
平。		1.6
legitimacy_gain_factor	将每天获得的合法性量改变一个百分比。	
legitimacy_gain_factor = 1
百分比。		1.9
装备
装备相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
equipment_capture	更改在战斗中缴获的装备数量。	
equipment_capture = 100
平。		1.0
equipment_capture_factor	将战斗中捕获的装备数量按百分比更改。	
equipment_capture_factor = 0.5 
百分比。		1.0
equipment_conversion_speed	更改装备的转换速度。	
equipment_conversion_speed = 0.5 
百分比。		1.0
equipment_upgrade_xp_cost	更改升级军事装备的经验值。	
equipment_upgrade_xp_cost = 0.5 
百分比。		1.0
license_purchase_cost	按百分比更改许可装备的成本。	
license_purchase_cost = 0.5 
百分比。		1.4
license_purchase_cost_factor	按百分比更改许可装备的成本。	
license_purchase_cost_factor = 0.5 
百分比。	允许的装备类型包括anti_tank_eq、artillery_eq、infantry_eq和light_tank_eq。可用作目标修正。	1.4
license_purchase_cost_factor	按百分比更改许可装备的成本。	
license_purchase_cost_factor = 0.5 
百分比。	允许的类别是空军、装甲、步兵和海军。可用作目标修正。	1.4
license_tech_difference_speed	将许可装备的生产惩罚按科技差异更改百分比。	
license_tech_difference_speed = 0.5 
百分比。	还允许将类别指定为license_<类别>_tech_difference_speed_factor。允许的类别包括anti_tank_eq、artillery_eq、infantry_eq和light_tank_eq。这是在 1.6 中添加的。可用作目标修正。	1.4
license_production_speed	按百分比更改许可装备的生产速度。	
license_production_speed = 0.5 
百分比。	可用作目标修正。	1.4
license_<类别>_production_speed_factor	按百分比更改许可装备的生产速度。	
license_infantry_eq_production_speed_factor = 0.5 
百分比。	允许的类别包括anti_tank_eq、artillery_eq、infantry_eq和light_tank_eq。可用作目标修正。	1.6
production_cost_max_<船型>	修改船型的最大成本。	
production_cost_max_ship_hull_light = 0.3
百分比。	基础游戏中允许的船只类型：护航、ship_hull_carrier、ship_hull_cruiser、ship_hull_heavy、ship_hull_light ship_hull_submarine	1.6
production_factory_efficiency_gain_factor	生产效率增长。	
production_factory_efficiency_gain_factor = 0.5 
百分比。		1.0
production_factory_max_efficiency_factor	生产效率上限。	
production_factory_max_efficiency_factor = 0.5 
百分比。		1.0
production_factory_start_efficiency_factor	生产效率基础。	
production_factory_start_efficiency_factor = 0.5 
百分比。		1.0
production_lack_of_resource_penalty_factor	缺乏资源惩罚。	
production_lack_of_resource_penalty_factor = 0.5 
百分比。		1.0
floating_harbor_duration	修改浮动港口的持续时间。	
floating_harbor_duration = 2
平。		1.11
floating_harbor_range	修改浮动港口的范围。	
floating_harbor_range = 2
平。		1.11
floating_harbor_supply	修改浮动港口的供应。	
floating_harbor_supply = 2
平。		1.11
railway_gun_bombardment_factor	修改对铁路炮的轰炸。	
railway_gun_bombardment_factor = 0.3
百分比。		1.11
燃料和供应
与供应相关的修正：
名字	效果	例子	修正类型	笔记	已添加版本
base_fuel_gain	改变燃料的每日基本增益。	
base_fuel_gain = 100
平。		1.6
base_fuel_gain_factor	按百分比更改燃料的基本每日增益。	
base_fuel_gain_factor = 0.5
百分比。		1.6
fuel_cost	更改燃料的每日成本。	
fuel_cost = 100
平。		1.6
fuel_gain	改变我们受控机油的每日燃料增益。	
fuel_gain = 100
平。		1.6
fuel_gain_factor	将我们受控机油的燃料每日增益改变一定百分比。	
fuel_gain_factor = 100
百分比。		1.6
fuel_gain_from_states	改变燃料的每日增益。	
fuel_gain_from_states = 100
平。	炼油厂使用此修正。	1.6
fuel_gain_factor_from_states	按百分比更改燃料的每日增益。	
fuel_gain_factor_from_states = 0.5
百分比。	修改炼油厂的燃料增益。	1.6
max_fuel	更改您可以拥有的最大燃料量。	
max_fuel = 100
平。		1.6
max_fuel_factor	按百分比更改您可以拥有的最大燃料量。	
max_fuel_factor = 0.3 
百分比。		1.6
army_fuel_capacity_factor	修改单个单位在用完之前可以存储的燃料量。	
army_fuel_capacity_factor = 0.3
百分比。		1.6
army_fuel_consumption_factor	修改军队消耗燃料的速度。	
army_fuel_consumption_factor = 0.3
百分比。		1.6
air_fuel_consumption_factor	修改空军消耗燃料的速率。	
air_fuel_consumption_factor = 0.5
百分比。		1.6
navy_fuel_consumption_factor	修改海军消耗燃料的速率。	
navy_fuel_consumption_factor = 0.3
百分比。		1.6
supply_factor	修改军队的供应总量。	
supply_factor = 0.3
百分比。		1.11
supply_combat_penalties_on_core_factor	修改军队处于核心状态时供应不足的惩罚。	
supply_combat_penalties_on_core_factor = 0.3
百分比。		1.11
supply_consumption_factor	修改军队消耗补给的速率。	
supply_consumption_factor = 0.3
百分比。		1.0
no_supply_grace	修改无供应装备的宽限期。	
no_supply_grace = 120
平。		1.0
out_of_supply_factor	减少单位在补给用完时受到的惩罚。	
out_of_supply_factor = 0.2
百分比。		1.0
磨损	修改军队的消耗。	
attrition = 0.3
百分比。	也可以在state或省使用。	1.0
unit_upkeep_attrition_factor	修改装备维护。	
unit_upkeep_attrition_factor = 0.3
百分比。		1.0
naval_attrition	修改海军单位遭受的损耗。	
naval_attrition = 0.3
百分比。		1.6
heat_attrition	改变由于热量引起的磨损。	
heat_attrition = 0.5
平。		1.3
heat_attrition_factor	将热量引起的损耗改变百分比。	
heat_attrition_factor = 0.5
百分比。		1.3
winter_attrition	改变由于冬季造成的损耗。	
winter_attrition = 0.5
平。		1.3
winter_attrition_factor	将冬季造成的损耗改变百分比。	
winter_attrition_factor = 0.5
百分比。		1.3
extra_marine_supply_grace	改变给予海军陆战队的补给增额。	
extra_marine_supply_grace = 96
平。		1.0
extra_paratrooper_supply_grace	改变给予伞兵的补给增额。	
extra_paratrooper_supply_grace = 96
平。		1.0
special_forces_no_supply_grace	更改特种部队的补给宽限期。	
special_forces_no_supply_grace = 120
平。		1.0
special_forces_out_of_supply_factor	改变对特种部队供应不足的惩罚。	
special_forces_out_of_supply_factor = 0.3
百分比。		1.0
truck_attrition	供应卡车遭受的损耗变化。	
truck_attrition = 3
平。		1.11
truck_attrition_factor	修改供应卡车遭受的损耗。	
truck_attrition_factor = 0.3
百分比。		1.11
建筑物
建筑相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
production_speed_buildings_factor	改变所有建筑物的建造速度。	
production_speed_buildings_factor = 0.5 
百分比。		1.0
production_speed_<建筑>_factor	更改特定建筑物的建造速度。	
production_speed_industrial_complex_factor = 0.5 
百分比。		1.0
civilian_factory_use	使用指定数量的民用工厂作为特殊项目。	
civilian_factory_use = 3
平。	需要唤醒老虎唤醒老虎DLC或抵抗运动抵抗DLC具有任何效果。	1.5
consumer_goods_factor	更改用于消费品的工厂百分比。	
consumer_goods_factor = 0.1
平。		1.0
conversion_cost_civ_to_mil_factor	更改将民用工厂转换为军工厂的成本。	
conversion_cost_civ_to_mil_factor = 0.4
百分比。		1.5
conversion_cost_mil_to_civ_factor	更改将军工厂转换为民用工厂的成本。	
conversion_cost_mil_to_civ_factor = 0.4
百分比。		1.5
global_building_slots	改变我们每个state的建筑插槽数量。	
global_building_slots = 1
平。		1.0
global_building_slots_factor	以百分比更改我们每个state的建筑插槽数量。	
global_building_slots_factor = 0.3
百分比。		1.0
industrial_capacity_dockyard	船坞输出。	
industrial_capacity_dockyard = 0.3
百分比。		1.3.3
industrial_capacity_factory	军工厂产量。	
industrial_capacity_factory = 0.3
百分比。		1.0
industry_air_damage_factor	我们的工厂因空袭而受到的损失。	
industry_air_damage_factor = 0.3
百分比。		1.0
industry_free_repair_factor	更改建筑物在没有分配工厂的情况下自行修复的速度。	
industry_free_repair_factor = 0.3
百分比。		1.0
industry_repair_factor	更改建筑物的修复速度。	
industry_repair_factor = 0.3
百分比。		1.0
line_change_production_efficiency_factor	生产效率保持。	
line_change_production_efficiency_factor = 0.3
百分比。		1.0
production_oil_factor	合成油增益。	
production_oil_factor = 0.5 
百分比。		1.0
repair_speed_<建筑>_factor	更改特定建筑物的修复速度。	
repair_speed_arms_factory_factor = 0.5 
百分比。		1.0
supply_node_range	增加供电节点的有效作用域。	
supply_node_range = 0.1
百分比。		1.11
static_anti_air_damage_factor	修改防空建筑对飞机造成的伤害。	
static_anti_air_damage_factor = 0.1
百分比。		1.0
static_anti_air_hit_chance_factor	修改防空建筑击中敌机的几率。	
static_anti_air_hit_chance_factor = 0.1
百分比。		1.0
tech_air_damage_factor	修改敌方防空建筑对该国飞机造成的伤害。	
tech_air_damage_factor = 0.1
百分比。		1.0
抵抗与依从
抵抗力量相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
compliance_growth_on_our_occupied_states	改变国家受控state的合规性增长速度。	
compliance_growth_on_our_occupied_states = 0.5
百分比。		1.9
no_compliance_gain	禁用我们受控状态的合规性增益。	
no_compliance_gain = 1
bool值（仅 1）。	也可以在状态作用域内使用。	1.9
required_garrison_factor	改变我们占领state所需的驻军。	
required_garrison_factor = 0.5
百分比。	也可以在状态作用域内使用。	1.9
resistance_activity	改变抵抗活动在我们占领的state发生的机会。	
resistance_activity = 0.5
百分比。		1.9
resistance_damage_to_garrison_on_our_occupied_states	改变对我们占领state的驻军的抵抗伤害。	
resistance_damage_to_garrison_on_our_occupied_states = 0.5
百分比。		1.9
resistance_decay_on_our_occupied_states	改变我们占领国家的抵抗衰减。	
resistance_decay_on_our_occupied_states = 0.5
百分比。		1.9
resistance_growth_on_our_occupied_states	改变我们占领state的抵抗力量增长速度。	
resistance_growth_on_our_occupied_states = 0.5
百分比。		1.9
resistance_target_on_our_occupied_states	改变我们占领state的抵抗目标。	
resistance_target_on_our_occupied_states = 0.5
百分比。		1.9
resistance_target	改变我们占领的外国的抵抗目标	
resistance_target = 0.5
百分比		1.9
情报
与情报相关的修正：
名字	效果	例子	修正类型	笔记	已添加版本
agency_upgrade_time	更改升级代理所需的时间	
agency_upgrade_time = 0.5
百分比。		1.9
解密	改变国家的解码能力。	
decryption = 1
平。	仅适用于禁用抵抗 DLC 的情况抵抗运动。	1.0
decryption_factor	按百分比更改国家的解码能力。	
decryption_factor = 0.5
百分比。	仅适用于禁用抵抗 DLC 的情况抵抗运动。	1.0
加密	更改国家/地区的加密功能。	
encryption = 1
平。	仅适用于禁用抵抗 DLC 的情况抵抗运动。	1.0
encryption_factor	按百分比更改国家/地区的加密功能。	
encryption_factor = 0.5
百分比。	仅适用于禁用抵抗 DLC 的情况抵抗运动。	1.0
<类型>_intel_decryption_bonus	向指定的情报添加密码奖励。	
civilian_intel_decryption_bonus = 0.5
百分比。	类型有：空军、陆军、民用、海军。	1.9
<类型>_intel_factor	修改您收到的指定类型的情报。	
navy_intel_factor = 0.5
百分比。	类型有：空军、陆军、民用、海军。	1.9
<类型>_intel_to_others	更改其他国家/地区将收到的指定类型的英特尔数量。	
civilian_intel_to_others = 0.5
百分比。	类型有：空军、陆军、民用、海军。	1.9
female_random_operative_chance	将随机生成的特工变为女性的几率改变。	
female_random_operative_chance = 0.3
百分比。		1.9.1
foreign_subversive_activites	改变外国颠覆活动的效率。	
foreign_subversive_activites = 0.3
百分比。		1.9
intel_network_gain	改变英特尔网络强度的增益。	
intel_network_gain = 1
平。	也可以在状态作用域内使用。	1.9
intel_network_gain_factor	将英特尔网络强度的增益按百分比更改。	
intel_network_gain_factor = 0.5
百分比。	也可以在状态作用域内使用。	1.9
subversive_activites_upkeep	改变颠覆活动的成本。	
subversive_activites_upkeep = 0.5
百分比。		1.0
operation_cost	更改运营成本。	
operation_cost = 0.5
百分比。	由块的操作动态创建。每个基础游戏操作都使用这个来修改操作成本。cost_modifiers = { ... }	1.9
operation_outcome	改变运营效率。	
operation_outcome = 0.5
百分比。	由块的操作动态创建。每个基础游戏操作都使用这个来修改操作的结果几率。outcome_modifiers = { ... }	1.9
operation_risk	改变操作风险。	
operation_risk = 0.5
百分比。	由块的操作动态创建。每个基础游戏操作都使用这个来修改操作风险。risk_modifiers = { ... }	1.9
<操作>_cost	更改指定操作的成本。	
operation_infiltrate_cost = 0.5
百分比。	操作在 /Hearts of Iron IV/common/operations/*.txt 中定义。由块的操作动态创建。cost_modifiers = { ... }	1.9
<操作>_outcome	更改指定操作的效率。	
operation_coup_government_outcome = 0.5
百分比。	操作在 /Hearts of Iron IV/common/operations/*.txt 中定义。由块的操作动态创建。请注意，target_sabotage使用target_sabotage_factor而不是target_sabotage_outcome。outcome_modifiers = { ... }	1.9
<操作>_risk	更改指定操作的风险。	
operation_make_resistance_contacts_risk = 0.5
百分比。	操作在 /Hearts of Iron IV/common/operations/*.txt 中定义。由块的操作动态创建。risk_modifiers = { ... }	1.9
<使命>_factor	修改指定任务的效果。	
boost_ideology_mission_factor = 0.5
百分比。	类型包括：boost_ideology_mission、boost_resistance、control_trade_mission、diplomatic_pressure_mission、propaganda_mission root_out_resistance_effectiveness。	1.9
commando_trait_chance_factor	修改特工在被雇佣时获得突击队特性的几率。	
commando_trait_chance_factor = 0.5
百分比。		1.9
crypto_department_enabled	启用加密部队。	
crypto_department_enabled = 1
bool值（仅 1）。		1.9
crypto_strength	修改加密级别。	
crypto_strength = 1
平。	抵抗运动抵抗运动已启用 DLC。	1.9
decryption_power	修改解密权限。	
decryption_power = 1
平。	抵抗运动抵抗运动已启用 DLC。	1.9
decryption_power_factor	按百分比修改解密能力。	
decryption_power_factor = 0.3
百分比。	抵抗运动抵抗运动已启用 DLC。	1.9
defense_impact_on_blueprint_stealing	修改敌方防御对蓝图窃取行动的效果。	
defense_impact_on_blueprint_stealing = 0.3
百分比。		1.9
intel_from_combat_factor	修改从战斗中获得的情报。	
intel_from_combat_factor = 0.3
百分比。		1.9
intel_from_operatives_factor	修改从特工和渗透资产中获得的情报。	
intel_from_operatives_factor = 0.3
百分比。		1.9
intel_network_gain	修改情报网络增益。	
intel_network_gain = 0.3
平。		1.9
intel_network_gain_factor	按百分比修改情报网络增益。	
intel_network_gain_factor = 0.3
百分比。		1.9
intelligence_agency_defense	修改反情报。	
intelligence_agency_defense = 0.3
平。		1.9
root_out_resistance_effectiveness_factor	修改根除抵抗的有效性。	
root_out_resistance_effectiveness_factor = 0.3
百分比。		1.9
特工
除非另有说明，否则这些既可用于国家作用域，也可用于特工作用域，例如特质。

与操作相关的修正：
名字	效果	例子	修正类型	笔记	已添加版本
own_operative_capture_chance_factor	改变我们的特工被俘虏的机会。	
own_operative_capture_chance_factor = 0.5
百分比。		1.9
own_operative_detection_chance	改变我们的特工被发现的机会。	
own_operative_detection_chance = 10
平。		1.9
own_operative_detection_chance_factor	通过百分比更改我们的特工被检测到的几率。	
own_operative_detection_chance_factor = 0.5
百分比。		1.9
own_operative_forced_into_hiding_time_factor	将我们的特工被迫躲藏起来的机会改变一定百分比。	
own_operative_forced_into_hiding_time_factor = 0.5
百分比。		1.9
own_operative_harmed_time_factor	将我们的特工受到伤害的几率改变一定百分比。	
own_operative_harmed_time_factor = 0.5
百分比。		1.9
own_operative_intel_extraction_rate	更改我们的特工提取敌方情报的速度。	
own_operative_intel_extraction_rate = 0.5
百分比。		1.9
enemy_operative_capture_chance_factor	改变敌方特工被俘虏的几率。	
enemy_operative_capture_chance_factor = 0.5
百分比。		1.9
enemy_operative_detection_chance	改变发现敌方特工的几率。	
enemy_operative_detection_chance = 10
平。		1.9
enemy_operative_detection_chance_factor	以百分比更改敌方特工被发现的几率。	
enemy_operative_detection_chance_factor = 0.5
百分比。		1.9
enemy_operative_forced_into_hiding_time_factor	将敌方特工被迫躲藏的几率降低一定百分比。	
enemy_operative_forced_into_hiding_time_factor = 0.5
百分比。		1.9
enemy_operative_harmed_time_factor	将敌方特工受到伤害的几率降低一定百分比。	
enemy_operative_harmed_time_factor = 0.5
百分比。		1.9
enemy_operative_intel_extraction_rate	改变敌方特工提取我们情报的速度。	
enemy_operative_intel_extraction_rate = 0.5
百分比。		1.9
enemy_spy_negative_status_factor	更改敌方特工获得负面状态的几率。	
enemy_spy_negative_status_factor = 0.5
百分比。		1.9
enemy_operative_recruitment_chance	修改招募敌方特工的机会。	
enemy_operative_recruitment_chance = 0.3
百分比。	不能在特工作用域内使用。	1.9
new_operative_slot_bonus	修改操作招聘选择。	
new_operative_slot_bonus = 1
平。	不能在特工作用域内使用。	1.9
occupied_operative_recruitment_chance	修改从被占领土获得特工的机会。	
occupied_operative_recruitment_chance = 0.3
百分比。	不能在特工作用域内使用。	1.9
operative_death_on_capture_chance	修改了该国特工在被俘虏时死亡的几率。	
operative_death_on_capture_chance = 0.3
百分比。	不能在特工作用域内使用。	1.9
operative_slot	修改操作槽的数量。	
operative_slot = 1
平。	不能在特工作用域内使用。	1.9
AI
AI 相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
ai_badass_factor	AI的威胁感知。	
ai_badass_factor = 0.5
百分比。		1.0
ai_call_ally_desire_factor	AI呼叫盟友的机会。	
ai_call_ally_desire_factor = 0.5
百分比。		1.0
ai_desired_divisions_factor	AI试图产生的分裂数量。	
ai_desired_divisions_factor = 0.5
百分比。		1.0
ai_focus_aggressive_factor	AI专注于攻击。	
ai_focus_aggressive_factor = 0.5
百分比。		1.0
ai_focus_defense_factor	AI专注于防御。	
ai_focus_defense_factor = 0.5
百分比。		1.0
ai_focus_aviation_factor	AI专注于航空。	
ai_focus_aviation_factor = 0.5
百分比。		1.0
ai_focus_military_advancements_factor	AI专注于先进的军事科技。	
ai_focus_military_advancements_factor = 0.5
百分比。		1.0
ai_focus_military_equipment_factor	AI专注于先进的军事装备。	
ai_focus_military_equipment_factor = 0.5
百分比。		1.0
ai_focus_naval_air_factor	AI专注于建设海军空军。	
ai_focus_naval_air_factor = 0.5
百分比。		1.0
ai_focus_naval_factor	AI专注于建立海军。	
ai_focus_naval_factor = 0.5
百分比。		1.0
ai_focus_peaceful_factor	AI专注于和平研究和政策。	
ai_focus_peaceful_factor = 0.5
百分比。		1.0
ai_focus_war_production_factor	AI专注于战时生产。	
ai_focus_war_production_factor = 0.5
百分比。		1.0
ai_get_ally_desire_factor	AI渴望加入或扩大一个阵营。	
ai_get_ally_desire_factor = 0.5
百分比。		1.0
ai_join_ally_desire_factor	AI希望加入由盟友领导的战争。	
ai_join_ally_desire_factor = 0.5
百分比。		1.0
ai_license_acceptance	AI同意许可装备的机会。	
ai_license_acceptance = 0.5
百分比。	可用作目标修正。	1.4
战斗之外的军事
军事相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
command_power_gain	更改命令力量的每日增益。	
command_power_gain = 0.5
平。		1.5
command_power_gain_mult	按百分比更改命令力量的每日增益。	
command_power_gain_mult = 0.5
百分比。		1.5
征兵	更改总人口的可招募百分比。	
conscription = 0.02
平。		1.0
conscription_factor	将总人口的可招募百分比更改百分比。	
conscription_factor = 0.3
百分比。		1.0
experience_gain_army	修改军队经验的每日增益。	
experience_gain_army = 0.5
平。		1.0
experience_gain_army_factor	按百分比修改军队经验的获得。	
experience_gain_army_factor = 0.5
百分比。		1.0
experience_gain_navy	修改海军经验的每日增益。	
experience_gain_navy = 0.02
平。		1.0
experience_gain_navy_factor	按百分比修改海军经验的获得。	
experience_gain_navy_factor = 0.3
百分比。		1.0
experience_gain_air	修改每日获得的空中经验。	
experience_gain_air = 0.05
平。		1.0
experience_gain_air_factor	按百分比修改空中经验的每日增益。	
experience_gain_air_factor = 0.5
百分比。		1.0
land_equipment_upgrade_xp_cost	更改升级陆军装备的经验值。	
land_equipment_upgrade_xp_cost = 0.3
百分比。		1.0
land_reinforce_rate	改变增援师到达的速度。	
land_reinforce_rate = 0.3
百分比。		1.0
max_command_power	更改最大命令力量。	
max_command_power = 20
平。		1.5
max_command_power_mult	按百分比更改最大命令力量。	
max_command_power_mult = 0.3 
百分比。		1.5
weekly_manpower	每周获得的人力。	
weekly_manpower = 1000 
平。		1.6
naval_equipment_upgrade_xp_cost	更改海军经验成本以升级装备。	
naval_equipment_upgrade_xp_cost = 0.3
百分比。		1.0
refit_ic_cost	改装海军装备的IC成本。	
refit_ic_cost = 20
平。		1.6
refit_speed	海军装备改装的速度。	
refit_speed = 0.5
百分比。		1.6
air_equipment_upgrade_xp_cost	更改空中体验成本以升级装备。	
air_equipment_upgrade_xp_cost = 0.5
百分比。		1.0
training_time_factor	修改陆军和海军的训练时间。	
training_time_factor = 0.3
百分比。		1.0
minimum_training_level	更改要部署的单位所需的培训级别。	
minimum_training_level = 0.3 
百分比。		1.0
max_training	修改所需的经验以实现全面培训。	
max_training = -0.3
百分比。		1.0
training_time_army_factor	修改军队的训练时间。	
training_time_army_factor = 0.3
百分比。		1.0
special_forces_training_time_factor	改变训练特种部队所需的时间。	
special_forces_training_time_factor = 0.3
百分比。		1.0
<陆/空/海>_doctrine_cost_factor	更改购买指定类型的新学说的成本。	
land_doctrine_cost_factor = -0.05
百分比。		1.11
<学说类别>_cost_factor	修改购买指定类别的新学说的成本。	
cat_mobile_warfare_cost_factor = 0.3
百分比。	教义在/Hearts of Iron IV/common/technologies/*.txt中定义。	1.11
choose_preferred_tactics_cost	更改成本以选择首选策略。	
choose_preferred_tactics_cost = 5
平。		1.11
command_abilities_cost_factor	更改成本以选择命令功能。	
command_abilities_cost_factor = -0.3
百分比。		1.11
transport_capacity	修改需要通过海上运输的车队单位数量。	
transport_capacity = 0.3
百分比。		1.0
unit_<单位类型>_design_cost_factor	修改将指定类型的旅添加到编制所需的经验。	
unit_artillery_brigade_design_cost_factor = 0.3
百分比。	旅的定义在 /铁之心 IV/共同/单位/*.txt	1.11
<装备原型>_design_cost_factor	修改向指定装备原型添加升级或模块所需的经验。	
strat_bomber_equipment_design_cost_factor = 0.3
ship_hull_heavy_design_cost_factor = -0.2
百分比。	装备原型在/Hearts of Iron IV/普通/单位/装备/*中定义.txt	1.11
module_<模块类型>_design_cost_factor	修改将指定类型的模块添加到装备所需的经验。	
module_tank_torsion_bar_suspension_design_cost_factor = 0.3
百分比。	模块在 /铁之心 IV/通用/单位/装备/模块/*中定义.txt	1.11
将领
这些是与国家/地区作用域内的将领相关的修正，而不是在将领作用域内。

将领相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
female_random_army_leader_chance	改变随机生成的军队领导人是女性的几率。	
female_random_army_leader_chance = 0.3
百分比。		1.9.1
assign_army_leader_cp_cost	修改将军队领导人分配给军队的成本。	
assign_army_leader_cp_cost = -5
平。		1.11
army_leader_cost_factor	为陆军招募将领人的政治点成本。	
army_leader_cost_factor = 0.5 
百分比。		1.3
army_leader_start_level	对通用将领的起始级别加成。	
army_leader_start_level = 1 
平。		1.5
army_leader_start_attack_level	普通单位首领攻击起始等级加成。	
army_leader_start_attack_level = 1 
平。		1.5
army_leader_start_defense_level	通用将领者的起始防御水平加成。	
army_leader_start_defense_level = 1 
平。		1.5
army_leader_start_logistics_level	对通用将领的后勤起始水平的奖励。	
army_leader_start_logistics_level = 1 
平。		1.5
army_leader_start_planning_level	对通用将领的起始计划水平的奖励。	
army_leader_start_planning_level = 1 
平。		1.5
military_leader_cost_factor	招募将领人的政治点成本。	
military_leader_cost_factor = 0.5 
百分比。		1.3
female_random_admiral_chance	将随机生成的海军上将的几率更改为女性。	
female_random_admiral_chance = 0.3
百分比。		1.9.1
assign_navy_leader_cp_cost	修改将海军将领分配给海军的成本。	
assign_navy_leader_cp_cost = -5
平。		1.11
navy_leader_cost_factor	为陆地海军招募将领人的政治点成本。	
navy_leader_cost_factor = 0.5 
百分比。		1.3
navy_leader_start_level	对通用将领的起始级别加成。	
navy_leader_start_level = 1 
平。		1.9
navy_leader_start_attack_level	普通单位首领攻击起始等级加成。	
navy_leader_start_attack_level = 1 
平。		1.9
navy_leader_start_coordination_level	对通用将领的起始协调水平的奖励。	
navy_leader_start_coordination_level = 1 
平。		1.9
navy_leader_start_defense_level	通用将领者的起始防御水平加成。	
navy_leader_start_defense_level = 1 
平。		1.9
navy_leader_start_maneuvering_level	通用将领者的初始机动水平的奖励。	
navy_leader_start_maneuvering_level = 1 
平。		1.9
grant_medal_cost_factor	改变指挥权的成本，授予师长一枚勋章。	
grant_medal_cost_factor = 0.2
百分比。		1.12
field_officer_promotion_penalty	更改将领晋升为陆军元帅时适用于师的经验值。	
field_officer_promotion_penalty = 0.2
百分比。		1.12
female_divisional_commander_chance	改变获得女性师长的机会。	
female_divisional_commander_chance = 0.2
平。	如果在 /Hearts of Iron IV/portraits/*.txt 文件中没有定义通用的女性肖像，则会有一个剪影。	1.12
一般战斗
请注意，这些修正中的大多数不仅在国家作用域内，而且在将领和海军领导作用域内。

战斗相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
罪行	修改我军、海、空的攻击值。	
offence = 0.5
百分比。		1.0
防御	修改我们陆军、海军和空军的防御价值。	
defence = 0.5
百分比。		1.0
陆战
请注意，这些修正中的大多数不仅在国家作用域内，而且在将领作用域内。

陆战相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
acclimatization_cold_climate_gain_factor	寒冷适应增益修正。	
acclimatization_cold_climate_gain_factor = 0.5
百分比。		1.0
acclimatization_hot_climate_gain_factor	酷暑适应增益修正。	
acclimatization_hot_climate_gain_factor = 0.5
百分比。		1.0
air_superiority_bonus_in_combat	拥有空中优势在战斗中给予的奖励。	
air_superiority_bonus_in_combat = 0.5
百分比。		1.0
army_attack_factor	陆军攻击的加成。	
army_attack_factor = 0.5
百分比。		1.0
army_core_attack_factor	陆军攻击核心领土的加成。	
army_core_attack_factor = 0.1
百分比。		1.0
army_attack_against_major_factor	陆军攻击主要国家的加成。	
army_attack_against_major_factor = 0.5
百分比。		1.11
army_attack_against_minor_factor	陆军攻击非主要国家的加成。	
army_attack_against_minor_factor = 0.5
百分比。		1.11
army_attack_speed_factor	陆军攻击速度的加成。	
army_attack_speed_factor = 0.5
百分比。		1.0
army_breakthrough_against_major_factor	陆军突破主要国家的加成。	
army_breakthrough_against_major_factor = 0.5
百分比。		1.11
army_breakthrough_against_minor_factor	陆军突破非主要国家的加成。	
army_breakthrough_against_minor_factor = 0.5
百分比。		1.11
army_defence_factor	陆军防御的加成。	
army_defence_factor = 0.5
百分比。		1.0
army_defence_against_major_factor	陆军防御主要国家的加成。	
army_defence_against_major_factor = 0.5
百分比。		1.11
army_defence_against_minor_factor	陆军防御非主要国家的加成。	
army_defence_against_minor_factor = 0.5
百分比。		1.11
army_core_defence_factor	陆军在核心领土上的防御加成。	
army_core_defence_factor = 0.1
百分比。		1.0
army_speed_factor	陆军速度的加成。	
army_speed_factor = 0.5
百分比。		1.0
army_strength_factor	陆军实力的加成。	
army_strength_factor = 0.5
百分比。		1.11
<单位类型>_attack_factor	指定单位类型攻击的加成。	
cavalry_attack_factor = 0.5
百分比。	允许的单位类型包括army_armor、army_artillery、army_infantry、骑兵、机械化、机动化special_forces	1.0
<单位类型>_defence_factor	指定单位类型防御的加成。	
army_artillery_defence_factor = 0.5
百分比。	允许的单位类型包括army_armor、army_artillery、army_infantry、骑兵、机械化、机动化special_forces	1.0
<单位类型>_speed_factor	指定单位类型速度的加成。	
army_armor_speed_factor = 0.5
百分比。	允许的单位类型是army_armor和骑兵。Cavalry_speed_factor目前已损坏，无法被游戏识别。	1.0
army_morale	修改除法恢复率。	
army_morale = 10
平。		1.0
army_morale_factor	按百分比修改除法回收率。	
army_morale_factor = 0.3
百分比。		1.0
army_org	修改军队的组织。	
army_org = 10
平。		1.0
army_org_factor	按百分比修改军队的组织。	
army_org_factor = 0.3
百分比。		1.0
army_org_regain	以百分比修改军队的组织恢复速度。	
army_org_regain = 0.3
百分比。		1.5.1
breakthrough_factor	修改军队的突破。	
breakthrough_factor = 0.3
百分比。		1.0
cas_damage_reduction	记录近距离空中支援造成的伤害。	
cas_damage_reduction = 0.3
百分比。		1.0
combat_width_factor	改变我们自己的战斗宽度。	
combat_width_factor = 0.3
百分比。		1.0
coordination_bonus	将加成更改为协调，即对主要目标造成的伤害而不是分散。	
coordination_bonus = 0.3
百分比。		1.11
dig_in_speed	改变堑壕速度。	
dig_in_speed = 2
平。		1.0
dig_in_speed_factor	以百分比改变堑壕速度。	
dig_in_speed_factor = 0.5
百分比。		1.0
experience_gain_army_unit	改变陆军师获得的经验。	
experience_gain_army_unit = 0.5
平。		1.0
experience_gain_army_unit_factor	陆军师以百分比获得变化经验。	
experience_gain_army_unit_factor = 0.5
百分比。		1.0
experience_loss_factor	改变师在战斗经验中的损失。	
experience_loss_factor = 0.3
百分比。		1.0
initiative_factor	修改倡议。	
initiative_factor = 0.3
百分比。		1.11
land_night_attack	更改夜间攻击的惩罚。	
land_night_attack = 0.5
百分比。		1.0
max_dig_in	改变最大堑壕上线。	
max_dig_in = 20
平。	也可以在状态作用域内应用。	1.0
max_dig_in_factor	将最大根深限更改百分比。	
max_dig_in_factor = 0.5
百分比。	也可以在状态作用域内应用。	1.0
max_planning	更改最大计划。	
max_planning = 20
平。		1.0
max_planning_factor	按百分比更改最大计划。	
max_planning_factor = 0.5
百分比。		1.9
pocket_penalty	减少部队被包围时的惩罚。	
pocket_penalty = 0.2
百分比。		1.0
recon_factor	更改侦察。	
recon_factor = 0.2
百分比。		1.0
recon_factor_while_entrenched	改变根深蒂固的师的侦察。	
recon_factor_while_entrenched = 0.2
百分比。		1.0
special_forces_cap	按百分比更改特种部队的最大数量。	
special_forces_cap = 0.5
百分比。		1.0
special_forces_min	更改特种部队的最大数量。	
special_forces_min = 250
平。		1.0
terrain_penalty_reduction	减少地形给予的惩罚。	
terrain_penalty_reduction = 0.3
百分比。		1.0
org_loss_at_low_org_factor	修改单位在组织能力低时的组织损失。	
org_loss_at_low_org_factor = 0.2
百分比。		1.0
org_loss_when_moving	修改单位在移动时的组织损失。	
org_loss_when_moving = 0.2
百分比。		1.0
planning_speed	修改计划速度。	
planning_speed = 0.2
百分比。	在状态作用域内工作。	1.0
experience_gain_<单位类型>_combat_factor	修改战舰类型在战斗中获得的经验值。	
experience_gain_artillery_combat_factor = 0.3
百分比。	单位在 /Hearts of Iron IV/common/units/*.txt 中定义。	1.11
海军入侵
入侵相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
naval_invasion_prep_speed	修改准备海军入侵的速度。	
naval_invasion_prep_speed = 10
平。	可以是目标修正，也可以在将领作用域内。	1.0
naval_invasion_capacity	修改可以同时进行海军入侵计划的师的数量。	
naval_invasion_capacity = 10
平。		1.0
naval_invasion_penalty	修改了对海军入侵的惩罚。	
naval_invasion_penalty = 0.3
百分比。	与amphibious_invasion_defence相反。也可以在状态作用域内应用。	1.0
naval_invasion_planning_bonus_speed	修改海军入侵准备期间计划加成的累积速度。	
naval_invasion_planning_bonus_speed = 0.3
百分比。		1.11
amphibious_invasion	修改海军入侵期间单位的速度。	
amphibious_invasion = 0.5
百分比。		1.6
amphibious_invasion_defence	修改海军入侵给予的惩罚。	
amphibious_invasion_defence = 0.5
百分比。	与naval_invasion_penalty相反。也可以在状态作用域内应用。	1.6
invasion_preparation	修改执行海军入侵所需的准备工作。	
invasion_preparation = 0.3
百分比。	与naval_invasion_prep_speed相反。可用于将领作用域。	1.6
海战
请注意，这些修正中的大多数不仅在国家作用域内，而且在海军领导作用域以及装备模块中。

海战相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
convoy_escort_efficiency	修改护航任务的效率。	
convoy_escort_efficiency = 0.5
百分比。		1.6
convoy_raiding_efficiency_factor	修改车队突袭任务的效率。	
convoy_raiding_efficiency_factor = 0.5
百分比。		1.6
convoy_retreat_speed	修改车队撤退的速度。	
convoy_retreat_speed = 0.5
百分比。		1.6
critical_receive_chance	改变敌人在海战中对我们造成暴击的机会。	
critical_receive_chance = 0.5
百分比。		1.6
experience_gain_navy_unit	修改飞船每天获得的经验值。	
experience_gain_navy_unit = 0.02
平。		1.6
experience_gain_navy_unit_factor	按百分比修改飞船的经验增益。	
experience_gain_navy_unit_factor = 0.3
百分比。		1.6
mines_planting_by_fleets_factor	修改埋矿任务的效率。	
mines_planting_by_fleets_factor = 0.3
百分比。		1.6
mines_sweeping_by_fleets_factor	修改扫雷任务的效率。	
mines_sweeping_by_fleets_factor = 0.3
百分比。		1.6
naval_accidents_chance	修改船只意外沉没或损坏的几率。	
naval_accidents_chance = 0.3
百分比。		1.6
navy_anti_air_attack	修改对该国船只敌机的攻击。	
navy_anti_air_attack = 5
平。		1.6
navy_anti_air_attack_factor	将该国船只对敌机的攻击修改为一定百分比。	
navy_anti_air_attack_factor = 0.3
百分比。		1.6
naval_coordination	修改发现目标或切换任务时舰队聚集或分散的速度。	
naval_coordination = 0.3
百分比。		1.6
naval_critical_effect_factor	修改持续暴击对我们飞船的效果。	
naval_critical_effect_factor = 0.3
百分比。		1.6
naval_critical_score_chance_factor	修改了我们在海战中对敌人进行暴击的机会。	
naval_critical_score_chance_factor = 0.3
百分比。		1.6
naval_damage_factor	修改我们的船只造成的伤害。	
naval_damage_factor = 0.3
百分比。		1.6
naval_defense_factor	修改我们的船只受到的伤害。	
naval_defense_factor = 0.3
百分比。		1.6
naval_detection	修改我们的船只探测潜艇的机会。	
naval_detection = 0.3
百分比。		1.6
naval_enemy_fleet_size_ratio_penalty_factor	修改敌人因拥有比我们更多的船只而受到的惩罚。	
naval_enemy_fleet_size_ratio_penalty_factor = 0.3
百分比。		1.6
naval_enemy_positioning_in_initial_attack	在初始海军攻击期间修改敌人的位置。	
naval_enemy_positioning_in_initial_attack = 3
平。		1.11
naval_enemy_retreat_chance	修改敌人撤退的机会。	
naval_enemy_retreat_chance = 0.3
百分比。		1.6
naval_has_potf_in_combat_attack	与舰队荣耀一起战斗时修改海军的攻击。	
naval_has_potf_in_combat_attack = 0.3
百分比。		1.6
naval_has_potf_in_combat_defense	与舰队荣耀一起战斗时修改海军的防御。	
naval_has_potf_in_combat_defense = 0.3
百分比。		1.6
naval_hit_chance	修改海军攻击登陆的机会。	
naval_hit_chance = 0.3
百分比。		1.6
naval_mine_hit_chance	修改水雷命中的机会。	
naval_mine_hit_chance = 0.3
百分比。		1.6
naval_mines_damage_factor	修改水雷对敌舰造成的伤害。	
naval_mines_damage_factor = 0.3
百分比。		1.6
naval_mines_effect_reduction	修改敌方水雷造成的伤害。	
naval_mines_effect_reduction = 0.3
百分比。		1.6
naval_morale	修改海军恢复率。	
naval_morale = 15
平。		1.6
naval_morale_factor	按百分比修改海军恢复率。	
naval_morale_factor = 0.3
百分比。		1.6
naval_night_attack	修改国家船只在夜间造成的伤害。	
naval_night_attack = 0.3
百分比。		1.11
naval_retreat_chance	修改该国船只撤退的机会。	
naval_retreat_chance = 0.3
百分比。		1.6
naval_retreat_chance_after_initial_combat	修改国家舰艇在初始战斗后撤退的机会。	
naval_retreat_chance_after_initial_combat = 0.3
百分比。		1.11
naval_retreat_speed	修改国家船只撤退的速度。	
naval_retreat_speed = 0.3
百分比。		1.6
naval_retreat_speed_after_initial_combat	修改国家舰艇在初始战斗后撤退的速度。	
naval_retreat_speed_after_initial_combat = 0.3
百分比。		1.11
naval_speed_factor	修改国家船只的速度。	
naval_speed_factor = 0.3
百分比。		1.6
navy_org	修改海军的组织。	
navy_org = 10
平。		1.0
navy_org_factor	按百分比修改海军的组织。	
navy_org_factor = 0.3
百分比。		1.0
navy_max_range	修改海军的最大射程。	
navy_max_range = 10
平。		1.0
navy_max_range_factor	按百分比修改海军的最大射程。	
navy_max_range_factor = 0.3
百分比。		1.0
navy_max_range_factor	按百分比修改海军的最大射程。	
navy_max_range_factor = 0.3
百分比。		1.0
naval_torpedo_cooldown_factor	修改该国船只发射鱼雷的速度。	
naval_torpedo_cooldown_factor = 0.3
百分比。		1.6
naval_torpedo_hit_chance_factor	修改国家鱼雷击中敌舰的可能性。	
naval_torpedo_hit_chance_factor = 0.3
百分比。		1.6
naval_torpedo_reveal_chance_factor	修改该国潜艇在发射鱼雷时暴露自己的几率。	
naval_torpedo_reveal_chance_factor = 0.3
百分比。		1.6
naval_torpedo_screen_penetration_factor	修改国家鱼雷惩罚敌人筛查的速度。	
naval_torpedo_screen_penetration_factor = 0.3
百分比。		1.6
naval_torpedo_damage_reduction_factor	修改敌方鱼雷对该国船只造成的伤害。	
naval_torpedo_damage_reduction_factor = 0.3
百分比。		1.12
naval_torpedo_enemy_critical_chance_factor	修改敌方鱼雷对该国船只进行致命打击的机会。	
naval_torpedo_enemy_critical_chance_factor = 0.3
百分比。		1.12
naval_light_gun_hit_chance_factor	修改该国海军轻型火炮击中敌舰的机会。	
naval_light_gun_hit_chance_factor = 0.3
百分比。		1.12
naval_heavy_gun_hit_chance_factor	修改该国海军重炮击中敌舰的机会。	
naval_heavy_gun_hit_chance_factor = 0.3
百分比。		1.12
navy_capital_ship_attack_factor	修改国家主力舰的攻击。	
navy_capital_ship_attack_factor = 0.3
百分比。		1.6
navy_capital_ship_defence_factor	修改国家主力舰的防御。	
navy_capital_ship_defence_factor = 0.3
百分比。		1.6
navy_screen_attack_factor	修改国家屏蔽舰的攻击。	
navy_screen_attack_factor = 0.3
百分比。		1.6
navy_screen_defence_factor	修改国家筛选船只的防御。	
navy_screen_defence_factor = 0.3
百分比。		1.6
navy_submarine_attack_factor	修改该国潜艇的攻击。	
navy_submarine_attack_factor = 0.3
百分比。		1.6
navy_submarine_defence_factor	修改该国潜艇的防御。	
navy_submarine_defence_factor = 0.3
百分比。		1.6
navy_submarine_detection_factor	修改对该国潜艇的探测。	
navy_submarine_detection_factor = 0.3
百分比。		1.6
navy_visibility	修改该国海军的可见性。	
navy_visibility = 0.3
百分比。		1.6
navy_weather_penalty	修改了该国海军在恶劣天气下受到的惩罚。	
navy_weather_penalty = 0.3
百分比。		1.11
night_spotting_chance	修改了该国海军在夜间发现敌人的机会。	
night_spotting_chance = 0.3
百分比。		1.11
定位	修改该国海军的定位。	
positioning = 0.3
百分比。		1.6
repair_speed_factor	修改造船厂修理海军的速度。	
repair_speed_factor = 0.3
百分比。		1.6
screening_efficiency	修改船舶操作的效率屏幕。	
screening_efficiency = 0.3
百分比。		1.6
screening_without_screens	修改基础屏蔽，而不分配任何屏幕。	
screening_without_screens = 0.3
百分比。		1.11
ships_at_battle_start	修改首次接触时的船只数量。	
ships_at_battle_start = 0.3
百分比。		1.6
spotting_chance	修改发现敌舰的几率。	
spotting_chance = 0.3
百分比。		1.6
strike_force_movement_org_loss	修改在打击部队任务期间移动造成的组织损失。	
strike_force_movement_org_loss = 0.3
百分比。		1.6
sub_retreat_speed	修改潜艇的撤退速度。	
sub_retreat_speed = 0.3
百分比。		1.6
submarine_attack	修改潜艇的攻击。	
submarine_attack = 0.3
百分比。		1.6
experience_gain_<船型>_combat_factor	修改战舰类型在战斗中获得的经验值。	
experience_gain_destroyer_combat_factor = 0.3
百分比。		1.6
experience_gain_<船型>_training_factor	修改在船型培训中获得的经验。	
experience_gain_destroyer_training_factor = 0.3
百分比。		1.6
航母及其飞机
与运营商相关的修正：
名字	效果	例子	修正类型	笔记	已添加版本
navy_carrier_air_agility_factor	修改飞机执行航母任务的敏捷性。	
navy_carrier_air_agility_factor = 0.3
百分比。		1.6
navy_carrier_air_attack_factor	修改从航母执行任务的飞机的攻击。	
navy_carrier_air_attack_factor = 0.3
百分比。		1.6
navy_carrier_air_targetting_factor	修改从航母执行任务的飞机的目标。	
navy_carrier_air_targetting_factor = 0.3
百分比。		1.6
air_carrier_night_penalty_reduction_factor	修改减少航空公司的夜间罚款。	
air_carrier_night_penalty_reduction_factor = 0.5
百分比。		1.0
carrier_capacity_penalty_reduction	修改飞机过度拥挤的航母所给予的惩罚。	
carrier_capacity_penalty_reduction = 0.5
百分比。		1.6
carrier_traffic	修改运营商的流量。	
carrier_traffic = 0.5
百分比。		1.6
sortie_efficiency	在战斗中修改航母上加油和重新武装飞机时的速度。	
sortie_efficiency = 0.3
百分比。		1.6
carrier_sortie_hours_delay	修改航母上加油和重新武装飞机的延迟（以小时为单位）。	
carrier_sortie_hours_delay = 2
平。		1.12
carrier_night_traffic	修改运营商在夜间的流量。	
carrier_night_traffic = 0.5
百分比。		1.11
fighter_sortie_efficiency	在战斗中修改航母上战斗机加油和重新武装时的速度。	
fighter_sortie_efficiency = 0.3
百分比。		1.6
空战
请注意，这些修正中的大多数不仅在国家作用域内，而且在 ace 作用域内。

空气相关修正：
名字	效果	例子	修正类型	笔记	已添加版本
air_accidents_factor	修改发生空难的几率。	
air_accidents_factor = 0.5
百分比。		1.0
air_ace_bonuses_factor	修改王牌授予的加成。	
air_ace_bonuses_factor = 0.5
百分比。		1.11
air_ace_generation_chance_factor	修改王牌出现的几率。	
air_ace_generation_chance_factor = 0.5
百分比。		1.11
ace_effectiveness_factor	修改王牌的有效性	
ace_effectiveness_factor = 0.5
百分比。		1.0
air_agility_factor	修改国家飞机的敏捷性。	
air_agility_factor = 0.5
百分比。		1.0
air_attack_factor	修改国家飞机的攻击。	
air_attack_factor = 0.5
百分比。		1.0
air_defence_factor	修改国家飞机的防御。	
air_defence_factor = 0.5
百分比。		1.0
air_<使命>_agility_factor	修改国家飞机在执行指定任务时的敏捷性。	
air_air_superiority_agility_factor = 0.5
百分比。	允许的任务包括：air_superiority（修正中加倍air_）、close_air_support、拦截、strategic_bomber、空投和naval_strike。请注意，对于海战打击，它只是naval_strike_agility_factor没有air_。	1.0
air_<使命>_attack_factor	修改国家飞机在执行指定任务时的攻击。	
air_interception_attack_factor = 0.5
百分比。	允许的任务包括：air_superiority（修正中加倍air_）、close_air_support、拦截、strategic_bomber、空投和naval_strike。请注意，对于海战打击，它只是naval_strike_attack_factor没有air_。	1.0
air_<使命>_defence_factor	修改国家飞机在执行指定任务时的防御。	
air_strategic_bomber_defence_factor = 0.5
百分比。	允许的任务包括：air_superiority（修正中air_加倍）、close_air_support、拦截、strategic_bomber和空投。
air_interception_detect_factor	修改在执行拦截任务时探测到敌机的几率。	
air_interception_detect_factor = 0.5
百分比。		1.0
naval_strike_targetting_factor	修改飞机在执行海军打击时瞄准目标的能力。	
naval_strike_targetting_factor = 0.5
百分比。		1.0
port_strike	修改飞机在港口打击任务中造成的伤害。	
port_strike = 0.5
百分比。		1.0
air_close_air_support_org_damage_factor	修改近距离空中支援任务中飞机对师组织的伤害。	
air_close_air_support_org_damage_factor = 0.5
百分比。		1.11
air_bombing_targetting	修改地面轰炸的目标。	
air_bombing_targetting = 0.5
百分比。		1.0
air_cas_efficiency	修改近距离空中支援的效率。	
air_cas_efficiency = 0.5
百分比。		1.0
air_cas_present_factor	修改近空中支援在陆战中的效果。	
air_cas_present_factor = 0.5
百分比。		1.0
air_escort_efficiency	修改飞机在空战中的能力。	
air_escort_efficiency = 0.5
百分比。		1.0
air_home_defence_factor	在保卫本国国家时修改飞机的防御（通过陆路与该国首都相连）	
air_home_defence_factor = 0.5
百分比。		1.11
air_intercept_efficiency	修改空中拦截的效率。	
air_intercept_efficiency = 0.5
百分比。		1.0
air_manpower_requirement_factor	修改部署飞机所需的人力。	
air_manpower_requirement_factor = -0.5
百分比。		1.11
air_maximum_speed_factor	修改空军的最大速度。	
air_maximum_speed_factor = 0.5
百分比。		1.0
air_mission_efficiency	修改任务中飞机的效率。	
air_mission_efficiency = 0.5
百分比。		1.0
air_mission_xp_gain_factor	修改飞机执行任务的经验值。	
air_mission_xp_gain_factor = 0.5
百分比。		1.0
air_nav_efficiency	修改执行港口打击和海军轰炸任务的飞机的效率。	
air_nav_efficiency = 0.5
百分比。		1.0
air_night_penalty	修改空军在夜间受到的惩罚。	
air_night_penalty = 0.5
百分比。		1.0
air_power_projection_factor	修改飞机发出的力量投射。	
air_power_projection_factor = 0.5
百分比。		1.0
air_range_factor	修改飞机的航程。	
air_range_factor = 0.5
百分比。		1.0
air_strategic_bomber_bombing_factor	修改战略轰炸任务的效率。	
air_strategic_bomber_bombing_factor = 0.5
百分比。		1.0
air_strategic_bomber_night_penalty	修改夜间战略轰炸任务的惩罚。	
air_strategic_bomber_night_penalty = 0.5
百分比。		1.0
air_superiority_detect_factor	修改在空中优势任务中探测敌机的机会。	
air_superiority_detect_factor = 0.5
百分比。		1.0
air_superiority_efficiency	修改空中优势任务的效率。	
air_superiority_efficiency = 0.5
百分比。		1.0
air_training_xp_gain_factor	修改从训练中获得的空中经验。	
air_training_xp_gain_factor = 0.5
百分比。		1.6
air_untrained_pilots_penalty_factor	修改对经验不足的飞机的惩罚。	
air_untrained_pilots_penalty_factor = 0.5
百分比。		1.6
air_weather_penalty	修改飞机因天气原因受到的惩罚。	
air_weather_penalty = 0.5
百分比。		1.0
air_wing_xp_loss_when_killed_factor	修改飞机被击落造成的经验损失。	
air_wing_xp_loss_when_killed_factor = 0.5
百分比。		1.0
army_bonus_air_superiority_factor	修改空中优势对陆作战的加成。	
army_bonus_air_superiority_factor = 0.5
百分比。		1.0
enemy_army_bonus_air_superiority_factor	修改敌方空中优势对地作战的效果。	
enemy_army_bonus_air_superiority_factor = 0.5
百分比。		1.0
ground_attack_factor	将飞机攻击敌方师数的加成修改为百分比。	
ground_attack_factor = 0.5
百分比。		1.0
mines_planting_by_air_factor	修改飞机埋设地雷的效率。	
mines_planting_by_air_factor = 0.5
百分比。		1.0
mines_sweeping_by_air_factor	修改扫雷飞机的效率。	
mines_sweeping_by_air_factor = 0.5
百分比。		1.0
strategic_bomb_visibility	修改敌人发现我们战略轰炸机的机会。	
strategic_bomb_visibility = 0.5
百分比。		1.0
rocket_attack_factor	修改给予火箭的攻击。	
rocket_attack_factor = 0.5
百分比。		1.0
目标修正
这些修正是有针对性的，这意味着它们必须在块中用于目标修正而不是常规修正。这些包括idea、特质、顾问和决议;关系修正。
块的结构如下：targeted_modifier = { ... }targeted_modifier

targeted_modifier = {
    tag = FROM
    attack_bonus_against = 0.1
    defense_bonus_against = 0.1
}
这是一个与修正 = { ... } 完全分开的块在idea、顾问和决议方面;因此，当它放在 .modifier = { ... }

目标修正：
名字	效果	例子	修正类型	笔记	已添加版本
cic_to_target_factor	将该国民用工业的一部分提供给指定目标。	
cic_to_target_factor = 0.5
百分比。		1.5
extra_trade_to_target_factor	增加可用于目标国家/地区贸易的额外生产资源。	
extra_trade_to_target_factor = 0.5
百分比。		1.5
generate_wargoal_tension_against	改变世界紧张度，使我们有必要为目标国家辩护。	
generate_wargoal_tension_against = 0.5
平。		1.5
mic_to_target_factor	将该国军事工业的一部分提供给指定目标。	
mic_to_target_factor = 0.5
百分比。		1.5
trade_cost_for_target_factor	目标国家/地区购买该国资源的成本。	
trade_cost_for_target_factor = 0.5
百分比。		1.5
targeted_legitimacy_daily	改变目标国家合法性的每日收益。	
targeted_legitimacy_daily = 0.5
平。		1.6
attack_bonus_against	对指定国家的军队提供攻击加成。	
attack_bonus_against = 0.5
百分比。	由于错误，这将不适用于正在防御的单位。	1.5
attack_bonus_against_cores	对核心领土上指定国家的军队提供攻击加成。	
attack_bonus_against_cores = 0.5
百分比。		1.5
breakthrough_bonus_against	对指定国家的军队给予突破性加成。	
breakthrough_bonus_against = 0.5
百分比。		1.5
defense_bonus_against	对指定国家的军队提供防御加成。	
defense_bonus_against = 0.5
百分比。	由于错误，这将不适用于正在攻击的单位。	1.5
状态作用域
此处未列出的几个国家作用域的修正（例如陆战部分中的一部分）可以进入状态作用域。大部分state作用域的修正可以进入小地块作用域。

状态作用域的修正：
名字	效果	例子	修正类型	笔记	已添加版本
army_speed_factor_for_controller	更改状态控制者的除法速度。	
army_speed_factor_for_controller = 0.5
百分比。		1.0
attrition_for_controller	更改状态控制者的损耗。	
attrition_for_controller = 0.5
百分比。		1.0
compliance_gain	更改当前状态下的合规性增益。	
compliance_gain = 0.01
平。	也可以进入国家作用域。也可以用作目标修正。	1.9
compliance_growth	更改当前状态下的合规性增长速度。	
compliance_growth = 0.5
百分比。	也可以进入国家作用域。	1.9
country_resource_<资源>	直接修改该国的资源储备。	
country_resource_oil = 10
平。		1.0
country_resource_cost_<资源>	直接修改该国的资源储备。	
country_resource_cost_aluminium = 10
平。		1.0
disable_strategic_redeployment	禁用在该state进行战略重新部署。	
disable_strategic_redeployment = 1
bool值（仅 1）。		1.9
disable_strategic_redeployment_for_controller	禁用控制者状态中的战略重新部署。	
disable_strategic_redeployment_for_controller = 1
bool值（仅 1）。		1.9
enemy_intel_network_gain_factor_over_occupied_tag	修改敌方情报网络强度增益。	
enemy_intel_network_gain_factor_over_occupied_tag = 0.3
百分比。		1.9
local_building_slots	修改建筑槽位的数量。	
local_building_slots = 2
平。		1.9
local_building_slots_factor	按百分比修改建筑槽位的数量。	
local_building_slots_factor = 0.3
百分比。		1.9
local_factories	修改该state可用工厂的数量。	
local_factories = 0.3
百分比。		1.9
local_factory_sabotage	修改工厂破坏的机会。	
local_factory_sabotage = 0.3
百分比。		1.9
local_intel_to_enemies	修改敌人的情报量。	
local_intel_to_enemies = 0.3
百分比。		1.9
local_manpower	修改可用人力。	
local_manpower = 0.3
百分比。		1.4
local_non_core_manpower	修改可用的非核心人力数量。	
local_non_core_manpower = 0.3
百分比。		1.3.3
local_org_regain	修改战斗后恢复的组织能力。	
local_org_regain = -0.3
百分比。	可用于小地块和战略区域。	1.0
local_resources	修改可用资源量。	
local_resources = 0.3
平。		1.9
local_supplies	修改可用耗材的数量。	
local_supplies = 0.3
百分比。		1.9
local_supplies_for_controller	修改控制者的可用电源量。	
local_supplies_for_controller = 0.3
百分比。		1.9
local_supply_impact_factor	修改该state的地方供应的效果。	
local_supply_impact_factor = 0.3
百分比。		1.12
local_non_core_supply_impact_factor	修改如果state内各省的控制者不受核心，则state的地方供应所产生的效果。	
local_non_core_supply_impact_factor = 0.3
百分比。		1.12
mobilization_speed	修改动员速度。	
mobilization_speed = 0.3
百分比。		1.9
non_core_manpower	修改招聘的非核心人力数量。	
non_core_manpower = 0.3
百分比。		1.9
max_fuel_building	修改从建筑物提供给状态控制者的燃料容量（以千为单位）。	
max_fuel_building = 1500
百分比。	不必在建筑物中。	1.0
recruitable_population	修改招聘人员的数量。	
recruitable_population = 0.03
平。		1.9
recruitable_population_factor	按百分比修改招聘的人力数量。	
recruitable_population_factor = 0.3
百分比。		1.9
resistance_damage_to_garrison	修改对驻军的抗性伤害量。	
resistance_damage_to_garrison = 0.3
百分比。		1.9
resistance_decay	修改抵抗力量衰减的速度。	
resistance_decay = 0.3
百分比。		1.9
resistance_garrison_penetration_chance	修改驻军被渗透的机会。	
resistance_garrison_penetration_chance = 0.3
百分比。		1.9
resistance_growth	修改抵抗力量增长的速度。	
resistance_growth = 0.3
百分比。		1.9
resistance_target	修改抵抗力量增长的目标。	
resistance_target = 0.3
百分比。		1.9
starting_compliance	修改基本符合性值。	
starting_compliance = 0.3
百分比。		1.9
state_production_speed_<建筑>_factor	修改该state指定建筑物的建造速度。	
state_production_speed_industrial_complex_factor = 0.3
百分比。	使用state_production_speed_buildings_factor将其应用于所有建筑物。（在 1.9 中新增）	1.9.1
state_repair_speed_<建筑>_factor	修改状态中指定建筑物的修复速度。	
state_repair_speed_industrial_complex_factor = 0.3
百分比。		1.9.1
state_resource_<资源>	修改状态中指定资源的数量。	
state_resource_oil = 5
平。		1.0
state_resources_factor	修改状态中的资源量。	
state_resources_factor = 0.2
百分比。		1.9
state_resource_cost_<资源>	修改状态中指定资源的数量。	
state_resource_cost_rubber = 5
平。		1.9
temporary_state_resource_<资源>	将状态中指定资源的数量修改为基数之后的添加修正。	
temporary_state_resource_tungsten = 5
平。		1.0
enemy_operative_detection_chance_over_occupied_tag	偏移为占据此状态的标记检测到敌方特工的几率。	
enemy_operative_detection_chance_over_occupied_tag = 5
平。		1.9
enemy_operative_detection_chance_factor_over_occupied_tag	修改为占据此状态的标签检测到敌方特工的几率。	
enemy_operative_detection_chance_factor_over_occupied_tag = 0.5
百分比。		1.9
将领作用域
请注意，陆地和海战部分中的大多数修正也适用。

将领作用域的修正：
名字	效果	例子	修正类型	笔记	已添加版本
cannot_use_abilities	禁用使用能力。	
cannot_use_abilities = 1
bool值（仅 1）。		1.5
dont_lose_dig_in_on_attack	禁用在攻击时失去入院加成。	
dont_lose_dig_in_on_attack = 1
bool值（仅 1）。		1.5
exiled_divisions_attack_factor	修改该单位首领率领的师被流放时的攻击。	
exiled_divisions_attack_factor = 0.4
百分比。		1.6
exiled_divisions_defense_factor	修改该将领的师的防御，如果他们被流放。	
exiled_divisions_defense_factor = 0.4
百分比。		1.6
own_exiled_divisions_attack_factor	修改由该将领的师的攻击，如果他们被流放并属于同一个国家。	
own_exiled_divisions_attack_factor = 0.4
百分比。		1.6
own_exiled_divisions_defense_factor	修改由该将领的师的防御，如果他们被流放并属于同一个国家。	
own_exiled_divisions_defense_factor = 0.4
百分比。		1.6
experience_gain_factor	修改将领获得的经验。	
experience_gain_factor = 0.1
百分比。		1.5
fortification_collateral_chance	战斗的机会破坏敌人的堡垒。	
fortification_collateral_chance = 0.4
百分比。		1.5
fortification_damage	从战斗中受到敌方堡垒的伤害。	
fortification_damage = 0.4
百分比。		1.5
max_commander_army_size	修改可以由军队首领领导而不会受到惩罚的师的数量。	
max_commander_army_size = 12
平。		1.5
max_army_group_size	修改可由陆军元帅领导的集团军数量而不会受到惩罚。	
max_army_group_size = 1
平。		1.5
paradrop_organization_factor	伞兵在空投后将拥有的组织数量。	
paradrop_organization_factor = 0.5
百分比。		1.5
paratrooper_aa_defense	对伞兵的防空强度。	
paratrooper_aa_defense = 0.5
百分比。		1.5
paratrooper_count_per_plane	每架飞机上的伞兵数量。	
paratrooper_count_per_plane = 0.5
百分比。		1.5
promote_cost_factor	提拔将领的费用。	
promote_cost_factor = 0.5
百分比。		1.5
reassignment_duration_factor	重新分配罚款的长度。	
reassignment_duration_factor = 0.5
百分比。		1.5
river_crossing_factor	过河惩罚的效果。	
river_crossing_factor = 0.5
百分比。		1.5
sickness_chance	将领生病的机会。	
sickness_chance = 0.5
百分比。		1.5
skill_bonus_factor	将领从技能组合中获得的加成。	
skill_bonus_factor = 0.5
百分比。		1.5
trait_<特质>_xp_gain_factor	将经验增益修改为指定的特质。	
trait_infantry_leader_xp_gain_factor = 0.5
百分比。		1.11
terrain_trait_xp_gain_factor	修改所有地形特质的经验值（类型为 basic_terrain_trait 或 assignable_terrain_trait）。	
terrain_trait_xp_gain_factor = 0.5
百分比。		1.5
wounded_chance_factor	将领受伤的机会。	
wounded_chance_factor = 0.5
百分比。		1.5
shore_bombardment_bonus	修改岸上轰炸师的惩罚。	
shore_bombardment_bonus = 0.5
百分比。	适用于陆军和海军将领。	1.5
战略区域作用域
这仅限于为天气定义的静态修正。

战略区域作用域的修正：
名字	效果	例子	修正类型	笔记	已添加版本
air_accidents	发生空难的基本机会。	
air_accidents = 0.3
平。		1.0
air_detection	空气探测的基本几率。	
air_detection = -0.1
平。		1.0
naval_strike	海军打击的基础效率。	
naval_strike = -0.1
平。		1.0
navy_casualty_on_sink	修改船只在该区域沉没时的伤亡。	
navy_casualty_on_sink = -0.1
百分比。		1.6
navy_casualty_on_hit	修改该区域船只受损时的伤亡。	
navy_casualty_on_hit = -0.1
百分比。		1.6