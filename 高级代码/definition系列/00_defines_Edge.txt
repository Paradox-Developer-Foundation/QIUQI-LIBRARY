NDefines = {

NDefines = {



NGame = {

NGame = {

START_DATE = “1936.1.1.12”,

START_DATE = “1936.1.1.12”，

END_DATE = “1949.1.1.1”,

END_DATE = “1949.1.1.1”，

MAP_SCALE_PIXEL_TO_KM = 7.114,					— Yes, we did the math

MAP_SCALE_PIXEL_TO_KM = 7.114， — 是的，我们算了一下

SAVE_VERSION = 25,								— 1.16.0 (Countenance)

SAVE_VERSION = 25， — 1.16.0 （面容）

CHECKSUM_SALT = “zwOdv5d9wm9uDSOT”,				— Data to modify generated checksum when game binaries have changed but not any content files.

CHECKSUM_SALT = “zwOdv5d9wm9uDSOT”， — 当游戏二进制文件发生更改时，用于修改生成的校验和的数据，但任何内容文件没有更改。

LAG_DAYS_FOR_LOWER_SPEED = 10,					— Days of client lag for decrease of gamespeed

LAG_DAYS_FOR_LOWER_SPEED = 10， — 游戏速度降低的客户端延迟天数

LAG_DAYS_FOR_PAUSE = 25,						— Days of client lag for pause of gamespeed.

LAG_DAYS_FOR_PAUSE = 25， — 暂停 gamespeed 的客户端滞后天数。

GAME_SPEED_SECONDS = { 2.0, 0.5, 0.2, 0.1, 0.0 }, — game speeds for each level. Must be 5 entries with last one 0 for unbound

GAME_SPEED_SECONDS = { 2.0， 0.5， 0.2， 0.1， 0.0 }， — 每个级别的游戏速度。必须是 5 个条目，最后一个条目为 0 表示未绑定

MAJOR_PARTICIPANTS_FOR_MAJOR_WAR = 3,			— Minimum number of major countries involved in a war to consider it major enough to not end the game even though the enddate has been reached.

MAJOR_PARTICIPANTS_FOR_MAJOR_WAR = 3， — 参与战争的主要国家/地区的最小数量，以认为战争足够重大，即使已达到结束日期也不会结束游戏。

TRADE_ROUTE_RECALCULATE_FREQUENCY_DAYS = 30, — Max recalculation time for all trade routes (0 means we do not recalucate prediodically trade routes)

TRADE_ROUTE_RECALCULATE_FREQUENCY_DAYS = 30， — 所有贸易路线的最大重新计算时间（0 表示我们不重新计算预先交易路线）

COMBAT_LOG_MAX_MONTHS = 12,

COMBAT_LOG_MAX_MONTHS = 12，

MESSAGE_TIMEOUT_DAYS = 60,						— Useful if running the handsoff game. The popup messages that doesn’t require the player respond will automatically hide after some timeout.

MESSAGE_TIMEOUT_DAYS = 60， — 如果运行 handsoff 游戏，则很有用。不需要玩家响应的弹出消息将在一段时间超时后自动隐藏。

INFO_MESSAGE_TIMEOUT_DAYS = 3,					— Same but for unimportant messages.

INFO_MESSAGE_TIMEOUT_DAYS = 3， — 相同，但适用于不重要的邮件。

AIR_LOG_TIMEOUT_HOURS = 24,						— Data storring data

AIR_LOG_TIMEOUT_HOURS = 24， — 数据存储数据

EVENT_TIMEOUT_DEFAULT = 13,						— Default days before an event times out if not scripted

EVENT_TIMEOUT_DEFAULT = 13 — 如果未编写脚本，则为事件超时前的默认天数

MISSION_REMOVE_FROM_INTERFACE_DEFAULT = 13,		— Default days before a mission is removed from the interface after having failed or completed

MISSION_REMOVE_FROM_INTERFACE_DEFAULT = 13， — 任务失败或完成后从界面中删除前的默认天数

DECISION_ALERT_TIMEOUT_DAYS = 30,				— Days left when player will be alerted about timing out events or decisions

DECISION_ALERT_TIMEOUT_DAYS = 30 — 玩家收到超时事件或决策警报的剩余天数

FUEL_RESOURCE = “oil”,							— resource that will give country fuel

FUEL_RESOURCE = “oil”， — 为国家提供燃料的资源

MAX_EFFECT_ITERATION = 1000,					— maximum allowed iteration for loop effects

MAX_EFFECT_ITERATION = 1000， — 循环效果允许的最大迭代次数

MAX_SCRIPTED_LOC_RECURSION = 30,				— max recursion for scripted localizations

MAX_SCRIPTED_LOC_RECURSION = 30， — 脚本化本地化的最大递归

HANDS_OFF_START_TAG = “HAI”,					— tag for player country for -hands_off runs. use an existing tag that is less likely to affect the game

HANDS_OFF_START_TAG = “HAI”， — 球员国家/地区的 -hands_off 分标签。使用不太可能影响游戏的现有标签

ALERT_SFX_COOLDOWN_DAYS = 14,					— After playing an alert sound, don’t play the same sound for XXX days, even if it fires again.

ALERT_SFX_COOLDOWN_DAYS = 14， — 播放警报声音后，在 XXX 天内不要播放相同的声音，即使它再次触发。

MUSIC_PLAYER_RECENTLY_PLAYED_SIZE = 10,			— The music player keeps track of recently played music to try and avoid playing the same songs too often. This determines the max number of songs in the recently played list.

MUSIC_PLAYER_RECENTLY_PLAYED_SIZE = 10， — 音乐播放器会跟踪最近播放的音乐，以避免过于频繁地播放相同的歌曲。这决定了最近播放列表中歌曲的最大数量。

},



NGeography = {

NGeography = {

MEDITERRANEAN_SEA_REGIONS = { 29, 68, 69, 168, 169, 202 }, — The sea regions that are considered as part of the Mediterranean sea

MEDITERRANEAN_SEA_REGIONS = { 29， 68， 69， 168， 169， 202 }， — 被视为地中海一部分的海域

},



NDiplomacy = {

NDiplomacy = {

DIPLOMACY_REQUEST_EXPIRY_DAYS = 30,

DIPLOMACY_REQUEST_EXPIRY_DAYS = 30，

BASE_SURRENDER_LEVEL = 1.0,						— Surrender when level reached. valid 0-1

BASE_SURRENDER_LEVEL = 1.0， — 达到等级时投降。有效期 0-1

MAX_TRUST_VALUE = 100,							— Max trust value cap.

MAX_TRUST_VALUE = 100 — 最大信任值上限。

MIN_TRUST_VALUE = -100,							— Min trust value cap.

MIN_TRUST_VALUE = -100， — 最小信任值上限。

MAX_OPINION_VALUE = 100,						— Max opinion value cap.

MAX_OPINION_VALUE = 100， — 最大意见值上限。

MIN_OPINION_VALUE = -100,						— Min opinion value cap.

MIN_OPINION_VALUE = -100， — 最小意见值上限。

BASE_TRUCE_PERIOD = 180,						— Base truce period in days.

BASE_TRUCE_PERIOD = 180， — 以天为单位的基准休战期。

TRUCE_PERIOD_AFTER_KICKING_FROM_FACTION = 60,				— Truce period after kicking someone from faction in days.

TRUCE_PERIOD_AFTER_KICKING_FROM_FACTION = 60， — 几天内将某人踢出派系后的休战期。

NUM_DAYS_TO_ENABLE_KICKING_NEW_MEMBERS_OF_FACTION = 90,			— Number of days before being able to kick a new member of faction

NUM_DAYS_TO_ENABLE_KICKING_NEW_MEMBERS_OF_FACTION = 90， — 能够踢出新派系成员之前的天数

NUM_DAYS_TO_ENABLE_REINVITE_KICKED_NATIONS = 90,			— Number of days before being able to re invite a kicked nation to your faction

NUM_DAYS_TO_ENABLE_REINVITE_KICKED_NATIONS = 90， — 能够重新邀请被踢出的国家加入你的阵营之前的天数

BASE_NEGATIVE_OPINION_AFTER_BEING_KICKED = 20,				— Negative opinion that will be received after kicking a nation

BASE_NEGATIVE_OPINION_AFTER_BEING_KICKED = 20， — 踢出一个国家后将收到的负面看法

DECAY_RATE_OF_NEGATIVE_OPINION_AFTER_BEING_KICKED = 1,			— Weekly decay rate of the negative opinion

DECAY_RATE_OF_NEGATIVE_OPINION_AFTER_BEING_KICKED = 1， — 负面意见的每周衰减率

TRUCE_BREAK_COST_PP = 200,						— Base cost in PP of breaking a truce by joining a war or accepting a call to war ( you cannot declare war yourself until the truce if up ), this is then multiplied by the time left on the truce ( so once half the truce is up it only cost 50% of this )

TRUCE_BREAK_COST_PP = 200， — 通过加入战争或接受战争号召来打破休战的基础成本（如果停战结束，你不能自己宣战），然后乘以休战的剩余时间（所以一旦休战结束一半，它只花费其中的 50%）

BASE_PEACE_PUPPET_FACTOR = 100,					— Base factor for puppet in %.

BASE_PEACE_PUPPET_FACTOR = 100 — 人偶的基本因子（以 % 为单位）。

BASE_PEACE_LIBERATE_FACTOR = 100,				— Base factor for liberate in %.

BASE_PEACE_LIBERATE_FACTOR = 100， — 释放的基因子（以 % 为单位）。

BASE_PEACE_TAKE_UNCONTROLLED_STATE_FACTOR = 10.0, — Base factor for taking state you do not control

BASE_PEACE_TAKE_UNCONTROLLED_STATE_FACTOR = 10.0 — 采用不受您控制的状态的基因子

BASE_PEACE_TAKE_FACTION_CONTROLLED_STATE_FACTOR = 0.5, — Base factor for taking state you do not control, but someone in faction does

BASE_PEACE_TAKE_FACTION_CONTROLLED_STATE_FACTOR = 0.5， — 占据你无法控制但派系中某人可以控制的状态的基础因子

BASE_PEACE_FORCE_GOVERNMENT_COST = 100, 		— Base cost for forcing a country to change government.

BASE_PEACE_FORCE_GOVERNMENT_COST = 100 — 迫使一个国家更换政府的基本成本。

— In peace conference, cost is factored based on how many times the state has been contested and for how long it has been uncontested (for everyone else)

— 在和平会议中，成本是根据国家被争夺的次数和无争议的时间（对其他人来说）来计算的

PEACE_COST_FACTOR_CONTESTED_MAX = 15, — To prevent overflows due to the exponential increase, cap the contested factor to this

PEACE_COST_FACTOR_CONTESTED_MAX = 15， — 为防止因指数增加而溢出，请将争议因子限制为此

PEACE_COST_FACTOR_UNCONTESTED_MAX = 15, — To prevent overflows due to the exponential increase, cap the uncontested factor to this

PEACE_COST_FACTOR_UNCONTESTED_MAX = 15， — 为防止由于指数增加而出现溢出，请将无争议因子限制为此值

PEACE_COST_FACTOR_CONTESTED_BID = 1.20, — Cost factor for each contested bid on the state.

PEACE_COST_FACTOR_CONTESTED_BID = 1.20， — 该州每个有争议的出价的成本系数。

PEACE_COST_FACTOR_UNCONTESTED_BID_MIN = 1.15, — Minimum cost factor for each turn a bid has been uncontested on the state.

PEACE_COST_FACTOR_UNCONTESTED_BID_MIN = 1.15 — 该州出价无争议的每个回合的最低成本系数。

PEACE_COST_FACTOR_UNCONTESTED_BID_MAX = 1.60, — Maximum cost factor for each turn a bid has been uncontested on the state.

PEACE_COST_FACTOR_UNCONTESTED_BID_MAX = 1.60， — 该州出价无争议的每个回合的最大成本系数。

PEACE_COST_FACTOR_UNCONTESTED_BID_STEP = 0.15, — Uncontested cost factor will increase by this much each turn.

PEACE_COST_FACTOR_UNCONTESTED_BID_STEP = 0.15， — 无争议的费用系数每回合都会增加这么多。

PEACE_COST_FACTOR_CAPITAL_SHIP_IC = 0.005,				— In peace conference, cost for taking one capital ship per IC

PEACE_COST_FACTOR_CAPITAL_SHIP_IC = 0.005， — 在和平会议中，每 IC 乘坐一艘主力舰的成本

PEACE_COST_FACTOR_SCREENING_SHIP_IC = 0.005,			— In peace conference, cost for taking a part of the screening ships per IC

PEACE_COST_FACTOR_SCREENING_SHIP_IC = 0.005， — 在和平会议中，每 IC 占用部分筛查船的费用

PEACE_INCREASE_COST_FACTOR_PER_MISSING_PERCENT_FOR_CAPITULATION = 0.0012, 	— increase factor if loser has not capitulated, for every percent between surrender level and BASE_SURRENDER_LEVEL

PEACE_INCREASE_COST_FACTOR_PER_MISSING_PERCENT_FOR_CAPITULATION = 0.0012， — 如果输家没有投降，则增加倍数，对于投降水平和BASE_SURRENDER_LEVEL之间的每个百分比

— peace action taker has a discount if they occupy the state depending on compliance

— 如果 Peace Action Taker 根据合规性占领该州，则可享受折扣

— it’s a table where first value is the compliance level, and the second the factor

— 这是一个表，其中第一个值是合规性级别，第二个值是因子

PEACE_COST_FACTOR_COMPLIANCE_STEPS = {

PEACE_COST_FACTOR_COMPLIANCE_STEPS = {

0, 1.0, — between 0% and 30% compliance, factor is 1.0

0， 1.0， — 介于 0% 和 30% 合规性之间，系数为 1.0

30, 0.9, — between 30% and 70%

30， 0.9， — 介于 30% 和 70% 之间

70, 0.8, — above 70%

70， 0.8， — 高于 70%

},

— In peace conference, adding a stackable to a peace action, increment the cost by a percentage

— 在和平会议中，为和平行动添加可堆叠物品，使费用增加一个百分比

PEACE_COST_FACTOR_STACK_DEMILITARIZED_ZONE = 0.25,

PEACE_COST_FACTOR_STACK_DEMILITARIZED_ZONE = 0.25，

PEACE_COST_FACTOR_STACK_WAR_REPARATION = 0.25,

PEACE_COST_FACTOR_STACK_WAR_REPARATION = 0.25，

PEACE_COST_FACTOR_STACK_RESOURCE_RIGHTS = 0.25,

PEACE_COST_FACTOR_STACK_RESOURCE_RIGHTS = 0.25，

PEACE_COST_FACTOR_STACK_DISMANTLE_INDUSTRY = 0.25,

PEACE_COST_FACTOR_STACK_DISMANTLE_INDUSTRY = 0.25，

— peace conference can set timed effect, set length in days

— 和平会议可以设置定时效果，以天为单位设置长度

PEACE_TIMED_EFFECT_LENGTH_DEMILITARIZED_ZONE = 1825, — 5 years

PEACE_TIMED_EFFECT_LENGTH_DEMILITARIZED_ZONE = 1825 年，— 5 年

PEACE_TIMED_EFFECT_LENGTH_WAR_REPARATION = 1825,

PEACE_TIMED_EFFECT_LENGTH_WAR_REPARATION = 1825，

PEACE_TIMED_EFFECT_LENGTH_RESOURCE_RIGHTS = 1825,

PEACE_TIMED_EFFECT_LENGTH_RESOURCE_RIGHTS = 1825，

PEACE_TIMED_EFFECT_RATIO_CIVILIAN_FACTORY_WAR_REPARATION = 0.5, 	— ratio of civilian factories taken via stackable war reparation

PEACE_TIMED_EFFECT_RATIO_CIVILIAN_FACTORY_WAR_REPARATION = 0.5， — 通过可叠加战争赔偿获得的民用工厂比例



— The Influence cost modifier is basically the inverse of distance. Nearby states are cheaper, and far-away states are more expensive.

— 影响成本修饰符基本上是距离的倒数。附近的州更便宜，而遥远的州更贵。

— We basically do a two-segment lerp:

— 我们基本上做一个两段 lerp：

— if distance is between [0, NEUTRAL_DIST], we lerp the cost modifier between [MIN_DIST_COST_MODIFIER, 1.0]

— 如果 distance 在 [0， NEUTRAL_DIST] 之间，则我们在 [MIN_DIST_COST_MODIFIER， 1.0] 之间对成本修饰符进行插值

— if distance is between [NEUTRAL_DIST, MAX_DIST], we lerp the cost modifier between [1.0, MAX_DIST_COST_MODIFIER]

— 如果 distance 在 [NEUTRAL_DIST， MAX_DIST] 之间，则我们在 [1.0， MAX_DIST_COST_MODIFIER] 之间对 cost 修饰符进行插值。

— The below values represent (pixel distance / INFLUENCE_DISTANCE_DIVISOR)

— 以下值表示 （像素距离 / INFLUENCE_DISTANCE_DIVISOR）

INFLUENCE_NEUTRAL_DIST_CAPITAL = 30.0, — distance to capital that results in a cost modifier of 1.0

INFLUENCE_NEUTRAL_DIST_CAPITAL = 30.0， — 成本修饰符为 1.0 的到资本的距离

INFLUENCE_MAX_DIST_CAPITAL = 45.0, — distance to capital that results in a cost modifier of INFLUENCE_MAX_DIST_COST_MODIFIER

INFLUENCE_MAX_DIST_CAPITAL = 45.0， — 成本修饰符为 INFLUENCE_MAX_DIST_COST_MODIFIER 的到资本的距离

INFLUENCE_NEUTRAL_DIST_CORE = 6.0, — distance to nearest core state that results in a cost modifier of 1.0

INFLUENCE_NEUTRAL_DIST_CORE = 6.0， — 到最近的核心状态的距离，导致成本修饰符为 1.0

INFLUENCE_MAX_DIST_CORE = 13.0, — distance to nearest core state that results in a cost modifier of INFLUENCE_MAX_DIST_COST_MODIFIER

INFLUENCE_MAX_DIST_CORE = 13.0， — 到最近的核心状态的距离，导致成本修饰符为 INFLUENCE_MAX_DIST_COST_MODIFIER

INFLUENCE_NEUTRAL_DIST_CONTROLLED = 14.0, — distance to nearest controlled state that results in a cost modifier of 1.0

INFLUENCE_NEUTRAL_DIST_CONTROLLED = 14.0， — 到最近的受控状态的距离，导致成本修饰符为 1.0

INFLUENCE_MAX_DIST_CONTROLLED = 20.0, — distance to nearest controlled state that results in a cost modifier of INFLUENCE_MAX_DIST_COST_MODIFIER

INFLUENCE_MAX_DIST_CONTROLLED = 20.0， — 到最近的受控状态的距离，导致成本修饰符为 INFLUENCE_MAX_DIST_COST_MODIFIER

INFLUENCE_MIN_DIST_COST_MODIFIER = 0.70, — Cost modifier at min (zero) distance

INFLUENCE_MIN_DIST_COST_MODIFIER = 0.70 — 最小（零）距离处的成本修正

INFLUENCE_MAX_DIST_COST_MODIFIER = 1.00, — Cost modifier at max distance

INFLUENCE_MAX_DIST_COST_MODIFIER = 1.00， — 最大距离处的消耗修正

INFLUENCE_RATIO_CAPITAL = 0.05, — Ratio of influence based on distance to capital

INFLUENCE_RATIO_CAPITAL = 0.05， — 基于与资本距离的影响力比率

INFLUENCE_RATIO_CORE = 0.45, — Ratio of influence based on distance to nearest core territory

INFLUENCE_RATIO_CORE = 0.45， — 基于到最近核心区域距离的影响力比率

INFLUENCE_RATIO_CONTROLLED = 0.5, — Ratio of influence based on distance to neared controlled territory (including uncontested peace conference bids)

INFLUENCE_RATIO_CONTROLLED = 0.5， — 基于与近控制领土距离的影响力比率（包括无争议的和平会议竞标）

INFLUENCE_DISTANCE_DIVISOR = 22.0, — Divide pixel distance with this when determining distance to capital / core / controlled states. Just an arbitrary way of scaling the distance numbers.

INFLUENCE_DISTANCE_DIVISOR = 22.0， — 在确定到首都/核心/受控状态的距离时，用这个除以像素距离。只是一种缩放距离数字的任意方式。



INFLUENCE_PER_ADJACENCY = 0.05,					— How much influence to add per uncontested adjacent state in the PC (blob, don’t snake)

INFLUENCE_PER_ADJACENCY = 0.05， — PC 中每个无争议的相邻状态要添加多少影响（blob，不要蛇形）



INFLUENCE_MAJOR_FACTOR = 1.0,					—How much influence discount an AI major will get (inverse)

INFLUENCE_MAJOR_FACTOR = 1.0，— AI 专业将获得多少影响力折扣（逆）

INFLUENCE_MINOR_FACTOR = 1.0,					—How much influence discount an AI minor will get (inverse)

INFLUENCE_MINOR_FACTOR = 1.0，— AI 辅修将获得多少影响力折扣（逆）



PEACE_TRIGGER_AI_MAX_INFLUENCE_VALUE = 0.99,	— Max influence value for pc_is_state_outside_influence_for_winner trigger

PEACE_TRIGGER_AI_MAX_INFLUENCE_VALUE = 0.99 — 触发器的最大影响值pc_is_state_outside_influence_for_winner



BASE_IMPROVE_RELATION_COST = 10, — Political power cost to initiate relation improvement

BASE_IMPROVE_RELATION_COST = 10， — 启动关系改善的政治权力成本

BASE_IMPROVE_RELATION_SAME_IDEOLOGY_GROUP_MAINTAIN_COST = 0.2, — Political power cost each update when boosting relations with nation of same ideology

BASE_IMPROVE_RELATION_SAME_IDEOLOGY_GROUP_MAINTAIN_COST = 0.2， — 在促进与相同意识形态的国家的关系时，每次更新的政治权力成本

BASE_IMPROVE_RELATION_DIFFERENT_IDEOLOGY_GROUP_MAINTAIN_COST = 0.4, — Political power cost each update when boosting relations with nation of different ideology

BASE_IMPROVE_RELATION_DIFFERENT_IDEOLOGY_GROUP_MAINTAIN_COST = 0.4， — 在促进与不同意识形态国家的关系时，每次更新的政治权力消耗

BASE_SEND_ATTACHE_COST = 100,					— Political power cost to send attache

BASE_SEND_ATTACHE_COST = 100， — 派遣武官的政治权力成本

BASE_SEND_ATTACHE_CP_COST = 50.0,				— Command Power sent attache usage cost

BASE_SEND_ATTACHE_CP_COST = 50.0 — Command Power 发送附件的使用成本

BASE_GENERATE_WARGOAL_DAILY_PP = 0.2,	— Daily pp cost for generation of wargoals

BASE_GENERATE_WARGOAL_DAILY_PP = 0.2， — 生成战争目标的每日 pp 消耗

WARGOAL_VERSUS_MAJOR_AT_WAR_REDUCTION = -0.75, 	— reduction of pp cost for wargoal vs major at war.

WARGOAL_VERSUS_MAJOR_AT_WAR_REDUCTION = -0.75， — 战争中 Wargoal 与 Major 的 PP 成本降低。

WARGOAL_WORLD_TENSION_REDUCTION = -0.5,			— Reduction of pp cost for wargoal at 100% world tension, scales linearly

WARGOAL_WORLD_TENSION_REDUCTION = -0.5， — 在世界紧张度为 100% 时，战争目标的 pp 消耗降低，线性缩放

WARGOAL_JUSTIFY_TENSION_FROM_PRODUCTION = 30.0,	— Base value scaled by production capacity of country compared to biggest country

WARGOAL_JUSTIFY_TENSION_FROM_PRODUCTION = 30.0 — 根据国家/地区与最大国家/地区的生产能力相比缩放的基值

MIN_WARGOAL_JUSTIFY_COST = 2.0,					— It always takes atleast 10 days to justify a wargoal

MIN_WARGOAL_JUSTIFY_COST = 2.0， — 总是需要至少 10 天才能证明战争目标的合理性

WARGOAL_PER_JUSTIFY_AND_WAR_COST_FACTOR = 1.5,	— Cost factor per nation at war with or justifying against

WARGOAL_PER_JUSTIFY_AND_WAR_COST_FACTOR = 1.5， — 每个国家在交战或有理由与之交战时的成本系数

WARGOAL_THREAT_MAX_TIME_RATIO = 1.0,			— Threat from justifying a wargoal slowly builds up, hitting 100% at this proportion of the way to completion

WARGOAL_THREAT_MAX_TIME_RATIO = 1.0， — 证明战争目标的合理性威胁会慢慢增加，在完成过程中达到 100%

BASE_BOOST_PARTY_POPULARITY_DAILY_PP = 0.25, 	— Daily pp cost for boost party popularity

BASE_BOOST_PARTY_POPULARITY_DAILY_PP = 0.25， — 提升派对人气的每日 pp 消耗

BASE_BOOST_PARTY_POPULARITY_DAILY_DRIFT = 0.1, 	— Daily amount of popularity that will be added by the activity.

BASE_BOOST_PARTY_POPULARITY_DAILY_DRIFT = 0.1， — 活动将添加的每日人气量。

BASE_STAGE_COUP_DAILY_PP = 0.5,					— Daily pp cost for staging a coup

BASE_STAGE_COUP_DAILY_PP = 0.5， — 发动政变的每日 pp 成本

BASE_STAGE_COUP_TOTAL_COST = 200, 				— Equipment consume factor for stage coup.

BASE_STAGE_COUP_TOTAL_COST = 200 — 阶段政变的设备消耗系数。

NAP_EXPIRY_MONTHS = 48, — NAPs expire after this many months

NAP_EXPIRY_MONTHS = 48 — NAP 在这几个月后过期

NAP_UNBREAKABLE_MONTHS = 12, — NAPS cannot be broken for this many months

NAP_UNBREAKABLE_MONTHS = 12， — 在这么多个月里不能打破 NAPS

NAP_FORCE_BALANCE_RULE_MONTHS = 6, 		— The NAP border force balance rule changes with this interval

NAP_FORCE_BALANCE_RULE_MONTHS = 6 — NAP 边界部队平衡规则随此间隔而变化

NAP_BREAK_FORCE_BALANCE_1 = 2.0, 	— 2-1 brigades along the border required to break NAP

NAP_BREAK_FORCE_BALANCE_1 = 2.0， — 需要沿边境的 2-1 旅才能打破 NAP

NAP_BREAK_FORCE_BALANCE_2 = 1.0, 	— 1-1 brigades along the border required to break NAP

NAP_BREAK_FORCE_BALANCE_2 = 1.0， — 需要沿边境的 1-1 旅才能打破 NAP

NAP_BREAK_FORCE_BALANCE_3 = 0.5, 	— 1-2 brigades along the border required to break NAP

NAP_BREAK_FORCE_BALANCE_3 = 0.5， — 需要沿边境部署 1-2 个旅才能突破 NAP

VERY_GOOD_OPINION = 50,							— Threshold for a country that has a very good opinion of you.

VERY_GOOD_OPINION = 50 — 对您有非常好评价的国家/地区的阈值。

VERY_BAD_OPINION = -50,							— Threshold for a country that has a very bad opinion of you.

VERY_BAD_OPINION = -50， — 对您评价非常差的国家/地区的阈值。

DIPLOMACY_HOURS_BETWEEN_REQUESTS = 24,			— How long a country must wait before sending a new diplomatic request.

DIPLOMACY_HOURS_BETWEEN_REQUESTS = 24 — 一个国家在发送新的外交请求之前必须等待的时间。

TROOP_FEAR = 1, 								— Impact on troops on borders when deciding how willing a nation is to trade

TROOP_FEAR = 1， — 在决定一个国家进行贸易的意愿时对边境部队的影响

FLEET_FEAR = 1,									— Impact on troops on borders when deciding how willing a nation is to trade

FLEET_FEAR = 1， — 在决定一个国家进行贸易的意愿时对边境部队的影响

IC_TO_EQUIPMENT_COUP_RATIO = 0.1,				— Ratio for calculating cost of staging coup

IC_TO_EQUIPMENT_COUP_RATIO = 0.1， — 用于计算发动政变成本的比率

VOLUNTEERS_PER_TARGET_PROVINCE = 0.05,			— Each province owned by the target country contributes this amount of volunteers to the limit.

VOLUNTEERS_PER_TARGET_PROVINCE = 0.05， — 目标国家/地区拥有的每个省份都贡献了此数量的志愿者。

VOLUNTEERS_PER_COUNTRY_ARMY = 0.05,				— Each army unit owned by the source country contributes this amount of volunteers to the limit.

VOLUNTEERS_PER_COUNTRY_ARMY = 0.05， — 来源国家/地区拥有的每个陆军单位都会贡献此数量的志愿者。

VOLUNTEERS_RETURN_EQUIPMENT = 0.95,				— Returning volunteers keep this much equipment

VOLUNTEERS_RETURN_EQUIPMENT = 0.95， — 返回的志愿者保留这么多设备

VOLUNTEERS_TRANSFER_SPEED = 14,					— days to transfer a unit to another nation

VOLUNTEERS_TRANSFER_SPEED = 14， — 将单位转移到另一个国家的天数

VOLUNTEERS_DIVISIONS_REQUIRED = 30,				— This many divisons are required for the country to be able to send volunteers.

VOLUNTEERS_DIVISIONS_REQUIRED = 30， — 该国需要这么多的除法才能派遣志愿者。

TENSION_STATE_VALUE = 2,						— Tension value gained by annexing one state

TENSION_STATE_VALUE = 2， — 吞并一个国家获得的紧张值

TENSION_CIVIL_WAR_IMPACT = 0.2,					— civil war multiplier on tension.

TENSION_CIVIL_WAR_IMPACT = 0.2， — 内战的紧张程度乘数。

TENSION_NO_CB_WAR = 10,							— Amount of tension generated by a no-CB wargoal

TENSION_NO_CB_WAR = 10， — 无 CB 战争目标产生的紧张程度

TENSION_CB_WAR = 7,								— Amount of tension generated by a war with a CB

TENSION_CB_WAR = 7， — 与 CB 的战争产生的紧张量

TENSION_ANNEX_NO_CLAIM = 2,						— Amount of tension generated by annexing a state you don’t have claims on

TENSION_ANNEX_NO_CLAIM = 2， — 吞并您没有主权要求的国家所产生的紧张局势

TENSION_ANNEX_CLAIM = 0.5,						— Amount of tension generated by annexing a state you DO have claims on

TENSION_ANNEX_CLAIM = 0.5， — 吞并您拥有主权要求的国家所产生的紧张局势

TENSION_ANNEX_CORE = 0,							— Amount of tension generated by annexing a state that is your core

TENSION_ANNEX_CORE = 0， — 通过吞并作为核心的状态而产生的紧张量

TENSION_PUPPET = 1.25,							— Amount of tension generated by puppeting (per state)

TENSION_PUPPET = 1.25 — 木偶产生的张力（每个状态）

TENSION_FORCE_GOVERNMENT = 0.75, — Amount of tension generated by forcing government (per state)

TENSION_FORCE_GOVERNMENT = 0.75， — 强迫政府产生的紧张程度（每个州）

TENSION_VOLUNTEER_FORCE_DIVISION = 0.2,			— Amount of tension generated for each sent division

TENSION_VOLUNTEER_FORCE_DIVISION = 0.2， — 每个发送的分割产生的张力

TENSION_DECAY_DAILY = 0.005,					— Each day tension decays this much for Threat sources which are no longer relevant. Replaces TENSION_DECAY as of 1.12.0

TENSION_DECAY_DAILY = 0.005， — 对于不再相关的威胁源，紧张局势每天都会衰减这么多。替换 TENSION_DECAY 1.12.0

TENSION_SIZE_FACTOR = 1.0,						— All action tension values are multiplied by this value

TENSION_SIZE_FACTOR = 1.0， - 所有动作张力值乘以此值

TENSION_TIME_SCALE_START_DATE = “1936.1.1.12”,	— Starting at this date, the tension values will be scaled down (will be equal to 1 before that)

TENSION_TIME_SCALE_START_DATE = “1936.1.1.12”， — 从此日期开始，张力值将按比例缩小（在此之前将等于 1）

TENSION_TIME_SCALE_MONTHLY_FACTOR = -0.005,		— Timed tension scale will be modified by this amount starting with TENSION_TIME_SCALE_START_DATE

TENSION_TIME_SCALE_MONTHLY_FACTOR = -0.005， — 定时张力刻度将从 TENSION_TIME_SCALE_START_DATE 开始修改此量

TENSION_TIME_SCALE_MIN = 0.25,					— Timed tension scale won’t decrease under this value

TENSION_TIME_SCALE_MIN = 0.25 — 定时张力刻度不会低于此值

TENSION_GUARANTEE = -5,

TENSION_GUARANTEE = -5，

TENSION_FACTION_JOIN = 4,

TENSION_FACTION_JOIN = 4，

TENSION_JOIN_ATTACKER = 2,						— scale of the amount of tension added when country joins attacker side

TENSION_JOIN_ATTACKER = 2， — 当国家加入进攻方时增加的紧张程度的刻度

TENSION_PEACE_FACTOR = 0.25,					— scale of the amount of tension (from war declaration) reduced when peace is completed.

TENSION_PEACE_FACTOR = 0.25， — 和平完成后（从宣战开始）紧张程度的缩小。

TENSION_LIBERATE = -1,							— Amount of tension generated by liberating a country.

TENSION_LIBERATE = -1， — 解放一个国家所产生的紧张程度。

TENSION_TAKE_ONE_CAPITAL_SHIP = 0.25,			— Amount of tension generated by 1 take navy peace action

TENSION_TAKE_ONE_CAPITAL_SHIP = 0.25， — 1 采取海军和平行动产生的紧张程度

TENSION_DEMILITARIZE_ZONE = 0.25,				— Amount of tension generated by stacking demilitarize zone on 1 state, multiplied with the state base threat

TENSION_DEMILITARIZE_ZONE = 0.25， — 在 1 个州上堆叠非军事区所产生的紧张感，乘以国家基础威胁

TENSION_WAR_REPARATION = 0.25,					— Amount of tension generated by stacking war reparation on 1 state, multiplied with the state base threat

TENSION_WAR_REPARATION = 0.25， — 将战争赔款叠加到 1 个州所产生的紧张程度，乘以州基础威胁

TENSION_RESOURCE_RIGHTS = 0.25,					— Amount of tension generated by stacking resource rights on 1 state, multiplied with the state base threat

TENSION_RESOURCE_RIGHTS = 0.25， — 将资源权限叠加到 1 个状态上所产生的紧张程度，乘以状态基础威胁

TENSION_DISMANTLE_INDUSTRY = 0.25,				— Amount of tension generated by stacking dismantle military industry on 1 state, multiplied with the state base threat

TENSION_DISMANTLE_INDUSTRY = 0.25， — 在 1 个州上堆叠拆除军事工业所产生的紧张程度，乘以国家基地威胁

TENSION_CAPITULATE = 0.40,						— Scale of the amount of tension created by a countries capitulation.

TENSION_CAPITULATE = 0.40， — 一个国家投降造成的紧张程度的尺度。

GUARANTEE_COST = 25,							— Scale with the number of already guaranteed countries.

GUARANTEE_COST = 25， — 根据已保证的国家/地区数量进行缩放。

REVOKE_GUARANTEE_COST = 25,

REVOKE_GUARANTEE_COST = 25，

BASE_CONDITIONAL_PEACE_WARESCORE_RATIO = 0.5, 	— Warscore ratio needed for the losing side to able to surrender.

BASE_CONDITIONAL_PEACE_WARESCORE_RATIO = 0.5， — 失败方能够投降所需的 Warscore 比率。

BASE_CONDITIONAL_PEACE_MONTHS = 3,				— War length must be before a surrender is possible.

BASE_CONDITIONAL_PEACE_MONTHS = 3， — 战争持续时间必须在投降之前。

JOINING_NAP_WAR_PENALTY = 0.2,					— War support penalty for breaking non-breakable NAP

JOINING_NAP_WAR_PENALTY = 0.2， — 打破牢不可破的 NAP 的对抗战辅助惩罚

BREAKING_GUARANTEE_PENALTY = 0.2,				— War support penalty for breaking guarantee

BREAKING_GUARANTEE_PENALTY = 0.2， — 打破保证的对抗战辅助惩罚



— WARNING ! if you modify the following values, you should update corresponding loc keys in games_rules_l_english.yml

— 警告 ！如果您修改以下值，则应在 games_rules_l_english.yml 中更新相应的 loc 键

PEACE_SCORE_TRANSFERRED_TO_FACTION_LEADER = 0.1, 		— Part of the peace score transferred from the faction members to the faction leader (if game rule enabled)

PEACE_SCORE_TRANSFERRED_TO_FACTION_LEADER = 0.1， — 和平分数的一部分从派系成员转移到派系首领（如果启用了游戏规则）

PEACE_SCORE_RESET_LOW_SCORE_THRESHOLD = 0.05,			— Winners with less than this ratio of war participation will give all their score to other players

PEACE_SCORE_RESET_LOW_SCORE_THRESHOLD = 0.05， — 参与战争的比率低于此比率的获胜者将把他们的所有分数都给其他玩家

PEACE_SCORE_RESET_LOW_SCORE_MINIMUM_FOR_RECEIVER = 0.1, — Disable the previous, if no winner has at least this ratio of war participation

PEACE_SCORE_RESET_LOW_SCORE_MINIMUM_FOR_RECEIVER = 0.1， — 如果没有获胜者至少有此参与战争的比率，则禁用前一个



PEACE_SCORE_SCALE_FACTOR = 1.35, — Losers’ total value times this factor becomes the default total peace conference score that is distributed to the winners.

PEACE_SCORE_SCALE_FACTOR = 1.35， — 失败者的总值乘以此因子，该因子成为分配给获胜者的默认和平会议总分。



PEACE_SCORE_MINOR_BOOST_FRACTION = 0.05, — Low-scoring winners are boosted by receiving more of their score earlier. This value, multiplied by the total score distributed this turn, is the minimum score they will receive (up until their total allocated score).

PEACE_SCORE_MINOR_BOOST_FRACTION = 0.05， — 低分获胜者会因更早获得更多分数而获得提升。该值乘以本回合分配的总分，即他们将获得的最低分数（直到他们分配的总分数）。

— Example: If 2000 score is distributed to winners this turn and this value is set to 0.05, each winner will receive a minimum of 100 score (clamped by the max score they will receive over the cource of the conference).

— 示例：如果本回合向获胜者分配 2000 分，并且该值设置为 0.05，则每个获胜者将获得至少 100 分（以他们在会议期间将获得的最高分数为准）。



PEACE_SCORE_DISTRIBUTION = { 0.2, 0.2, 0.2, 0.2, 0.2 }, — How much of the total peace conference score you get during the first n turns.

PEACE_SCORE_DISTRIBUTION = { 0.2， 0.2， 0.2， 0.2， 0.2 }， — 您在前 n 个回合中获得的和平会议总分的多少。

— More explanation of the peace score distribution above:

— 上面对和平分数分布的更多解释：

— {1.0} would give you all the score on the first turn.

— {1.0} 会给你第一回合的所有分数。

— {0.5, 0.5, 0.5} would give you 50 % of the total score on each of the first three turns (in this case resulting in receiving 150 % of the total score).

— {0.5， 0.5， 0.5} 将在前三个回合中的每一回合给你 50% 的总分（在这种情况下，你会收到 150% 的总分）。



PEACE_CONTEST_REFUND_FACTOR = { 1.0, 0.92, 0.84, 0.76 }, — How much of the spent peace conference score that gets refunded in a contest. First element applies for the first round of conflicts, second element for the second round of conflicts, etc. The final element is used for each consecutive turn, so setting that to e.g. 0.7 means you get 70 % of the spent score back for every turn thereafter.

PEACE_CONTEST_REFUND_FACTOR = { 1.0， 0.92， 0.84， 0.76 }， — 在比赛中退还的和平会议用完分数的多少。第一个要素适用于第一轮冲突，第二个要素适用于第二轮冲突，依此类推。最后一个元素用于每个连续回合，因此将其设置为 0.7 意味着您在此后的每个回合都会获得 70% 的已用分数。



PEACE_PLAY_SOUND_ON_NEW_TURN = true, — Whether the ‘peace_conference_new_turn’ audio hook is called or not

PEACE_PLAY_SOUND_ON_NEW_TURN = true， — 是否调用 'peace_conference_new_turn' 音频钩子

PEACE_PLAY_NEW_TURN_SOUND_ONLY_IF_NOT_ALREADY_PLAYING = true, — Whether the ‘peace_conference_new_turn’ audio hook should play only if not already playing (relevant if players spam-click the pass/submit button)

PEACE_PLAY_NEW_TURN_SOUND_ONLY_IF_NOT_ALREADY_PLAYING = true， — 是否仅在尚未播放时才播放 'peace_conference_new_turn' 音频钩子（如果玩家垃圾邮件点击通过/提交按钮，则相关）



MAX_REMEMBERED_LEASED_IC = 1000,				— Maximum of leased equipment value that is remembered for opinion bonus

MAX_REMEMBERED_LEASED_IC = 1000 — 为意见奖励记住的租赁设备价值的最大值

MAX_OPINION_FOR_LEASED_IC = 30,					— Positive opinion when remembering the MAX_REMEMBERED_LEASED_IC equipment

MAX_OPINION_FOR_LEASED_IC = 30， — 记住MAX_REMEMBERED_LEASED_IC设备时给出正面评价

MONTHLY_LEASED_IC_DECAY = 35,					— How much of leased equipment is being “forgot” each month

MONTHLY_LEASED_IC_DECAY = 35 — 每月“遗忘”的租赁设备数量

OPINION_PER_VOLUNTEER = 3,						— Opinion bonus per one sent volunteer division

OPINION_PER_VOLUNTEER = 3， — 每派出一个志愿兵师的好感加成

MAX_OPINION_FROM_VOLUNTEERS = 30,				— Opinion bonus per one sent volunteer division

MAX_OPINION_FROM_VOLUNTEERS = 30， — 每派出一个志愿师的好感加成

OPINION_FOR_DEMO_FROM_WT_GENERATION = -2.0,		— How much less do democracies like us if we generate world tension

OPINION_FOR_DEMO_FROM_WT_GENERATION = -2.0， — 如果我们制造世界紧张局势，民主国家会更不喜欢我们

NOT_READY_FOR_WAR_BASE = -50,					— AI should be unwilling to enter accept a call to war if not ready for war against the relevant enemies.

NOT_READY_FOR_WAR_BASE = -50， — 如果 AI 没有准备好与相关敌人开战，则 AI 应该不愿意进入接受战争召唤。

FRONT_IS_DANGEROUS = -100,						— AI should be unwilling to enter accept a call to war if front is too dangerous.

FRONT_IS_DANGEROUS = -100， — 如果前线太危险，AI 应该不愿意进入接受战争召唤。

NOT_READY_FOR_WAR_VAL_PER_DAY_SINCE_CALL = 1,	— Value modifying the not ready base over time.

NOT_READY_FOR_WAR_VAL_PER_DAY_SINCE_CALL = 1， — 随时间修改未就绪基的值。



PEACE_ACTION_MAX_COST = 9999,					— Max value for a peace action cost (after all modifiers)

PEACE_ACTION_MAX_COST = 9999， — 和平行动费用的最大值（在所有词缀之后）



RESOURCE_SENT_AUTONOMY_DAILY_BASE = 0.0,		— If puppet provides resources to its master they increasy their autonomy by at least this amount

RESOURCE_SENT_AUTONOMY_DAILY_BASE = 0.0， — 如果 puppet 向其主站提供资源，则其自主性至少增加此数量

RESOURCE_SENT_AUTONOMY_DAILY_FACTOR = 0.005,	— If puppet provides resources to its master they increasy their autonomy by the resources factored by this

RESOURCE_SENT_AUTONOMY_DAILY_FACTOR = 0.005， — 如果 puppet 向其主 master 提供资源，则 puppet 会通过此因素所包含的资源来增加其自主权

WAR_SCORE_AUTONOMY_BASE = 0.0,					— Value added if any war score is contributed by puppet

WAR_SCORE_AUTONOMY_BASE = 0.0 — 如果 puppet 贡献了任何战争分数，则会增加值

WAR_SCORE_AUTONOMY_FACTOR = 0.6,				— If puppet generates war score it get a boost to independence

WAR_SCORE_AUTONOMY_FACTOR = 0.6， — 如果傀儡产生战争分数，它会获得独立度提升

LL_TO_OVERLORD_AUTONOMY_DAILY_BASE = 0.0,		— If puppet lend leases equipment to overlord of at least same tech level as they have, they gain autonomy

LL_TO_OVERLORD_AUTONOMY_DAILY_BASE = 0.0， — 如果傀儡将设备租借给至少与他们相同科技水平的霸主，他们就会获得自主权

LL_TO_OVERLORD_AUTONOMY_DAILY_FACTOR = 0.05,	— If puppet lend leases equipment to overlord of at least same tech level as they have, they gain autonomy

LL_TO_OVERLORD_AUTONOMY_DAILY_FACTOR = 0.05， — 如果傀儡将设备出租给至少与他们相同科技水平的霸主，他们就会获得自主权

LL_TO_PUPPET_AUTONOMY_DAILY_BASE = 0.0,			— If overlord lend leases equipment to puppet of higher tech level as they have, puppet losses autonomy

LL_TO_PUPPET_AUTONOMY_DAILY_BASE = 0.0， — 如果霸主将设备租借给技术水平更高的傀儡，则傀儡将失去自主权

LL_TO_PUPPET_AUTONOMY_DAILY_FACTOR = -0.01,		— If overlord lend leases equipment to puppet of higher tech level as they have, puppet losses autonomy

LL_TO_PUPPET_AUTONOMY_DAILY_FACTOR = -0.01， — 如果霸主将设备租借给技术水平更高的傀儡，则傀儡将失去自主权

AUTONOMY_FREEDOM_FROM_CAPITULATE = 0.5, — if overlord capitulate you get this

AUTONOMY_FREEDOM_FROM_CAPITULATE = 0.5， — 如果霸主投降，你会得到这个

ATTACHE_TO_SUBJECT_EFFECT = -0.05,				— If overlord sent attaches to the subject it losses autonomy

ATTACHE_TO_SUBJECT_EFFECT = -0.05， — 如果 overlord 派遣了 attas，则它失去了自主权

ATTACHE_TO_OVERLORD_EFFECT = 0.05,				— If subject sent attaches to the overlord it gains autonomy

ATTACHE_TO_OVERLORD_EFFECT = 0.05， — 如果被派遣的对象附加到霸主，则它获得自主权



AUTONOMY_LEVEL_CHANGE_PP_COST_BASE = 50.0,		— Base cost of changing level of autonomy

AUTONOMY_LEVEL_CHANGE_PP_COST_BASE = 50.0， — 更改自主性级别的基本成本

AUTONOMY_LEVEL_CHANGE_PP_ANNEX = 300,			— Annexation cost

AUTONOMY_LEVEL_CHANGE_PP_ANNEX = 300， — 吞并成本

AUTONOMY_LEVEL_CHANGE_PP_FREE = 300,			— Break free cost

AUTONOMY_LEVEL_CHANGE_PP_FREE = 300， — 免费成本

MAX_SCORE_DIFF_TO_CHANGE_AUTONOMY = 10,			— The max diff between current freedom score and the cap for next or previous level allowed for changing

MAX_SCORE_DIFF_TO_CHANGE_AUTONOMY = 10 — 当前自由度分数与允许更改的下一个或上一个级别的上限之间的最大差异

MASTER_BUILD_AUTONOMY_FACTOR = -0.7, — scales autonomy gain from construction by this

MASTER_BUILD_AUTONOMY_FACTOR = -0.7， — 按此比例缩放构建获得的自主性

VICTORY_POINT_WORTH_FACTOR = 10,				— multiplier when calcualting province worth (surrender)

VICTORY_POINT_WORTH_FACTOR = 10， — 计算省份价值（投降）时的乘数

VICTORY_POINT_WORTH_FACTOR_WARSCORE = 0.2,				— multiplier for each victory points when calculating province worth for warscore

VICTORY_POINT_WORTH_FACTOR_WARSCORE = 0.2， — 计算 Warscore 省份价值时每个胜利点的乘数

PROVINCE_WORTH_FROM_STATE_VALUE_FACTOR_WARSCORE = 0.2, 	— multiplier for the average value a province received from state for warscore

PROVINCE_WORTH_FROM_STATE_VALUE_FACTOR_WARSCORE = 0.2， — 省份从 state 获得的 WarScore 平均值的乘数

CAPITAL_CAPITULATE_BONUS_SCORE = 150,			— extra bonus when deciding who to capitulate to (applied to capital holder)

CAPITAL_CAPITULATE_BONUS_SCORE = 150， — 决定向谁投降时的额外奖金（适用于资本持有人）

CAPITAL_CAPITULATE_BONUS_SCORE_MUL = 1.5,		— extra bonus multiplier when deciding who to capitulate to (applied to capital holder)

CAPITAL_CAPITULATE_BONUS_SCORE_MUL = 1.5， — 决定向谁投降时的额外奖金乘数（适用于资本持有人）

IDEOLOGY_JOIN_FACTION_MIN_LEVEL = 0.3,			— ideology limit required to join faction

IDEOLOGY_JOIN_FACTION_MIN_LEVEL = 0.3， — 加入阵营所需的意识形态限制

JOIN_FACTION_LIMIT_CHANGE_AT_WAR = 0.5,			— if in defensive war this or your modifier is counted as limit to join factions (so if you have 80% join limit this now means you can join at 50%)

JOIN_FACTION_LIMIT_CHANGE_AT_WAR = 0.5， — 如果在防御战中，这个或你的修正被算作加入阵营的限制（所以如果你有 80% 的加入限制，这意味着你现在可以以 50% 的加入加入）

LICENSE_ACCEPTANCE_OPINION_FACTOR = 0.4,		— Opinion modifier for acceptance of license production requests.

LICENSE_ACCEPTANCE_OPINION_FACTOR = 0.4 — 用于接受许可证生产请求的意见修饰符。

LICENSE_ACCEPTANCE_PUPPET_BASE = 15,			— Acceptance modifier for puppets requesting production licenses.

LICENSE_ACCEPTANCE_PUPPET_BASE = 15 — 请求生产许可证的 Puppet 的接受修饰符。

LICENSE_ACCEPTANCE_TECH_DIFFERENCE = 2, 		— Acceptance modifier for each year of technology difference.

LICENSE_ACCEPTANCE_TECH_DIFFERENCE = 2 — 技术差异每年的验收修饰符。

LICENSE_ACCEPTANCE_TECH_DIFFERENCE_BASE = 10, — Acceptance base for tech difference

LICENSE_ACCEPTANCE_TECH_DIFFERENCE_BASE = 10， — 技术差异的接受基础

LICENSE_ACCEPTANCE_SAME_FACTION = 20,			— Acceptance modifier for being in the same faction

LICENSE_ACCEPTANCE_SAME_FACTION = 20， — 属于同一阵营的接受修正



WARGOAL_COST_LEND_LEASE = -0.25, — cost modifier to wargoaljustification for LL

WARGOAL_COST_LEND_LEASE = -0.25， — LL 的 wargoaljustification 的成本修正

WARGOAL_COST_DOCKING_RIGHTS = -0.2, — cost modifier to wargoaljustification for dockign rights

WARGOAL_COST_DOCKING_RIGHTS = -0.2， — Dockign 权限的 wargoaljustification 的成本修正

WARGOAL_COST_VOLUNTEERS = -0.5, — cost modifier to wargoaljustification for volunteers

WARGOAL_COST_VOLUNTEERS = -0.5， — 志愿者的 wargoaljustification 的成本修正



ASSUME_FACTION_LEADERSHIP_PP_COST = 200,				— Political power cost to assume faction leadership

ASSUME_FACTION_LEADERSHIP_PP_COST = 200， — 担任派系领导的政治权力成本

ASSUME_FACTION_LEADERSHIP_MIN_MANPOWER_RATIO = 2,		— The minimum ratio of manpower that a country must have compared to the current leader in order to assume leadership.

ASSUME_FACTION_LEADERSHIP_MIN_MANPOWER_RATIO = 2， — 一个国家与当前领导人相比必须具备的最低人力比率，才能担任领导职务。

ASSUME_FACTION_LEADERSHIP_MIN_FACTORY_RATIO = 1.5,		— The minimum ratio of factories that a country must have compared to the current leader in order to assume leadership.

ASSUME_FACTION_LEADERSHIP_MIN_FACTORY_RATIO = 1.5， — 一个国家与当前领导人相比必须拥有的工厂的最低比率，才能担任领导职务。

ASSUME_FACTION_LEADERSHIP_COOLDOWN_DAYS = 180,			— Number of days after formation of faction or change in leadership before another country is allowed to assume leadership.

ASSUME_FACTION_LEADERSHIP_COOLDOWN_DAYS = 180， — 在派系形成或领导层变更后，允许另一个国家担任领导的天数。

ASSUME_FACTION_SPYMASTER_COOLDOWN_DAYS = 180,			— Number of days after change of Spy Master before another country is allowed to become Spy Master.

ASSUME_FACTION_SPYMASTER_COOLDOWN_DAYS = 180， — 在更改 Spy Master 后允许另一个国家/地区成为 Spy Master 之前的天数。

FACTION_LEADERSHIP_CHANGE_ALERT_THRESHOLD = 0.8,		— Threshold for showing an alert when a faction member is close to being able to assume leadership of the faction that a player currently leads.

FACTION_LEADERSHIP_CHANGE_ALERT_THRESHOLD = 0.8， — 当派系成员即将能够担任玩家当前领导的派系的领导时显示警报的阈值。

FACTION_LEADERSHIP_CHANGE_NOT_SUBJECT_WEIGHT = 2,		— Importance of subject status when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_NOT_SUBJECT_WEIGHT = 2， — 在确定派系成员离能够担任领导的程度有多近时，主体地位的重要性。

FACTION_LEADERSHIP_CHANGE_NOT_CAPITULATED_WEIGHT = 2,	— Importance of capitulation status when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_NOT_CAPITULATED_WEIGHT = 2， — 在确定派系成员离能够担任领导有多近时，投降状态的重要性。

FACTION_LEADERSHIP_CHANGE_IN_ALL_WARS_WEIGHT = 1,		— Importance not being in all faction leader wars when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_IN_ALL_WARS_WEIGHT = 1， — 在确定派系成员离能够担任领导有多近时，不出现在所有派系领袖战争中的重要性。

FACTION_LEADERSHIP_CHANGE_COOLDOWN_WEIGHT = 1,			— Importance of leadership change cooldown when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_COOLDOWN_WEIGHT = 1， — 在确定派系成员离能够担任领导的程度时，领导层更改冷却时间的重要性。

FACTION_LEADERSHIP_CHANGE_MANPOWER_WEIGHT = 2,			— Importance of manpower in field when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_MANPOWER_WEIGHT = 2， — 在确定派系成员离能够担任领导有多近时，现场人力的重要性。

FACTION_LEADERSHIP_CHANGE_FACTORY_WEIGHT = 2,			— Importance of factory count when determining how close a faction member is to being able to assume leadership.

FACTION_LEADERSHIP_CHANGE_FACTORY_WEIGHT = 2， — 在确定派系成员离能够担任领导的程度时，工厂数量的重要性。



EMBARGO_COST = 100,										— One-time cost

EMBARGO_COST = 100 — 一次性成本

REVOKE_EMBARGO_COST = 0,								— Cost to remove an existing embargo

REVOKE_EMBARGO_COST = 0， – 取消现有禁运的成本

EMBARGO_THREAT_THRESHOLD = 30,						— Target-generated threat threshold to allow embargo (affected by modifiers)

EMBARGO_THREAT_THRESHOLD = 30， — 目标生成的允许禁运的威胁阈值（受修饰符影响）



EMBARGO_SAME_IDEOLOGY_AI_WEIGHT = -20,				— AI weight for same ideology

EMBARGO_SAME_IDEOLOGY_AI_WEIGHT = -20， — 相同意识形态的 AI 权重

EMBARGO_DIFFERENT_IDEOLOGY_AI_WEIGHT = 15,			— AI weight for different ideology

EMBARGO_DIFFERENT_IDEOLOGY_AI_WEIGHT = 15， — 不同意识形态的 AI 权重

EMBARGO_DIFFERENT_IDEOLOGY_AT_OFFENSIVE_WAR_AI_WEIGHT = 10,	—AI weight for different ideology and in offensive war (additive with above)

EMBARGO_DIFFERENT_IDEOLOGY_AT_OFFENSIVE_WAR_AI_WEIGHT = 10， —不同意识形态和进攻性战争的 AI 权重（与上述相加）

EMBARGO_RECIPIENT_IS_MAJOR_AI_WEIGHT = 10,			— Ai weight for recipient being major

EMBARGO_RECIPIENT_IS_MAJOR_AI_WEIGHT = 10， — 收件人的 Ai 权重为 major

EMBARGO_NEIGHBOUR_AI_WEIGHT = -10,					—AI weight for embargoing neighbors (neighbors are big and scary, we should consider not doing it)

EMBARGO_NEIGHBOUR_AI_WEIGHT = -10， —禁运邻居的 AI 权重（邻居又大又可怕，我们应该考虑不要这样做）



EQUIPMENT_PURCHASE_ACCEPTANCE_OPINION = 1.1, — Acceptance factor for opinion

EQUIPMENT_PURCHASE_ACCEPTANCE_OPINION = 1.1， — 意见的接受因子

EQUIPMENT_PURCHASE_ACCEPTANCE_SAME_IDEOLOGY = 15, — Acceptance value added if same ideology

EQUIPMENT_PURCHASE_ACCEPTANCE_SAME_IDEOLOGY = 15， — 如果意识形态相同，则接受值增加

EQUIPMENT_PURCHASE_ACCEPTANCE_SCRIPTED_IDEOLOGY_ACCEPTANCE = 1.0, — Acceptance factor for scripted ideology acceptance modifier

EQUIPMENT_PURCHASE_ACCEPTANCE_SCRIPTED_IDEOLOGY_ACCEPTANCE = 1.0， — 脚本化意识形态接受修饰符的接受因子

EQUIPMENT_PURCHASE_ACCEPTANCE_TRADE_INFLUENCE = 0.70, — Acceptance factor for trade influence (adjusted from base value)

EQUIPMENT_PURCHASE_ACCEPTANCE_TRADE_INFLUENCE = 0.70， — 交易影响的接受系数（根据基值调整）

EQUIPMENT_PURCHASE_ACCEPTANCE_COMPETING_FACTIONS = -30, — Acceptance value added if both countries are in factions, and factions are different

EQUIPMENT_PURCHASE_ACCEPTANCE_COMPETING_FACTIONS = -30， — 如果两个国家都在派系中，并且派系不同，则增加接受值

EQUIPMENT_PURCHASE_ACCEPTANCE_EMBARGO = -200, — Acceptance value added if either side has embargoed the other

EQUIPMENT_PURCHASE_ACCEPTANCE_EMBARGO = -200， — 如果任何一方禁运另一方，则增加的接受值

EQUIPMENT_PURCHASE_ACCEPTANCE_NON_AGGRESSION_PACT = 25, — Acceptance value added if there is a non-aggression pact between the countries

EQUIPMENT_PURCHASE_ACCEPTANCE_NON_AGGRESSION_PACT = 25， — 如果国家之间存在互不侵犯条约，则增加接受值



MARKET_ACCESS_ACCEPTANCE_OPINION = 1.1, — Acceptance factor for opinion

MARKET_ACCESS_ACCEPTANCE_OPINION = 1.1， — 意见的接受因子

MARKET_ACCESS_ACCEPTANCE_SAME_IDEOLOGY = 15, — Acceptance value added if same ideology

MARKET_ACCESS_ACCEPTANCE_SAME_IDEOLOGY = 15， — 如果意识形态相同，则会增加接受值

MARKET_ACCESS_ACCEPTANCE_SCRIPTED_IDEOLOGY_ACCEPTANCE = 1.0, — Acceptance factor for scripted ideology acceptance modifier

MARKET_ACCESS_ACCEPTANCE_SCRIPTED_IDEOLOGY_ACCEPTANCE = 1.0， — 脚本化意识形态接受修饰符的接受因子

MARKET_ACCESS_ACCEPTANCE_TRADE_INFLUENCE = 0.70, — Acceptance factor for trade influence (adjusted from base value)

MARKET_ACCESS_ACCEPTANCE_TRADE_INFLUENCE = 0.70， — 交易影响的接受因子（根据基值调整）

MARKET_ACCESS_ACCEPTANCE_COMPETING_FACTIONS = -30, — Acceptance value added if both countries are in factions, and factions are different

MARKET_ACCESS_ACCEPTANCE_COMPETING_FACTIONS = -30， — 如果两个国家都在派系中，并且派系不同，则增加接受值

MARKET_ACCESS_ACCEPTANCE_EMBARGO = -200, — Acceptance value added if either side has embargoed the other

MARKET_ACCESS_ACCEPTANCE_EMBARGO = -200 — 如果任何一方禁运另一方，则增加的接受值

MARKET_ACCESS_ACCEPTANCE_NO_TRADE_ROUTE = -100, — Acceptance value added if there is no valid trade route between the countries

MARKET_ACCESS_ACCEPTANCE_NO_TRADE_ROUTE = -100， — 如果国家之间没有有效的贸易路线，则增加验收值

MARKET_ACCESS_ACCEPTANCE_NON_AGGRESSION_PACT = 25, — Acceptance value added if there is a non-aggression pact between the countries

MARKET_ACCESS_ACCEPTANCE_NON_AGGRESSION_PACT = 25， — 如果国家之间存在互不侵犯条约，则增加接受值

},



NCountry = {

NCountry = {

EVENT_PROCESS_OFFSET = 20,						— Events are checked every X day per country or state (1 is ideal, but CPU heavy)

EVENT_PROCESS_OFFSET = 20 — 每个国家/地区或州每 X 天检查一次事件（1 个是理想的，但 CPU 占用大量资源）

BASE_RESEARCH_SLOTS = 2,						— Base number of research slots per country.

BASE_RESEARCH_SLOTS = 2， — 每个国家/地区的研究槽位基本数量。

POPULATION_YEARLY_GROWTH_BASE = 0.015,			— basic population growth per year, used for monthly manpower gain

POPULATION_YEARLY_GROWTH_BASE = 0.015， — 每年的基本人口增长，用于每月人力增长

RESISTANCE_STRENGTH_FROM_VP = 0.001,			— How much strength ticking speed gives each VP score.

RESISTANCE_STRENGTH_FROM_VP = 0.001， — 每个 VP 分数的强度滴答作响的速度。

RESISTANCE_STRENGTH_FROM_NEIGHBORS = 0.5, 		— Multiplies how much resistance can spread from one state to its neighbors, a state will spread whatever is highest of its victorypoints resistance increase or half of any of its neighbors spread, multiplied by this

RESISTANCE_STRENGTH_FROM_NEIGHBORS = 0.5， — 乘以一个州可以蔓延到其邻国的抵抗力量，一个州将传播其胜利点数抵抗力增加量的最高值或其任何邻国传播量的一半，乘以此

RESISTANCE_DECAY_WHEN_NO_GROWTH = 0.005,		— Resistance will fall by this much each day if there is nothing increasing it ( no VPs and no spread from neighbors )

RESISTANCE_DECAY_WHEN_NO_GROWTH = 0.005， — 如果没有增加阻力（没有 VP，也没有来自邻居的传播），阻力每天都会下降这么多

REINFORCEMENT_DIVISION_PRIORITY_COUNT = 3, 		— How many priority stages we have in division template? 0)Reserves, 1)Normal, 2)Elite.

REINFORCEMENT_DIVISION_PRIORITY_COUNT = 3， — 我们在除法模板中有多少个优先阶段？0）储备金，1）普通，2）精英。

REINFORCEMENT_DIVISION_PRIORITY_DEFAULT = 1, 	— Each template by default is 1)Normal

REINFORCEMENT_DIVISION_PRIORITY_DEFAULT = 1， — 默认情况下，每个模板为 1）Normal

REINFORCEMENT_THEATER_GROUP_PRIORITY_DEFAULT = 1,— Each theater group by default is 1)Normal

REINFORCEMENT_THEATER_GROUP_PRIORITY_DEFAULT = 1，— 默认情况下，每个影院组为 1）正常

REINFORCEMENT_THEATRE_PRIORITY_COUNT = 3,		— Same as with divisions…

REINFORCEMENT_THEATRE_PRIORITY_COUNT = 3， — 与除法相同...

REINFORCEMENT_THEATRE_PRIORITY_DEFAULT = 1,

REINFORCEMENT_THEATRE_PRIORITY_DEFAULT = 1，

REINFORCEMENT_AIRBASE_PRIORITY_COUNT = 3,

REINFORCEMENT_AIRBASE_PRIORITY_COUNT = 3，

REINFORCEMENT_AIRBASE_PRIORITY_DEFAULT = 1,

REINFORCEMENT_AIRBASE_PRIORITY_DEFAULT = 1，

REINFORCEMENT_DELIVERY_SPEED_MIN = 0.6,			— The distance from the supply region to capital should affect the speed only a little bit. Main factor for penalty is overcrowded areas, and not the route length.

REINFORCEMENT_DELIVERY_SPEED_MIN = 0.6， — 从供应区域到首都的距离应该只对速度产生一点影响。处罚的主要因素是过度拥挤的区域，而不是路线长度。

REINFORCEMENT_EQUIPMENT_DELIVERY_SPEED = 0.3,	— Modifier for army equipment reinforcement speed

REINFORCEMENT_EQUIPMENT_DELIVERY_SPEED = 0.3， — 军队装备增援速度的修正

REINFORCEMENT_MANPOWER_DELIVERY_SPEED = 10.0,	— Modifier for army manpower reinforcement delivery speed (travel time)

REINFORCEMENT_MANPOWER_DELIVERY_SPEED = 10.0， — 军队人力增援投递速度（旅行时间）的修正

REINFORCEMENT_MANPOWER_CHUNK = 0.1,				— Chunk size of manpower reinforcement delivery, in % of total manpower needed by the template.

REINFORCEMENT_MANPOWER_CHUNK = 0.1， — 人力增援交付的区块大小，以模板所需总人力的百分比为单位。

EQUIPMENT_UPGRADE_CHUNK_MAX_SIZE = 10,			— Maximum chunk size of equipment upgrade distribution per update.

EQUIPMENT_UPGRADE_CHUNK_MAX_SIZE = 10 — 每次更新的设备升级分配的最大块大小。

COUNTRY_SCORE_MULTIPLIER = 1.0,					— Weight of the country score.

COUNTRY_SCORE_MULTIPLIER = 1.0， — 国家/地区得分的权重。

ARMY_SCORE_MULTIPLIER = 0.15,					— Based on number of armies.

ARMY_SCORE_MULTIPLIER = 0.15， — 基于军队数量。

NAVY_SCORE_MULTIPLIER = 1.0,					— Based on number of navies.

NAVY_SCORE_MULTIPLIER = 1.0， — 基于海军数量。

AIR_SCORE_MULTIPLIER = 0.1,						— Based on number of planes (which is typically a lot).

AIR_SCORE_MULTIPLIER = 0.1 — 基于平面数（通常很多）。

INDUSTRY_SCORE_MULTIPLIER = 1.0,				— Based on number of factories.

INDUSTRY_SCORE_MULTIPLIER = 1.0 — 基于工厂数量。

PROVINCE_SCORE_MULTIPLIER = 0.1,				— Based on number of controlled provinces.

PROVINCE_SCORE_MULTIPLIER = 0.1， — 基于受控省份的数量。

NUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_INFRA = 0.2,		— Reduce enemy national war support on nuking a province, the value scales with infrastructure up to this number

NUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_INFRA = 0.2， — 减少敌人对核爆一个省份的国家战争支持，该值与基础设施成正比，最高可达此数字

NUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_VP = 3,			— War support will be scaled down if there’s less VP than this in the province

NUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_VP = 3， — 如果领地中的 VP 少于此数量，对抗战支持将按比例减少

THERMONUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_INFRA = 0.2,	— Reduce enemy national war support on nuking a province, the value scales with infrastructure up to this number

THERMONUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_INFRA = 0.2， — 减少敌人对省份的核爆国家战争支持，该值与基础设施成正比，最高可达此数字

THERMONUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_VP = 3,		— War support will be scaled down if there’s less VP than this in the province

THERMONUCLEAR_BOMB_DROP_WAR_SUPPORT_EFFECT_MAX_VP = 3， — 如果领地中的 VP 少于此数量，对抗战支持将按比例减少

WEEKLY_STABILITY_GAIN = 0.0,

WEEKLY_STABILITY_GAIN = 0.0，

WEEKLY_WAR_SUPPORT_GAIN = 0.0,

WEEKLY_WAR_SUPPORT_GAIN = 0.0，

SUPPLY_CONVOY_FACTOR = 0.25,					— How many convoys each supply needs

SUPPLY_CONVOY_FACTOR = 0.25， — 每个补给需要多少个护航队

CONVOY_RANGE_FACTOR = 1, — How much range affects convoy need for resource trades and supply

CONVOY_RANGE_FACTOR = 1， — 范围对资源交易和供应的车队需求的影响程度

CONVOY_LENDLEASE_RANGE_FACTOR = 1,				— How much range affects convoy need for lend lease

CONVOY_LENDLEASE_RANGE_FACTOR = 1， — 范围对租借船队需求的影响

CONVOY_INTERNATIONAL_MARKET_RANGE_FACTOR = 1,	— How much range affects convoy need for international market

CONVOY_INTERNATIONAL_MARKET_RANGE_FACTOR = 1， — 航程对国际市场护航需求的影响程度

LOCAL_MANPOWER_ACCESSIBLE_NON_CORE_FACTOR = 0.02, — accessible recruitable factor base

LOCAL_MANPOWER_ACCESSIBLE_NON_CORE_FACTOR = 0.02， — 可招募因子基数

MAX_NON_CORE_MANPOWER_FACTOR = 1.0,				— max clamp for recruitable local non core manpower factor for states

MAX_NON_CORE_MANPOWER_FACTOR = 1.0， — 各州可招募的本地非核心人力系数的最大限制

DEFAULT_STABILITY = 0.5,						— Default stability if not scripted otherwise.

DEFAULT_STABILITY = 0.5， — 默认稳定性（如果未另有脚本）。

DEFAULT_WAR_SUPPORT = 0.5,						— Default war support if not scripted otherwise.

DEFAULT_WAR_SUPPORT = 0.5， — 默认 war 支持（如果没有脚本）。

BASE_STABILITY_WAR_FACTOR = -0.2,				— Default stability war factor

BASE_STABILITY_WAR_FACTOR = -0.2， — 默认稳定性 war 因子

BASE_STABILITY_PARTY_POPULARITY_FACTOR = 0.15,	— Default stability rulling party popularity factor

BASE_STABILITY_PARTY_POPULARITY_FACTOR = 0.15， — 默认稳定性影响政党人气因子

MIN_COUP_STABILITY_FACTOR = 0.0,				— Min value of coup factor in stability

MIN_COUP_STABILITY_FACTOR = 0.0， — 稳定性中政变因子的最小值

MAX_COUP_STABILITY_FACTOR = 2.0,				— Max value of coup factor in stability

MAX_COUP_STABILITY_FACTOR = 2.0， — 稳定性中政变因子的最大值

MIN_COUP_SUCCESS_STABILITY = 0.8,				— Max stability when coup will happen

MIN_COUP_SUCCESS_STABILITY = 0.8， — 政变发生时的最大稳定性

WAR_SUPPORT_OFFNSIVE_WAR = -0.2,				— Impact of being in offensive war

WAR_SUPPORT_OFFNSIVE_WAR = -0.2， — 处于进攻战中的影响

WAR_SUPPORT_DEFENSIVE_WAR = 0.2,				— Impact of being in defensive war

WAR_SUPPORT_DEFENSIVE_WAR = 0.2， — 处于防御战争中的影响

WAR_SUPPORT_TENSION_IMPACT = 0.4,				— Total impact of world tension

WAR_SUPPORT_TENSION_IMPACT = 0.4， — 世界紧张局势的总体影响

MIN_STABILITY = 0.0,

MIN_STABILITY = 0.0，

MAX_STABILITY = 1.0,

MAX_STABILITY = 1.0，

MIN_WAR_SUPPORT = 0.0,

MIN_WAR_SUPPORT = 0.0，

MAX_WAR_SUPPORT = 1.0,

MAX_WAR_SUPPORT = 1.0，

FRONT_PROVINCE_SCORE = 20, 					— Max province score of a front. Used for the hostile troop alert

FRONT_PROVINCE_SCORE = 20， — 前线的最大省份分数。用于敌对部队警报

MAJOR_IC_RATIO = 3, — difference in total factories needed to be considered major with respect to other nation

MAJOR_IC_RATIO = 3， — 与其他国家相比，工厂总数的差异需要被视为主要

MAJOR_MIN_FACTORIES = 35,						— need at least these many factories to become a major

MAJOR_MIN_FACTORIES = 35， — 至少需要这么多工厂才能成为主要

MAX_INTELLIGENCE_DIFFERENCE = 10.0,				— (Old Intel) Max difference in intelligence levels between countries

MAX_INTELLIGENCE_DIFFERENCE = 10.0， — （旧英特尔） 国家之间情报水平的最大差异

INTEL_FROM_ALLIANCE_FACTOR = 0.3,				— Multiplied to the difference between a country intel and the maximum value in the alliance to compute the amount of intel that flows from the alliance to that country. 0 means no alliance contribution, 1 means a country intel’s is the same as the max in the alliance.

INTEL_FROM_ALLIANCE_FACTOR = 0.3， — 乘以一个国家/地区的情报与联盟中的最大值之间的差值，以计算从联盟流向该国家/地区的情报量。0 表示没有联盟贡献，1 表示一个国家的 Intel 与联盟中的 MAX 相同。

MAX_INTELLIGENCE_DATA_DEVIATION = 1.0, — (Old Intel) Max deviation in estimating default espionage values ( 0.0 - 1.0 )

MAX_INTELLIGENCE_DATA_DEVIATION = 1.0， — （旧 Intel） 估计默认间谍值的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_MILITARY_DATA_DEVIATION = 1.0, — (Old Intel) Max deviation in estimating enemy military units amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_MILITARY_DATA_DEVIATION = 1.0， — （旧情报） 估计敌方军事单位数量的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_NAVY_DATA_DEVIATION = 0.3,		— (Old Intel) Max deviation in estimating enemy ships amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_NAVY_DATA_DEVIATION = 0.3， — （旧情报） 估计敌舰数量的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_AIR_DATA_DEVIATION = 1.0,		— (Old Intel) Max deviation in estimating enemy air planes amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_AIR_DATA_DEVIATION = 1.0， — （旧情报） 估计敌机数量的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_CONVOY_DATA_DEVIATION = 0.3,	— (Old Intel) Max deviation in estimating enemy convoys amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_CONVOY_DATA_DEVIATION = 0.3， — （旧情报） 估计敌方护航队数量的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_MANPOWER_DATA_DEVIATION = 0.4,	— (Old Intel) Max deviation in estimating enemy total manpower amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_MANPOWER_DATA_DEVIATION = 0.4， — （旧情报） 估计敌方总兵力的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_FIELDED_MANPOWER_DATA_DEVIATION = 0.35, — (Old Intel) Max deviation in estimating enemy fielded manpower amount ( 0.0 - 1.0 )

MAX_INTELLIGENCE_FIELDED_MANPOWER_DATA_DEVIATION = 0.35， — （旧情报） 估计敌方驻扎兵力的最大偏差 （ 0.0 - 1.0 ）

MAX_INTELLIGENCE_INDUSTRY_DATA_DEVIATION = 0,4, — (Old Intel) Max deviation in estimating enemy total industry

MAX_INTELLIGENCE_INDUSTRY_DATA_DEVIATION = 0,4， — （旧英特尔）估计敌人总工业的最大偏差

MIN_MANPOWER_RATIO = 0.15,						— Min manpower ratio to show manpower alert

MIN_MANPOWER_RATIO = 0.15， — 显示人力警报的最小人力比率

ARMY_IMPORTANCE_FACTOR = 5.0,					— Army factor for AI and calculations

ARMY_IMPORTANCE_FACTOR = 5.0， — AI 和计算的陆军系数

TERRAIN_IMPORTANCE_FACTOR = 5.0,				— Terrain base factor for state strategic value

TERRAIN_IMPORTANCE_FACTOR = 5.0， — 州战略价值的地形基础因子

VICTORY_POINTS_IMPORTANCE_FACTOR = 5.0,			— State victory points importance factor for AI and calculations

VICTORY_POINTS_IMPORTANCE_FACTOR = 5.0， — AI 和计算的州胜利点重要因子

BUILDING_IMPORTANCE_FACTOR = 3.0,				— State building importance factor for AI and calculations

BUILDING_IMPORTANCE_FACTOR = 3.0， — AI 和计算的状态建设重要性因子

RESOURCE_IMPORTANCE_FACTOR = 1.0,				— State resource importance factor for AI and calculations

RESOURCE_IMPORTANCE_FACTOR = 1.0， — AI 和计算的状态资源重要性因子

INTERPOLATED_FRONT_STEPS_SHORT = 2,				— Performance optimization - The amount of steps for interpolated fronts. Non-AI countries got full interpolated fronts, the rest has optimized version of it.

INTERPOLATED_FRONT_STEPS_SHORT = 2， — 性能优化 — 插值前沿的步数。非 AI 国家有完整的插值前线，其余国家都有它的优化版本。

MIN_AIR_RESERVE_RATIO = 0.33,					— Min manpower ratio to show air reserves alert

MIN_AIR_RESERVE_RATIO = 0.33， — 显示空中储备警报的最小人力比

POLITICAL_POWER_LOWER_CAP = -500.0,				— Min amount of political power country should have

POLITICAL_POWER_LOWER_CAP = -500.0， — 国家应具有的最小政治权力数量

POLITICAL_POWER_UPPER_CAP = 2000.0,				— Max amount of political power country should have

POLITICAL_POWER_UPPER_CAP = 2000.0， — 国家应拥有的最大政治权力

RESISTANCE_IMPORTANT_LEVEL = 0.25,				— Level when resistance becomes dangerous

RESISTANCE_IMPORTANT_LEVEL = 0.25， — 阻力变得危险时的液位

RESISTANCE_IMPORTANT_COUNTRY_LEVEL = 0.25,		— Level when average resistance in a country becomes dangerous

RESISTANCE_IMPORTANT_COUNTRY_LEVEL = 0.25， — 当一个国家的平均电阻变得危险时

MIN_MAJOR_COUNTRIES	= 7,						— MIN_MAJOR_COUNTRIES countries with most factories will be considered as major countries

MIN_MAJOR_COUNTRIES = 7， — MIN_MAJOR_COUNTRIES 拥有最多工厂的国家/地区将被视为主要国家/地区

ADDITIONAL_MAJOR_COUNTRIES_IC_RATIO = 0.7,		— Countries will also be considered major when having more factories that the average of top MIN_MAJOR_COUNTRIES countries’ factories times ADDITIONAL_MAJOR_COUNTRIES_IC_RATIO

ADDITIONAL_MAJOR_COUNTRIES_IC_RATIO = 0.7， — 当国家/地区的工厂数量超过前 MIN_MAJOR_COUNTRIES 个国家/地区的工厂平均值乘以 ADDITIONAL_MAJOR_COUNTRIES_IC_RATIO 时，国家/地区也将被视为主要国家/地区

BASE_TENSION_MAJOR_COUNTRY_INDEX = 1,			— Which major country should be considered the base country when scaling generated world tension. 0 is the country with the most factories, 1 is the second most-factories country etc. This number has to be lower than MIN_MAJOR_COUNTRIES

BASE_TENSION_MAJOR_COUNTRY_INDEX = 1， — 当缩放产生世界紧张局势时，哪个主要国家应该被视为基准国。0 是工厂最多的国家，1 是工厂数量第二多的国家，依此类推。此数字必须小于 MIN_MAJOR_COUNTRIES

MIN_NAVAL_SUPPLY_EFFICIENCY = 0.1,				— Min ratio when supplies will be considered delivered from the capital by naval path

MIN_NAVAL_SUPPLY_EFFICIENCY = 0.1， — 当补给被视为通过海军路径从首都运送时的最小比率

PARADROP_AIR_SUPERIORITY_RATIO = 0.7,			— Min ratio of air superiority for paradropping

PARADROP_AIR_SUPERIORITY_RATIO = 0.7， — 空降的最小空优比

STATE_VALUE_BASE = 10.0, — Base value of a state (value is used to determine costs in e.g. peace conferences)

STATE_VALUE_BASE = 10.0， — 状态的基值（该值用于确定成本，例如和平会议）

STATE_VALUE_BUILDING_SLOTS_MULT = 4.0, — The value of each building slot in a state

STATE_VALUE_BUILDING_SLOTS_MULT = 4.0， — 状态中每个建筑槽的值

STATE_VALUE_MANPOWER_FACTOR = 0.1, — State cost increases with this for every 10k population (so 3.1M becomes 310 and then multiplied by this)

STATE_VALUE_MANPOWER_FACTOR = 0.1， — 每 10k 人口的州成本也会随之增加（因此 3.1M 变为 310，然后乘以此）

INVASION_REPORT_EXPERATION_DAYS = 30,			— Invasion experation days

INVASION_REPORT_EXPERATION_DAYS = 30， — 入侵体验日

MIN_FOCUSES_FOR_CONTINUOUS = 10,				— Focuses needed to unlock continuous focuses

MIN_FOCUSES_FOR_CONTINUOUS = 10， — 解锁持续专注所需的专注

AUTONOMOUS_TOTAL_SCORE = 5000,					— Total score for autonomous scale

AUTONOMOUS_TOTAL_SCORE = 5000， — 自主量表的总分

AUTONOMOUS_SPILLOVER = 0.025,					— Total score that can be saved to reach next level

AUTONOMOUS_SPILLOVER = 0.025， — 可以保存以达到下一级别的总分

CIVIL_WAR_INVOLVEMENT_MIN_TENSION = 0.5,		— base value of world tension to involve other sides to the civil war

CIVIL_WAR_INVOLVEMENT_MIN_TENSION = 0.5， — 涉及内战其他各方的世界紧张局势的基值

UNCAPITULATE_LEVEL = 0.1, — if we reclaim this much and our capital we reset capitulate status

UNCAPITULATE_LEVEL = 0.1， — 如果我们收回这么多，我们的资本就会重置投降状态

BASE_SURRENDER_LIMIT = 0.8,						— Base level of occupation required for country surrender

BASE_SURRENDER_LIMIT = 0.8， — 国家投降所需的基本职业水平

SURRENDER_LIMIT_MULT_FOR_COUNTRIES_WITH_NO_CORES = 0.7, — Countries with no owned cores will their surrender level multiplied by this amount

SURRENDER_LIMIT_MULT_FOR_COUNTRIES_WITH_NO_CORES = 0.7， — 没有拥有核心的国家/地区的投降水平将乘以此金额

MIN_SURRENDER_LIMIT = 0.2,						— Minimum non-forced surrender limit. valid 0-1

MIN_SURRENDER_LIMIT = 0.2， — 最低非强制投降限额。有效期 0-1

BASE_MOBILIZATION_SPEED = 0.01,					— Base speed of manpower mobilization #in 1/1000 of 1 %

BASE_MOBILIZATION_SPEED = 0.01， — 人力动员的基本速度 #in 1/1000 的 1 %



INTERCEPTION_WAR_SUPPORT_SCALE = 0.00001,		— Scaling of interceptions to war support impact

INTERCEPTION_WAR_SUPPORT_SCALE = 0.00001， — 拦截对战争支持影响的缩放比例

INTERCEPTION_BOMBING_WAR_SUPPORT_IMPACT = 0.3,	— Max impact of interceptions on the war support

INTERCEPTION_BOMBING_WAR_SUPPORT_IMPACT = 0.3， — 拦截对战争支持的最大影响



BOMBING_WAR_SUPPORT_PENALTY_SCALE = -0.00015, 			— Scaling of bomber damage to war support impact, will be added weekly as a war support penalty

BOMBING_WAR_SUPPORT_PENALTY_SCALE = -0.00015， — 轰炸机伤害对战争支援影响的比例，将作为战争支援惩罚每周增加

MAX_BOMBING_WEEKLY_WAR_SUPPORT_PENALTY = -0.006,		— Max penalty that will gained per week from bomber’s damage

MAX_BOMBING_WEEKLY_WAR_SUPPORT_PENALTY = -0.006， — 每周从轰炸机的伤害中获得的最大惩罚

BOMBING_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001,		— Weekly decay of bomber damage war support penalty

BOMBING_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001， — 轰炸机每周衰减伤害战争支援惩罚

MAX_BOMBING_WAR_SUPPORT_IMPACT = -0.3,					— Max total penalty from bomber’s damage

MAX_BOMBING_WAR_SUPPORT_IMPACT = -0.3， — 轰炸机伤害的最大总惩罚



HEROES_BEING_KILLED_WAR_SUPPORT_PENALTY_SCALE = -0.03,			— Scaling of war heroes manpower lost to war support impact, will be added weekly as a war support penalty

HEROES_BEING_KILLED_WAR_SUPPORT_PENALTY_SCALE = -0.03， — 因战争辅助影响而损失的战争英雄的人力缩放，将每周增加作为对抗战辅助惩罚

MAX_HEROES_BEING_KILLED_WEEKLY_WAR_SUPPORT_PENALTY = -0.006,		— Max penalty that will gained per week from war heroes manpower lost

MAX_HEROES_BEING_KILLED_WEEKLY_WAR_SUPPORT_PENALTY = -0.006， — 每周从战争英雄损失的人力中获得的最大惩罚

HEROES_BEING_KILLED_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001,	— Weekly decay of war heroes manpower lost war support penalty

HEROES_BEING_KILLED_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001， — 每周战争英雄衰减 人力损失 战争辅助惩罚

MAX_HEROES_BEING_KILLED_WAR_SUPPORT_IMPACT = -0.3,				— Max total penalty from war heroes manpower lost

MAX_HEROES_BEING_KILLED_WAR_SUPPORT_IMPACT = -0.3， — 战争英雄损失的最大总惩罚

WAR_SUPPORT_FROM_CASUALTIES = 0.025,							— Base value (inverted) for calculating heroes being killed

WAR_SUPPORT_FROM_CASUALTIES = 0.025， — 计算英雄被杀死的基础值（倒置）



CONVOYS_BEING_RAIDED_WAR_SUPPORT_PENALTY_SCALE = -0.05,			— Scaling of trade convoy raided to war support impact, will be added weekly as a war support penalty

CONVOYS_BEING_RAIDED_WAR_SUPPORT_PENALTY_SCALE = -0.05， — 根据战争支援影响突袭的贸易车队的缩放比例，将每周增加作为战争支援惩罚

MAX_CONVOYS_BEING_RAIDED_WEEKLY_WAR_SUPPORT_PENALTY = -0.006,	— Max penalty that will gained per week from trade convoy raided

MAX_CONVOYS_BEING_RAIDED_WEEKLY_WAR_SUPPORT_PENALTY = -0.006， — 每周从突袭贸易车队中获得的最大惩罚

CONVOYS_BEING_RAIDED_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001,	— Weekly decay of trade convoy raided war support penalty

CONVOYS_BEING_RAIDED_WEEKLY_WAR_SUPPORT_PENALTY_DECAY = 0.001， — 每周贸易运输队突袭战争辅助的衰减惩罚

MAX_CONVOYS_BEING_RAIDED_WAR_SUPPORT_IMPACT = -0.5,				— Max total penalty from trade convoy raided

MAX_CONVOYS_BEING_RAIDED_WAR_SUPPORT_IMPACT = -0.5， — 突袭贸易车队的最大总处罚



FEMALE_UNIT_LEADER_BASE_CHANCE = {

FEMALE_UNIT_LEADER_BASE_CHANCE = {

— applies as a factor to female unit leader randomization

— 作为女性单位队长随机化的一个因素

— the values needs to be zero if you don’t actually have random portraits

— 如果您实际上没有随机肖像，则值需要为零

0.5, — country leaders

0.5， — 国家领导者

0.5, — army leaders

0.5， — 军队领袖

0.5, — navy leaders

0.5， — 海军领袖

0.5, — air leaders

0.5， — 空中领先者

0.5, — operatives

0.5， — 特工





0.5, — scientists


0.5， — 科学家


},



CONVOYS_SUNK_MULTIPLIER_FOR_WAR_SUPPORT = 0.2,	— once a trade convoy ship sunk, you will get a larger negative impact on your war support

CONVOYS_SUNK_MULTIPLIER_FOR_WAR_SUPPORT = 0.2， — 一旦贸易护航船沉没，你的战争辅助就会受到更大的负面影响

CONVOYS_BEING_RAIDED_DAILY_WAR_SUPPORT_IMPACT_FROM_OVERSEA_STATES = 0.2,	— resource transfer convoys convoys from our states being raided will give a daily war support penalty depending on how important that resource is and how inefficent convoys are

CONVOYS_BEING_RAIDED_DAILY_WAR_SUPPORT_IMPACT_FROM_OVERSEA_STATES = 0.2， — 资源转移 来自我们各州的车队被突袭时，将根据资源的重要性和效率低下的方式，每天给予战争支援惩罚

CONVOYS_SUNK_MULTIPLIER_FOR_WAR_SUPPORT_FROM_OVERSEA_STATES = 0.2,			— once a resource transfer convoys from our states ship sunk, you will get a larger negative impact on your war support

CONVOYS_SUNK_MULTIPLIER_FOR_WAR_SUPPORT_FROM_OVERSEA_STATES = 0.2， — 一旦来自我们国家的资源转移船队沉没，你的战争支持将受到更大的负面影响

CONVOYS_BEING_RAIDED_DAILY_WAR_SUPPORT_IMPACT = 0.2,	— trade convoys being raided will give a daily war support penalty depending on how important that resource is and how inefficent convoys are

CONVOYS_BEING_RAIDED_DAILY_WAR_SUPPORT_IMPACT = 0.2， — 被突袭的贸易运输队会根据该资源的重要性和运输队的效率降低，每天都会受到对抗战辅助的惩罚。



MAX_PROPAGANDA_STABILITY_IMPACT = -0.2,			— Max total penalty from operative performing the propaganda mission in a country

MAX_PROPAGANDA_STABILITY_IMPACT = -0.2， — 在一个国家执行宣传任务的特工所受到的最高总处罚

MAX_PROPAGANDA_WAR_SUPPORT_IMPACT = -0.2,		— Max total penalty from operative performing the propaganda mission in a country

MAX_PROPAGANDA_WAR_SUPPORT_IMPACT = -0.2， — 在一个国家执行宣传任务的特工所受到的最高总处罚

PROPAGANDA_STABILITY_DAILY_DECAY = 0.001,		— Amount of stability recovered daily from propaganda effort

PROPAGANDA_STABILITY_DAILY_DECAY = 0.001， — 每天从宣传工作中恢复的稳定性

PROPAGANDA_WAR_SUPPORT_DAILY_DECAY = 0.001,		— Amount of war support recovered daily from war support effort

PROPAGANDA_WAR_SUPPORT_DAILY_DECAY = 0.001， — 每天从战争支援工作中恢复的战争支援数量



NUM_DAYS_TO_FULLY_DELETE_STOCKPILED_EQUIPMENT = 90,	 — time in days to fully delete equipments from stockpile. when you delete an equipment, they go to a temporary hidden pool which still can be seized

NUM_DAYS_TO_FULLY_DELETE_STOCKPILED_EQUIPMENT = 90， — 从库存中完全删除设备的时间（以天为单位）。当您删除设备时，它们会进入一个临时的隐藏池，仍然可以被没收

AIR_SUPPLY_CONVERSION_SCALE = 0.01,				— Conversion scale for planes to air supply

AIR_SUPPLY_CONVERSION_SCALE = 0.01， — 飞机到空气供应的转换比例

AIR_SUPPLY_DROP_EXPIRATION_HOURS = 168,			— Air drop length after being dropped

AIR_SUPPLY_DROP_EXPIRATION_HOURS = 168， — 空投后空投长度

STARTING_COMMAND_POWER = 0.0,					— starting command power for every country

STARTING_COMMAND_POWER = 0.0， — 每个国家的启动指挥权

BASE_MAX_COMMAND_POWER = 80.0,					— base value for maximum command power

BASE_MAX_COMMAND_POWER = 80.0， — 最大命令功率的基值

BASE_COMMAND_POWER_GAIN = 0.4,					— base value for daily command power gain

BASE_COMMAND_POWER_GAIN = 0.4， — 每日命令强度增益的基值

AIR_VOLUNTEER_PLANES_RATIO = 0.2,				— Ratio for volunteer planes available for sending in relation to sender air force

AIR_VOLUNTEER_PLANES_RATIO = 0.2， — 可供派遣的志愿飞机与派遣方空军的比率

AIR_VOLUNTEER_BASES_CAPACITY_LIMIT = 0.1,		— Ratio for volunteer planes available for sending in relation to receiver air base capacity

AIR_VOLUNTEER_BASES_CAPACITY_LIMIT = 0.1， — 可供发送的志愿飞机与接收机空军基地容量的比率

ATTACHE_XP_SHARE = 0.15,						— Country received xp from attaches

ATTACHE_XP_SHARE = 0.15， — 国家/地区从附件处收到 XP

SPECIAL_FORCES_CAP_BASE = 0.05,					— Max ammount of special forces battalions is total number of non-special forces battalions multiplied by this and modified by a country modifier

SPECIAL_FORCES_CAP_BASE = 0.05， — 特种部队营的最大增兵量是非特种部队营的总数乘以此，并由国家修正符修改

SPECIAL_FORCES_CAP_MIN = 24,					— You can have a minimum of this many special forces battalions, regardless of the number of non-special forces battalions you have, this can also be modified by a country modifier

SPECIAL_FORCES_CAP_MIN = 24， — 无论您拥有多少非特种部队营，您都可以至少拥有这么多的特种部队营，这也可以通过国家修正来修改

DAYS_OF_WAR_BEFORE_SURRENDER = 7,				— Number of days a war has to have existed before anyone can surrender in it

DAYS_OF_WAR_BEFORE_SURRENDER = 7， — 在战争中投降之前，战争必须存在的天数



FUEL_LEASE_CONVOY_RATIO = 0.0005,				— num convoys needed per fuel land lease

FUEL_LEASE_CONVOY_RATIO = 0.0005， — 每个燃料用地租赁所需的车队数量



STARTING_FUEL_RATIO = 0.25,						— starting fuel ratio compared to max fuel for countries

STARTING_FUEL_RATIO = 0.25， — 与各国最大燃料相比的起始燃料比

BASE_FUEL_GAIN_PER_OIL = 2,						— base amount of fuel gained hourly per excess oil

BASE_FUEL_GAIN_PER_OIL = 2， — 每过量机油每小时增加的燃料基础量

BASE_FUEL_GAIN = 2.0,							— base amount of fuel gained hourly, independent of excess oil

BASE_FUEL_GAIN = 2.0 — 每小时获得的基本燃料量，与过量的机油无关

BASE_FUEL_CAPACITY = 50000,						— base amount of fuel capacity

BASE_FUEL_CAPACITY = 50000， — 燃料容量的基本量



SCORCHED_EARTH_STATE_COST = 5,					— pp cost to scorch a state

SCORCHED_EARTH_STATE_COST = 5， — 烧焦一个状态的 pp 成本



COUNTRY_MANPOWER_CAPITULATED_FREE_POOL_FACTOR = 0.1,	— Factor on amount of normal manpower left for an exiled nation with no territory.

COUNTRY_MANPOWER_CAPITULATED_FREE_POOL_FACTOR = 0.1， — 没有领土的流亡国家所剩下的正常人力量的系数。

COUNTRY_MANPOWER_CAPITULATED_CORE_GAIN_FACTOR = 0.001,	— Factor on amount of normal manpower gained for the exile nation. From owned states that are controlled by an enemy. State manpower reduced by factor 1000 in code.

COUNTRY_MANPOWER_CAPITULATED_CORE_GAIN_FACTOR = 0.001， — 流亡国家获得的正常人力量的系数。来自由敌人控制的拥有的国家。代码中的国家人力减少了 1000 倍。

COUNTRY_MANPOWER_CAPITULATED_NON_CORE_GAIN_FACTOR = 0.001,	— Factor on amount of normal manpower gained for the exile nation. From owned states that are controlled by an enemy. State manpower reduced by factor 1000 in code.

COUNTRY_MANPOWER_CAPITULATED_NON_CORE_GAIN_FACTOR = 0.001， — 流亡国家获得的正常人力量的系数。来自由敌人控制的拥有的国家。代码中的国家人力减少了 1000 倍。

GIE_MAX_LEGITIMACY = 100, 								—Legitimacy max of a GiE

GIE_MAX_LEGITIMACY = 100，— GiE 的合法性最大值

GIE_CAPITULATE_MAX_STOCKPILE_TRANSFER = 0.1, 			— 0-1 Transfers ratio of stockpile. from 0 to this define depending on starting legitimacy on capitulation.

GIE_CAPITULATE_MAX_STOCKPILE_TRANSFER = 0.1， — 0-1 库存转移比率。从 0 到这个定义取决于投降时的起始合法性。

GIE_CAPITULATE_MIN_LEGIT_FOR_TRANSFER = 5, — 0-100 Minimum starting legitimacy to transfer any equipment at all.

GIE_CAPITULATE_MIN_LEGIT_FOR_TRANSFER = 5， — 0-100 转移任何设备的最低起始合法性。

GIE_CAPITULATION_LEGITIMACY_WARSCORE_FACTOR = 0.5, — Multiplies war contribution percent with this factor for part of starting legitimacy. (0.5 would mean a 50 % war contribution gives 25 more legitimacy)

GIE_CAPITULATION_LEGITIMACY_WARSCORE_FACTOR = 0.5， — 将战争贡献百分比乘以此系数，以获得部分起始合法性。（0.5 意味着 50 % 的战争贡献会带来 25 的合法性增加）

GIE_CAPITULATION_LEGITIMACY_WARLENGTH_FACTOR = 1.0, — Multiplies war length (nr of weeks) with this factor for part of starting legitimacy. (1.0 would mean a war length of 30 weeks gives 30 more legitimacy)

GIE_CAPITULATION_LEGITIMACY_WARLENGTH_FACTOR = 1.0， — 将战争长度（nr of weeks）乘以此系数，以获得起始合法性的一部分。（1.0 意味着 30 周的战争长度会多 30 个合法性）

GIE_WARSCORE_GAIN_LEGITIMACY_FACTOR = 1,		 		—Factor on how much legitimacy is gained from warscore earned by GiE units.

GIE_WARSCORE_GAIN_LEGITIMACY_FACTOR = 1， —考虑 GiE 单位获得的 warscore 获得多少合法性的因素。

GIE_HOST_CIC_FROM_LEGITIMACY_MAX = 5, 					—Host will receive from 0 to this value in CIC.

GIE_HOST_CIC_FROM_LEGITIMACY_MAX = 5，— 主机将在 CIC 中接收从 0 到此值的信号。

GIE_HOST_MIC_FROM_LEGITIMACY_MAX = 5,					—Host will receive from 0 to this value in MIC.

GIE_HOST_MIC_FROM_LEGITIMACY_MAX = 5，— 主机将在 MIC 中接收从 0 到此值的信号。

GIE_HOST_DOCKYARDS_FROM_LEGITIMACY_MAX = 0,				—Host will receive from 0 to this value in dockyards.

GIE_HOST_DOCKYARDS_FROM_LEGITIMACY_MAX = 0， - 主机将在船坞中接收从 0 到此值。

GIE_VETERAN_MANPOWER_NON_CORE_GAIN_FACTOR = 0.005,	— Factor on amount of manpower gained from owned states that are controlled by an enemy. State manpower reduced by factor 1000 in code.

GIE_VETERAN_MANPOWER_NON_CORE_GAIN_FACTOR = 0.005， — 从敌人控制的拥有国家获得的人力量的系数。代码中的国家人力减少了 1000 倍。

GIE_VETERAN_MANPOWER_CORE_GAIN_FACTOR = 0.01,	— Factor on amount of manpower gained from owned states that are controlled by an enemy. State manpower reduced by factor 1000 in code.

GIE_VETERAN_MANPOWER_CORE_GAIN_FACTOR = 0.01， — 从敌人控制的拥有国家获得的人力量的系数。代码中的国家人力减少了 1000 倍。

GIE_MANPOWER_TOTAL_MAX_FACTOR = 0.5,	— Factor on max amount of exile manpower that can be gained from owned states. Approaching this will give diminishing returns. Reduced by factor 100 in code.

GIE_MANPOWER_TOTAL_MAX_FACTOR = 0.5， — 从拥有国可以获得的最大流放者人力的系数。接近这个值会得到递减的回报。代码中减少了 100 倍。

GIE_MANPOWER_RATO_OF_MAX_START_PENALTY = 0.5,	—When this ratio of max manpower has been recruited we start applying the penalty.

GIE_MANPOWER_RATO_OF_MAX_START_PENALTY = 0.5， - 当招募了这个最大人力比率时，我们开始应用惩罚。

GIE_MANPOWER_GAIN_PENALTY_MAX = 0.95,	—Max penalty on exile manpower growth.

GIE_MANPOWER_GAIN_PENALTY_MAX = 0.95， —流放者人力增长的最大惩罚。

GIE_EXILE_AIR_RECRUITMENT_LEGITIMACY = 50, 	—Legitimacy required to recruit exile airwings

GIE_EXILE_AIR_RECRUITMENT_LEGITIMACY = 50，—招募流亡飞行员所需的合法性

GIE_EXILE_AIR_START_EXPERIENCE = 3, 		—Starting experience for exile airwings

GIE_EXILE_AIR_START_EXPERIENCE = 3， — 流放者 Airwings 的起始经验

GIE_EXILE_TROOP_RECRUITMENT_LEGITIMACY = 25, 	—Legitimacy required to recruit exile troops

GIE_EXILE_TROOP_RECRUITMENT_LEGITIMACY = 25，—招募流亡部队所需的合法性

GIE_EXILE_TROOPS_DEPLOY_TRAINING_MAX_LEVEL = 2, 	—Max XP exile troops can receive from training

GIE_EXILE_TROOPS_DEPLOY_TRAINING_MAX_LEVEL = 2，—流放者部队可以从训练中获得的最大 XP

GIE_EXILE_ARMY_LEADER_LEGITIMACY_LEVELS = { 	—Legitimacy levels where a new army leader is received.

GIE_EXILE_ARMY_LEADER_LEGITIMACY_LEVELS = { —接收新军队领导人的合法性级别。

30,

60,

90,

},

GIE_EXILE_ARMY_LEADER_START_LEVEL = 3,	—Starting level for exile leader

GIE_EXILE_ARMY_LEADER_START_LEVEL = 3， — 流放者领袖的起始等级

GIE_ESCAPING_DIVISIONS_TRANSFER_DAYS = 30, — days to transfer escaping divisions to host nation

GIE_ESCAPING_DIVISIONS_TRANSFER_DAYS = 30， — 将逃脱的分区转会给东道国的天数

GIE_ESCAPING_DIVISIONS_XP_BOOST = 0.4, — Escaping divisions gain a boost to experience. Only the toughest motherbadasses will band together and survive to git me one hundred Nazi scalps … Or die tryin’…

GIE_ESCAPING_DIVISIONS_XP_BOOST = 0.4， — 逃离师级会获得经验加成。只有最顽强的坏蛋才会联合起来，活下来给我一百个纳粹头皮......或者死去尝试......

GIE_DIVISION_ATTACK_BONUS_AGAINST_OCCUPIER = 0.1, — Attack bonus factor against whoever occupies your core territory.

GIE_DIVISION_ATTACK_BONUS_AGAINST_OCCUPIER = 0.1， — 对占领你核心领土的人的攻击加成系数。

GIE_DIVISION_DEFENSE_BONUS_AGAINST_OCCUPIER = 0.1, — Attack bonus factor against whoever occupies your core territory.

GIE_DIVISION_DEFENSE_BONUS_AGAINST_OCCUPIER = 0.1， — 对占领你核心领土的人的攻击加成。

GIE_DIVISION_ATTACK_BONUS_ON_CORE = 0.1, — Attack bonus factor when fighting on cores.

GIE_DIVISION_ATTACK_BONUS_ON_CORE = 0.1， — 在核心上战斗时的攻击加成系数。

GIE_DIVISION_DEFENSE_BONUS_ON_CORE = 0.1, — Defense bonus factor when fighting on cores.

GIE_DIVISION_DEFENSE_BONUS_ON_CORE = 0.1， — 在核心上战斗时的防御加成系数。

GIE_ESCAPING_DIVISIONS_EQUIPMENT_RATIO = 0.2, — Base equipment ratio on escaped troops.

GIE_ESCAPING_DIVISIONS_EQUIPMENT_RATIO = 0.2， — 逃脱部队的基础装备比率。

GIE_ESCAPING_DIVISIONS_AMOUNT_RATIO = 0.1, — Ratio on amount of divisions that escapes. Scales with starting legitimacy

GIE_ESCAPING_DIVISIONS_AMOUNT_RATIO = 0.1， — 逃逸的分割数的比率。以起始合法性进行扩展

GIE_LIBERATED_NATION_DAILY_LEGITIMACY_CHANGE = -1.5, —An uncapitulated exile that is fully liberated will have legitimacy changed with this amount daily. Will be automatically reinstated when it reaches 0.

GIE_LIBERATED_NATION_DAILY_LEGITIMACY_CHANGE = -1.5， —一个未被解雇的流放者，如果被完全解放，其合法性每天都会改变这个数量。当它达到 0 时将自动恢复。

GIE_EXILE_TRANSFER_ON_LEADER_CAPITULATION_MANPOWER_FACTOR = 0.1, —Factor on exile manpower kept when a faction leader capitulates and the hosted exiles are transfered.

GIE_EXILE_TRANSFER_ON_LEADER_CAPITULATION_MANPOWER_FACTOR = 0.1， —当派系领袖投降且托管的流放者被转移时，保留的流放人力系数。

GIE_CONVOY_ON_CREATION = 10, — Number of convoy a GiE will get on creation.

GIE_CONVOY_ON_CREATION = 10， — GiE 在创建时将获得的车队数量。



SURRENDER_LIMIT_REDUCTION_PER_COLLABORATION = 0.3, 	—each percent of collaboration will lower surrender limit by this percentage

SURRENDER_LIMIT_REDUCTION_PER_COLLABORATION = 0.3， — 每个协作百分比的投降限制都会降低此百分比

SURRENDER_RECIPIENT_SCORE_PER_COLLABORATION = 1.0, 	—countries with collaboration will get bonus while game calculates which country the enemy will capitulate

SURRENDER_RECIPIENT_SCORE_PER_COLLABORATION = 1.0， - 具有协作的国家/地区将获得加成，而 Game 会计算敌人将投降的国家/地区

COMPLIANCE_PER_COLLABORATION = 1.0,					—each percent of collaboration will be converted to this compliance at capitulation

COMPLIANCE_PER_COLLABORATION = 1.0，— 在投降时，协作的每个百分比都将转换为此合规性



WILL_LEAD_TO_WAR_FOCUS_PERSISTENCE = 60, — taken focuses that has lead to war will still make ai prep for war for this many days after being taken

WILL_LEAD_TO_WAR_FOCUS_PERSISTENCE = 60， — 被夺取的焦点导致战争，在被夺取后的许多天内，AI仍会为战争做准备

WILL_LEAD_TO_WAR_DECISION_PERSISTENCE = 30, — the decision thats lead to war will sitll make ai prep for war for this many days after being taken/cooldown/timeout

WILL_LEAD_TO_WAR_DECISION_PERSISTENCE = 30， — 导致战争的决定仍将使 AI 在被占领/冷却/暂停后的这么多天内为战争做准备



ARMY_COUNT_DAILY_LERP_FOR_TRAINING_XP = 0.002, — number of armies that is used in training xp calculates daily lerps to actual number (if real number is lower)

ARMY_COUNT_DAILY_LERP_FOR_TRAINING_XP = 0.002， — 用于训练 XP 的军队数量计算每日 lerps 到实际数字（如果实际数字较低）

ARMY_COUNT_DAILY_DECREASE_FOR_TRAINING_XP = 0.1, — number of armies that is used in training xp calculates daily linearly approaches this number (if real number is lower)

ARMY_COUNT_DAILY_DECREASE_FOR_TRAINING_XP = 0.1， — 用于训练 XP 计算的每日军队数量线性接近此数字（如果实数较低）

},



NResistance = {

NResistance = {

INITIAL_STATE_RESISTANCE = 1.0,							— initial resistance percentage of a state once it is captured

INITIAL_STATE_RESISTANCE = 1.0， — 捕获状态后状态的初始阻力百分比

INITIAL_STATE_COMPLIANCE = 0.0,							— initial compliance percentage of a state once it is captured

INITIAL_STATE_COMPLIANCE = 0.0， — 捕获状态后的状态的初始合规性百分比

COMPLIANCE_FACTOR_ON_STATE_CONTROLLER_CHANGE = -0.5,	— compliance factor that applies when the state controller changes (in between allies, compliance is zeroed if it is taken by original country)

COMPLIANCE_FACTOR_ON_STATE_CONTROLLER_CHANGE = -0.5， — 当国家控制者发生变化时应用的合规系数（在盟友之间，如果按原始国家/地区采用，则合规为零）

RESISTANCE_COOLDOWN_WHEN_DISABLED = -0.25,				— resistance cooldown when the state is taken back by its original owner (compliance is zeroed in that case)

RESISTANCE_COOLDOWN_WHEN_DISABLED = -0.25， — 当状态被其原始拥有者收回时的抗性冷却时间（在这种情况下，合规性为零）



RESISTANCE_TARGET_BASE = 35.0,							— base resistance target percentage

RESISTANCE_TARGET_BASE = 35.0， — 基础阻力目标百分比



RESISTANCE_TARGET_MODIFIER_HAS_CLAIM = -5.0,			— resistance target modifier in % for states we have claim

RESISTANCE_TARGET_MODIFIER_HAS_CLAIM = -5.0， — 我们声称的状态的抗性目标修正值（以 % 为单位）



RESISTANCE_TARGET_MODIFIER_PER_STABILITY_LOSS = 0.2,	— resistance target modifier per stability below 100%

RESISTANCE_TARGET_MODIFIER_PER_STABILITY_LOSS = 0.2， — 低于 100% 的稳定性的抗性目标修正

RESISTANCE_TARGET_MODIFIER_PER_COMPLIANCE = -0.5,		— resistance target modifier per compliance %

RESISTANCE_TARGET_MODIFIER_PER_COMPLIANCE = -0.5， — 每个柔度 % 的阻力目标修饰符



RESISTANCE_TARGET_MODIFIER_IS_AT_PEACE = -10.0,			— resistance target modifier when we are at peace

RESISTANCE_TARGET_MODIFIER_IS_AT_PEACE = -10.0， — 当我们处于和平状态时的抵抗目标修正



RESISTANCE_TARGET_MODIFIER_STATE_VP = {					— resistance target modifier pairs for vp. first entry is total vp in state and second entry is amount of target modifier that applies for that threshold

RESISTANCE_TARGET_MODIFIER_STATE_VP = { — VP 的阻力目标修正对。第一个条目是状态中的总 VP，第二个条目是适用于该阈值的目标修正量

0, 0.0, — 0 - 5

5, 5.0, — 5 - 20

20, 10.0, — 20 - 50

50, 20.0, — 50 - …

},



RESISTANCE_TARGET_MODIFIER_OCCUPIED_CAPITULATED = 10.0, — resistance target modifier when the enemy is capitulated

RESISTANCE_TARGET_MODIFIER_OCCUPIED_CAPITULATED = 10.0， — 敌人投降时的抵抗目标修正



RESISTANCE_TARGET_MODIFIER_OCCUPIED_IS_EXILE_MIN = 2.0, — min & max resistance target modifier resistance target modifier for exile countries. interpolated using legitimacy

RESISTANCE_TARGET_MODIFIER_OCCUPIED_IS_EXILE_MIN = 2.0， — 最小和最大抵抗力目标修正 流亡国家的抵抗力目标修正。使用 legitimacy 进行插值

RESISTANCE_TARGET_MODIFIER_OCCUPIED_IS_EXILE_MAX = 20.0,

RESISTANCE_TARGET_MODIFIER_OCCUPIED_IS_EXILE_MAX = 20.0，



RESISTANCE_TARGET_MODIFIER_POP_LOW = -20.0,			— how much we reduce the resistance target

RESISTANCE_TARGET_MODIFIER_POP_LOW = -20.0， — 我们降低了阻力目标的程度

RESISTANCE_TARGET_MODIFIER_POP_VERY_LOW = -50.0,			— resistance target modifier in % for states we have claim

RESISTANCE_TARGET_MODIFIER_POP_VERY_LOW = -50.0， — 我们声称的州的抗性目标修正值 %



RESISTANCE_POP_LOW_CUTOFF = 10000,

RESISTANCE_POP_LOW_CUTOFF = 10000，

RESISTANCE_POP_VERY_LOW_CUTOFF = 1000,

RESISTANCE_POP_VERY_LOW_CUTOFF = 1000，



RESISTANCE_TARGET_MIN_CAP_FOR_NON_COMPLIANCE = 10, — min resistance target will be capped to this percentage for non-compliance sources

RESISTANCE_TARGET_MIN_CAP_FOR_NON_COMPLIANCE = 10， — 对于不合规源，最小电阻目标将上限为此百分比



RESISTANCE_DECAY_BASE = 0.1, — base resistance decay

RESISTANCE_DECAY_BASE = 0.1， — 基极电阻衰减

RESISTANCE_DECAY_MIN = 0.01, — min resistance decay

RESISTANCE_DECAY_MIN = 0.01， — 最小电阻衰减

RESISTANCE_DECAY_MAX = 100.0, — nax resistance decay

RESISTANCE_DECAY_MAX = 100.0， — Nax 电阻衰减



RESISTANCE_DECAY_MODIFIER_HAS_CLAIM = 25.0, — resistance decay modifier for our claims

RESISTANCE_DECAY_MODIFIER_HAS_CLAIM = 25.0， — 我们声明的抗性衰减修饰符

RESISTANCE_DECAY_MODIFIER_FACTORS = { — resistance decay modifier when resistance hits a certain percentage

RESISTANCE_DECAY_MODIFIER_FACTORS = { — 当阻力达到一定百分比时，抗性衰减修正

10, -50, — below 10% it has a -50% modifier on decay

10， -50， — 低于 10% 时，衰减时有 -50% 的修饰符

20, -25, — below 20% it has a -25% modifier on decay

20， -25， — 低于 20% 时，衰减时有 -25% 的修饰符

},



MIN_DAMAGE_TO_GARRISONS_MODIFIER = 0.1, — modifier that applies to losses from resistance attack to garrisons at most can be reduced to this amount

MIN_DAMAGE_TO_GARRISONS_MODIFIER = 0.1， — 适用于抵抗攻击对驻军造成的损失的修正最多可以减少到这个数量



RESISTANCE_GROWTH_BASE = 0.2, — base resistance grow

RESISTANCE_GROWTH_BASE = 0.2， — 基础阻力增长

RESISTANCE_GROWTH_MIN = 0.01, — min resistance grow

RESISTANCE_GROWTH_MIN = 0.01， — 最小电阻增长

RESISTANCE_GROWTH_MAX = 100.0, — max resistance grow

RESISTANCE_GROWTH_MAX = 100.0， — 最大阻力增长



COMPLIANCE_GROWTH_BASE = 0.075, — base compliance grow

COMPLIANCE_GROWTH_BASE = 0.075， — 基本合规性增长

COMPLIANCE_GROWTH_MIN = -100.0, — min compliance grow

COMPLIANCE_GROWTH_MIN = -100.0， — 最小合规性增长

COMPLIANCE_GROWTH_MAX = 100.0, — max compliance grow

COMPLIANCE_GROWTH_MAX = 100.0 — 最大合规性增长



COMPLIANCE_GROWTH_IS_AT_PEACE = 10, — compliance growth buff at peace

COMPLIANCE_GROWTH_IS_AT_PEACE = 10， — Peace 的合规性增长增益

COMPLIANCE_GROWTH_HAS_CLAIM = 5, — compliance growth buff if state has a claim

COMPLIANCE_GROWTH_HAS_CLAIM = 5， — 如果州有索赔，则为合规性增长增益



COMPLIANCE_DECAY_AT_MAX_COMPLIANCE = -0.083, — as compliance increases, it gets a decay rate depending on its value. compliance should stabilize at some value until its growth changes

COMPLIANCE_DECAY_AT_MAX_COMPLIANCE = -0.083， — 随着柔度的增加，它会根据其值获得衰减率。合规性应稳定在某个值，直到其增长发生变化

COMPLIANCE_DECAY_PER_EXILE_LEGITIMACY = -0.015, — higher legitimacy will give higher decay to compliance

COMPLIANCE_DECAY_PER_EXILE_LEGITIMACY = -0.015， — 更高的合法性将导致更高的合规性衰减



RESISTANCE_RATIO_DIFF_TO_SPREAD = 0.5, — resistance diff between two neighbour states will spread by this ratio ( from highest resistance states to lower ones and it will only spread once to a state)

RESISTANCE_RATIO_DIFF_TO_SPREAD = 0.5， — 两个相邻国家之间的电阻差异将按此比率传播（从最高电阻国家到较低国家，并且只会传播到一个国家一次）



RESISTANCE_ACTIVITY_CHANCE_AT_MAX_RESISTANCE = 0.312,

RESISTANCE_ACTIVITY_CHANCE_AT_MAX_RESISTANCE = 0.312，

RESISTANCE_ACTIVITY_MIN_GARRISON_PENETRATE_CHANCE = 0.02,

RESISTANCE_ACTIVITY_MIN_GARRISON_PENETRATE_CHANCE = 0.02，



RESISTANCE_TARGET_TO_REENABLE_RESISTANCE = 10, — resistance will be disabled once it reaches zero and will not be reenabled until resistance target reaches above this value

RESISTANCE_TARGET_TO_REENABLE_RESISTANCE = 10， — 阻力将在达到零时被禁用，并且在阻力目标达到此值以上之前不会重新启用

GARRISON_LOG_MAX_MONTHS = 12,

GARRISON_LOG_MAX_MONTHS = 12，



NO_COMPLIANCE_GAIN_ENABLE_LIMIT = 0.5, — at least this ratio of no garrison law should be active in order to no compliance gain to take effect

NO_COMPLIANCE_GAIN_ENABLE_LIMIT = 0.5， — 至少这个没有驻军法的比率应该是有效的，这样就不会有遵守收益生效



GARRISON_MANPOWER_MIN_DELIVERY_SPEED = 0.7,	— Minimum base delivery speed if the chunk can’t be calculated.

GARRISON_MANPOWER_MIN_DELIVERY_SPEED = 0.7 — 如果无法计算数据块，则为最低基本传输速度。

GARRISON_MANPOWER_REINFORCEMENT_SPEED = 2000.0,	— Modifier for garrison manpower reinforcement. This value is the maximum to be delivered which is then modified by distance

GARRISON_MANPOWER_REINFORCEMENT_SPEED = 2000.0， — 驻军人力增援的修正。此值是要传递的最大值，然后按距离进行修改

GARRISON_EQUIPMENT_DELIVERY_SPEED = 4.0,	— Modifier for garrison equipment reinforcement speed

GARRISON_EQUIPMENT_DELIVERY_SPEED = 4.0， — 驻军装备增援速度的修正



GARRISON_STR_POW_MANPOWER = 2,	—Scales impact of manpower deficiency by raising that deficiency to the number here. Formula: efficiency = 1.0 - manpower_deficiency^GARRISON_STR_POW_MANPOWER

GARRISON_STR_POW_MANPOWER = 2， - 通过将人力不足提高到此处的数字来缩放人力不足的影响。公式：效率 = 1.0 - manpower_deficiency^GARRISON_STR_POW_MANPOWER

GARRISON_STR_POW_EQUIPMENT = 3,	—Scales impact of euqipment deficiency by raising that deficiency to the number here. Formula: efficiency = 1.0 - equipment_deficiency^GARRISON_STR_POW_EQUIPMENT

GARRISON_STR_POW_EQUIPMENT = 3， —通过将 Euqipment 缺陷提高到此处的数字来缩放该缺陷的影响。公式：效率 = 1.0 - equipment_deficiency^GARRISON_STR_POW_EQUIPMENT



SUPPRESSION_NEEDED_BY_RESISTANCE_POINT = 0.75, — Number of suppression point we need for each 1% of resistance

SUPPRESSION_NEEDED_BY_RESISTANCE_POINT = 0.75， — 每 1% 的电阻所需的抑制点数量

SUPPRESSION_NEEDED_LOWER_CAP = 10.0,	— if resistance is lower than this value then we always act as though it is at the define for the purpose of suppresion requirements

SUPPRESSION_NEEDED_LOWER_CAP = 10.0， — 如果电阻低于此值，则我们始终将其置于定义状态，以便满足支持要求

SUPPRESSION_NEEDED_UPPER_CAP = 50.0, — if resistance is greater than this value then we always act as though it is at the define for the purpose of suppresion requirements

SUPPRESSION_NEEDED_UPPER_CAP = 50.0， — 如果电阻大于此值，则我们始终将其视为处于定义状态，以便满足要求



GARRISON_MANPOWER_LOST_BY_ATTACK = 0.016, 	— Ratio of manpower lost by garrison at each attack on garrison (this number will be reduced by the hardness of garrison template)

GARRISON_MANPOWER_LOST_BY_ATTACK = 0.016， — 每次攻击驻军时驻军损失的人力比率（这个数字会因驻军模板的硬度而减少）

GARRISON_EQUIPMENT_LOST_BY_ATTACK = 0.02, 	— Ratio of equipment lost by garrison at each attack on garrison (this number will be reduced by the hardness of garrison template)

GARRISON_EQUIPMENT_LOST_BY_ATTACK = 0.02， — 每次攻击驻军时驻军损失的装备比例（这个数字会因驻军模板的硬度而减少）

MAXIMUM_GARRISON_HARDNESS_WHEN_ATTACKED = 0.90, — Cap to be sure that garrison will suffer lost in attack, even with a almost 100% hardness

MAXIMUM_GARRISON_HARDNESS_WHEN_ATTACKED = 0.90， — 上限确保驻军在攻击中损失，即使硬度几乎为 100%



FOREIGN_MANPOWER_MIN_THRESHOLD = 5000,		 — The minimum number of Manpower that AI will accept to give at once, in order to avoid many weird little transfer.

FOREIGN_MANPOWER_MIN_THRESHOLD = 5000， — AI 接受一次给予的最低人力数量，以避免许多奇怪的小转移。

MANPOWER_BUFFER_TO_NOT_GIVE_MINOR = 0.3, — To determine how much AI can give as foreign manpower, we calculate how much manpower we use, and add this buffer. The result is what we want to keep, for minor countries. So higher this number is, lower we will give Manpower.

MANPOWER_BUFFER_TO_NOT_GIVE_MINOR = 0.3， — 为了确定 AI 可以提供多少外国人力，我们计算我们使用了多少人力，然后加上这个缓冲区。结果就是我们想要为小国保留的东西。所以这个数字越高，我们给 Manpower 的分数就越低。

MANPOWER_BUFFER_TO_NOT_GIVE_MAJOR = 0.6, — To determine how much AI can give as foreign manpower, we calculate how much manpower we use, and add this buffer. The result is what we want to keep, for major countries. So higher this number is, lower we will give Manpower.

MANPOWER_BUFFER_TO_NOT_GIVE_MAJOR = 0.6， — 为了确定 AI 可以提供多少外国人力，我们计算我们使用了多少人力，然后加上这个缓冲区。结果就是我们希望为主要国家保留的东西。所以这个数字越高，我们给 Manpower 的分数就越低。

MAX_GARRISON_RATIO_WE_AGREE_TO_SUPPORT = 3.0,	— The part of the manpower needed by the foreign garrison, that AI will agree to support with our manpower. If negative number, AI will not take into consideration the need, and just calculate how much they can give.

MAX_GARRISON_RATIO_WE_AGREE_TO_SUPPORT = 3.0， — 外国驻军所需的人力部分，AI 将同意用我们的人力来支持。如果为负数，AI 不会考虑需求，只计算他们可以付出多少。

FOREIGN_MANPOWER_AI_COOLDOWN_DAYS = 30,		 — Number of days after an AI give us manpower before the AI accept to give more.

FOREIGN_MANPOWER_AI_COOLDOWN_DAYS = 30， — AI 给我们人力后 AI 接受给予更多人力的天数。



INITIAL_HISTORY_RESISTANCE = 0.0,			— resistance value for initial colony states

INITIAL_HISTORY_RESISTANCE = 0.0， — 初始菌落状态的电阻值

INITIAL_HISTORY_COMPLIANCE = 70.0,			— compliance value for initial colony states

INITIAL_HISTORY_COMPLIANCE = 70.0， — 初始菌落状态的合规性值

INITIAL_GARRISON_STRENGTH = 1,				— garrison value for initial colony states

INITIAL_GARRISON_STRENGTH = 1， — 初始殖民地国家的驻军值



STATE_COMPLIANCE_DECAY_FOR_LOST_STATES = 0.05, — daily compliance decay for the states you lost control of

STATE_COMPLIANCE_DECAY_FOR_LOST_STATES = 0.05， — 您失去控制的州的每日合规性衰减



},



NProduction = {

N生产 = {

MAX_EQUIPMENT_RESOURCES_NEED = 3, 	— Max number of different strategic resources an equipment can be dependent on.

MAX_EQUIPMENT_RESOURCES_NEED = 3， — 设备可以依赖的不同战略资源的最大数量。

MAX_CIV_FACTORIES_PER_LINE = 15,	— Max number of factories that can be assigned a single production line.

MAX_CIV_FACTORIES_PER_LINE = 15， — 可分配单个生产线的最大工厂数。

DEFAULT_MAX_NAV_FACTORIES_PER_LINE = 10,

DEFAULT_MAX_NAV_FACTORIES_PER_LINE = 10，

FLOATING_HARBOR_MAX_NAV_FACTORIES_PER_LINE = 5,

FLOATING_HARBOR_MAX_NAV_FACTORIES_PER_LINE = 5，

CONVOY_MAX_NAV_FACTORIES_PER_LINE = 15,

CONVOY_MAX_NAV_FACTORIES_PER_LINE = 15，

CAPITAL_SHIP_MAX_NAV_FACTORIES_PER_LINE = 5,

CAPITAL_SHIP_MAX_NAV_FACTORIES_PER_LINE = 5，

MAX_MIL_FACTORIES_PER_LINE = 150,

MAX_MIL_FACTORIES_PER_LINE = 150，

MAX_MIL_FACTORIES_VISIBLE_FOR_MIL_EQUIPMENT_LINE = 15,

MAX_MIL_FACTORIES_VISIBLE_FOR_MIL_EQUIPMENT_LINE = 15，

RAILWAY_GUN_MAX_MIL_FACTORIES_PER_LINE = 5,

RAILWAY_GUN_MAX_MIL_FACTORIES_PER_LINE = 5，

RAILWAY_GUN_REPAIR_SPEED = 8.0,			— Railway gun strength repair speed per factory

RAILWAY_GUN_REPAIR_SPEED = 8.0， — 每个工厂的铁路炮兵力量修复速度

EFFICIENCY_LOSS_PER_UNUSED_DAY = 1,		— Daily loss of efficiency for unused factory slots ( efficiency is tracked per factory slot in the production line )

EFFICIENCY_LOSS_PER_UNUSED_DAY = 1， — 未使用的工厂槽位的每日效率损失（ 效率是跟踪生产线中每个工厂槽位的）

RESOURCE_PENALTY_WARNING_CRITICAL_RATIO = 0.8, — Switch to red progress bar if penalty is over threshold

RESOURCE_PENALTY_WARNING_CRITICAL_RATIO = 0.8 — 如果罚球超过阈值，则切换到红色进度条

BASE_FACTORY_SPEED = 5, 				— Base factory speed multiplier (how much hoi3 style IC each factory gives).

BASE_FACTORY_SPEED = 5， — 基础工厂速度乘数（每个工厂提供多少 hoi3 型 IC）。

BASE_FACTORY_SPEED_MIL = 4.50, 				— Base factory speed multiplier (how much hoi3 style IC each factory gives).

BASE_FACTORY_SPEED_MIL = 4.50， — 基础工厂速度乘数（每个工厂提供多少 hoi3 型 IC）。

BASE_FACTORY_SPEED_NAV = 2.5, 				— Base factory speed multiplier (how much hoi3 style IC each factory gives).

BASE_FACTORY_SPEED_NAV = 2.5， — 基础工厂速度乘数 （每个工厂提供多少 hoi3 型 IC）。

BASE_FACTORY_START_EFFICIENCY_FACTOR = 10,	— Base start efficiency for factories expressed in %.

BASE_FACTORY_START_EFFICIENCY_FACTOR = 10， — 工厂的基本启动效率，以 % 表示。

BASE_FACTORY_MAX_EFFICIENCY_FACTOR = 50,	— Base max efficiency for factories expressed in %.

BASE_FACTORY_MAX_EFFICIENCY_FACTOR = 50， — 工厂的基本最大效率，以 % 表示。

BASE_FACTORY_EFFICIENCY_GAIN = 1,		— Base efficiency factor.

BASE_FACTORY_EFFICIENCY_GAIN = 1， — 基本效率因子。

BASE_FACTORY_EFFICIENCY_BALANCE_FACTOR = 0.1, 			— Factory efficiency balancing factor

BASE_FACTORY_EFFICIENCY_BALANCE_FACTOR = 0.1， — 工厂效率平衡系数

BASE_FACTORY_EFFICIENCY_VARIANT_CHANGE_FACTOR = 90,		— Base factor for changing production variants in %.

BASE_FACTORY_EFFICIENCY_VARIANT_CHANGE_FACTOR = 90 — 更改生产变型的基本因子（以 % 为单位）。

BASE_FACTORY_EFFICIENCY_PARENT_CHANGE_FACTOR = 30,		— Base factor for changing production parent<->children in %.

BASE_FACTORY_EFFICIENCY_PARENT_CHANGE_FACTOR = 30 — 更改生产 parent<->children 的基因子，以 % 为单位。

BASE_FACTORY_EFFICIENCY_FAMILY_CHANGE_FACTOR = 70,		— Base factor for changing production with same family in %.

BASE_FACTORY_EFFICIENCY_FAMILY_CHANGE_FACTOR = 70， — 以 % 为单位的相同系列更改生产的基因子。

BASE_FACTORY_EFFICIENCY_ARCHETYPE_CHANGE_FACTOR = 20, 	— Base factor for changing production with same archetype in %.

BASE_FACTORY_EFFICIENCY_ARCHETYPE_CHANGE_FACTOR = 20， — 以 % 为单位的相同原型更改生产的基础因子。

EQUIPMENT_BASE_LEND_LEASE_WEIGHT = 1.0, — Base equipment lend lease weight

EQUIPMENT_BASE_LEND_LEASE_WEIGHT = 1.0 — 基本设备借出租赁权重

EQUIPMENT_LEND_LEASE_WEIGHT_FACTOR = 0.01, — Base equipment lend lease factor

EQUIPMENT_LEND_LEASE_WEIGHT_FACTOR = 0.01 — 基础设备借出租赁系数

LEND_LEASE_DELIVERY_TOTAL_DAYS = 30, — Nr of days between lend lease deliveries

LEND_LEASE_DELIVERY_TOTAL_DAYS = 30， — 租借租赁交付之间的天数

ANNEX_STOCKPILES_RATIO = 1.0,		— How much stockpiled equipment will be transferred on annexation

ANNEX_STOCKPILES_RATIO = 1.0， — 吞并时将转移多少库存设备

ANNEX_FIELD_EQUIPMENT_RATIO = 0.25,	— How much equipment from deployed divisions will be transferred on annexation

ANNEX_FIELD_EQUIPMENT_RATIO = 0.25， — 吞并时将转移部署师的装备数量

ANNEX_FUEL_RATIO = 0.25,	— How much fuel will be transferred on annexation

ANNEX_FUEL_RATIO = 0.25， — 吞并时将转移多少燃料

ANNEX_CONVOYS_RATIO = 0.15,			— How many convoys will be transferred on annexation

ANNEX_CONVOYS_RATIO = 0.15， — 吞并时将转移多少个护航队

MIN_POSSIBLE_TRAINING_MANPOWER = 100000,	— How many deployment lines minimum can be training

MIN_POSSIBLE_TRAINING_MANPOWER = 10000， — 训练的最小部署线路数

MIN_FIELD_TO_TRAINING_MANPOWER_RATIO = 0.75,	— Ratio which % of army in field can be trained

MIN_FIELD_TO_TRAINING_MANPOWER_RATIO = 0.75， — 可以训练的战场上军队的百分比

CAPITULATE_STOCKPILES_RATIO = 0.5, — How much equipment from deployed divisions will be transferred on capitulation

CAPITULATE_STOCKPILES_RATIO = 0.5， — 投降时部署的师将转移多少装备

CAPITULATE_FUEL_RATIO = 0.5, — How much fuel will be transferred on capitulation

CAPITULATE_FUEL_RATIO = 0.5， — 投降时将转移多少燃料

INFRA_MAX_CONSTRUCTION_COST_EFFECT = 1, 		— Building in a state with higher infrastructure will reduce the cost of shared buildings.

INFRA_MAX_CONSTRUCTION_COST_EFFECT = 1， — 在基础设施较高的州进行建设将降低共享建筑的成本。

PRODUCTION_RESOURCE_LACK_PENALTY = -0.05,			— Penalty decrease while lack of resource per factory

PRODUCTION_RESOURCE_LACK_PENALTY = -0.05， — 每个工厂在缺乏资源时减少惩罚

CIC_BANK_SPEED_BOOST_FACTOR = 0.25, — The CIC bank can boost production speed with this factor (0.5 means 50 %)

CIC_BANK_SPEED_BOOST_FACTOR = 0.25， — CIC 组可以用这个系数提高生产速度（0.5 表示 50 %）

MIN_LICENSE_ACTIVE_DAYS = 30,						— Min days for license to be active

MIN_LICENSE_ACTIVE_DAYS = 30 — 许可证处于活动状态的最小天数

BASE_LICENSE_IC_COST = 1,							— Base IC cost for lended license

BASE_LICENSE_IC_COST = 1 — 借出许可证的基本 IC 成本

LICENSE_IC_COST_YEAR_INCREASE = 1,					— IC cost equipment for every year of equipment after 1936

LICENSE_IC_COST_YEAR_INCREASE = 1， — 1936 年之后每年设备的 IC 成本设备

LICENSE_EQUIPMENT_BASE_SPEED = -0.25,				— base MIC speed modifier for licensed equipment

LICENSE_EQUIPMENT_BASE_SPEED = -0.25， — 许可设备的基本 MIC 速度修正器

LICENSE_EQUIPMENT_TECH_SPEED_PER_YEAR = -0.05,		— MIC speed modifier for licensed equipment for each year of difference between actual and latest equipment

LICENSE_EQUIPMENT_TECH_SPEED_PER_YEAR = -0.05， — 实际设备与最新设备之间每年差异的许可设备的 MIC 速度修正器

LICENSE_EQUIPMENT_TECH_SPEED_MAX_YEARS = 4,			— Maximum years for MIC speed modifier

LICENSE_EQUIPMENT_TECH_SPEED_MAX_YEARS = 4， — MIC 速度修改器的最大年限

LICENSE_EQUIPMENT_SPEED_NOT_FACTION = -0.10,		— MIC speed modifier for licensed equipment for not being in faction

LICENSE_EQUIPMENT_SPEED_NOT_FACTION = -0.10， — 未加入派系的许可设备的 MIC 速度修正

LICENSE_EQUIPMENT_UPGRADE_XP_FACTOR = 2.0,			— XP cost for upgrading licensed equipment

LICENSE_EQUIPMENT_UPGRADE_XP_FACTOR = 2.0 — 升级许可设备的 XP 成本

LICENSE_EQUIPMENT_SPEED_NO_LICENSE = -0.50,			— Penalty for producing non licensed equipment

LICENSE_EQUIPMENT_SPEED_NO_LICENSE = -0.50， — 生产非许可设备的罚款

CONVERSION_SPEED_BONUS = 0,							— Modifier to the production speed when converting equipment

CONVERSION_SPEED_BONUS = 0， — 转换设备时生产速度的修饰符

EQUIPMENT_MODULE_ADD_XP_COST = 5.0,					— XP cost for adding a new equipment module in an empty slot when creating an equipment variant.

EQUIPMENT_MODULE_ADD_XP_COST = 5.0， — 创建装备变体时，在空槽中添加新装备模块的经验消耗。

EQUIPMENT_MODULE_REPLACE_XP_COST = 6.0,				— XP cost for replacing one equipment module with an unrelated module when creating an equipment variant.

EQUIPMENT_MODULE_REPLACE_XP_COST = 6.0， — 在创建设备变体时，将一个设备模块替换为不相关的模块的 XP 成本。

EQUIPMENT_MODULE_CONVERT_XP_COST = 3.0,				— XP cost for converting one equipment module to a related module when creating an equipment variant.

EQUIPMENT_MODULE_CONVERT_XP_COST = 3.0， — 在创建设备变型时，将一个设备模块转换为相关模块的 XP 成本。

EQUIPMENT_MODULE_REMOVE_XP_COST = 1.0,				— XP cost for removing an equipment module and leaving the slot empty when creating an equipment variant.

EQUIPMENT_MODULE_REMOVE_XP_COST = 1.0， — 在创建设备变体时，移除设备模块并将槽位留空的 XP 消耗。

BASE_NAVAL_EQUIPMENT_CONVERSION_IC_COST_FACTOR = 0.2, — Fraction of the hull industry cost which is always included in the refitting cost.

BASE_NAVAL_EQUIPMENT_CONVERSION_IC_COST_FACTOR = 0.2， — 船体行业成本的一部分，始终包含在改装成本中。

BASE_LAND_EQUIPMENT_CONVERSION_IC_COST_FACTOR = 0.9, — Fraction of the chassis industry cost which is always included in the conversion cost.

BASE_LAND_EQUIPMENT_CONVERSION_IC_COST_FACTOR = 0.9， — 机箱行业成本的分数，始终包含在转换成本中。

MIN_NAVAL_EQUIPMENT_CONVERSION_RESOURCE_COST_FACTOR = 0.2,	— Minimum fraction of a naval equipment’s strategic resource cost that any conversion will cost.

MIN_NAVAL_EQUIPMENT_CONVERSION_RESOURCE_COST_FACTOR = 0.2， — 任何转换将花费的海军装备战略资源成本的最小比例。

MIN_LAND_EQUIPMENT_CONVERSION_RESOURCE_COST_FACTOR = 0,		— Minimum fraction of a land equipment’s strategic resource cost that any conversion will cost.

MIN_LAND_EQUIPMENT_CONVERSION_RESOURCE_COST_FACTOR = 0， — 任何转换将花费的陆地设备战略资源成本的最小比例。

SHIP_REFIT_MAX_PROGRESS_TO_CANCEL = 0.2,			— Maximum refitting progress % that we still allow to cancel wihtout having to scuttle the ship.

SHIP_REFIT_MAX_PROGRESS_TO_CANCEL = 0.2， — 我们仍然允许取消的最大改装进度百分比，而不必凿沉船。

SHIP_REFIT_DAMAGE_TO_PROGRESS_FACTOR = 0.5,			— When a ship is being damaged (for example port strike) while refitting, the damage is transferred to the production line progress instead. This variable is used to balance it.

SHIP_REFIT_DAMAGE_TO_PROGRESS_FACTOR = 0.5， — 当船舶在改装时受损（例如港口撞击）时，损坏会转移到生产线进度上。此变量用于平衡它。

MINIMUM_NUMBER_OF_FACTORIES_TAKEN_BY_CONSUMER_GOODS_VALUE = 1,		— The minimum number of factories we have to put on consumer goods, by value.

MINIMUM_NUMBER_OF_FACTORIES_TAKEN_BY_CONSUMER_GOODS_VALUE = 1， — 按价值计算，我们必须在消费品上投入的最小工厂数量。

MINIMUM_NUMBER_OF_FACTORIES_TAKEN_BY_CONSUMER_GOODS_PERCENT = 0.1,	— The minimum number of factories we have to put on consumer goods, in percent.

MINIMUM_NUMBER_OF_FACTORIES_TAKEN_BY_CONSUMER_GOODS_PERCENT = 0.1， — 我们必须在消费品上投入的最小工厂数量，以百分比表示。

INITIAL_ALLOWED_FACTORY_RATIO_FOR_REPAIRS = 1.0,					— max % of factories allowed on autorepairs

INITIAL_ALLOWED_FACTORY_RATIO_FOR_REPAIRS = 1.0， — 允许进行自动维修的工厂的最大百分比

},



NMarket = {

NMarket = {

PURCHASE_CONTRACT_DELIVERY_TOTAL_DAYS = 30, 	— Number of days between purchase contract deliveries

PURCHASE_CONTRACT_DELIVERY_TOTAL_DAYS = 30， — 采购合同交付之间的天数

IC_TO_CIC_FACTOR = 2.0, 						— The factor for mapping IC cost to CIC cost. Should be a positive number.

IC_TO_CIC_FACTOR = 2.0 — 将 IC 成本映射到 CIC 成本的因子。应为正数。

MAX_CIV_FACTORIES_PER_CONTRACT = 15,							— Max number of factories that can be assigned for paying single contract.

MAX_CIV_FACTORIES_PER_CONTRACT = 15， — 可分配用于支付单个合同的最大工厂数量。

LOW_PRICE_LEVEL_FACTOR = 0.75, 				— The factor of base equipment price for low price level. Should be in range (0,1]

LOW_PRICE_LEVEL_FACTOR = 0.75， — 低价水平的基本设备价格系数。应在范围 （0,1） 内

HIGH_PRICE_LEVEL_FACTOR = 1.25, 				— The factor of base equipment price for high price level. Should be more than 1.

HIGH_PRICE_LEVEL_FACTOR = 1.25， — 高价格级别的基本设备价格因子。应大于 1。

MIN_DELIVERY_LIMIT_WARNING_UI = 0.8,							— The delivery percentage under we want to let player know the contract is inefficient. [0,1]

MIN_DELIVERY_LIMIT_WARNING_UI = 0.8， — 我们想让玩家知道合同效率低下的投篮百分比。[0,1]

PURCHASE_CONTRACT_SUBSIDY_BONUS_SPEED_FACTOR = 1.0,				— The factor of speed bonus from subsidies

PURCHASE_CONTRACT_SUBSIDY_BONUS_SPEED_FACTOR = 1.0， — 补贴的速度加成系数

CONVOY_WEIGHT_OVERRIDE = 0.0,									— Overrides the default lend leas weight of convoys for international market

CONVOY_WEIGHT_OVERRIDE = 0.0， — 覆盖国际市场护航的默认借出权重

REQUEST_AUTOMATION_AUTO_ACCEPT_MARKET_ACCESS_DEFAULT = true, 	— Whether by default should accept market access requests from other countries.

REQUEST_AUTOMATION_AUTO_ACCEPT_MARKET_ACCESS_DEFAULT = true， — 默认情况下是否应接受来自其他国家/地区的市场准入请求。

REQUEST_AUTOMATION_AUTO_SEND_MARKET_ACCESS_DEFAULT = true,		— Whether by default should send market access requests to other countries.

REQUEST_AUTOMATION_AUTO_SEND_MARKET_ACCESS_DEFAULT = true， — 默认情况下是否应向其他国家/地区发送市场准入请求。

REQUEST_AUTOMATION_AUTO_ACCEPT_PURCHASE_DEFAULT = false,		— Whether by default should accept purchase requests from other countries.

REQUEST_AUTOMATION_AUTO_ACCEPT_PURCHASE_DEFAULT = false， — 默认情况下是否应接受来自其他国家/地区的购买请求。

CONTRACT_ESTIMATE_AVERAGE_CONVOY_COUNT_ALPHA = 0.5,				— How strong effect should have the daily convoy count on the average (1.0 means it will use only the new number as average)

CONTRACT_ESTIMATE_AVERAGE_CONVOY_COUNT_ALPHA = 0.5， — 每日护航队计数的平均值应有多强的效果（1.0 表示它将仅使用新数字作为平均值）

CONTRACT_ESTIMATE_AVERAGE_DAILY_PRODUCTION_ALPHA = 0.5, 		— How strong effect should have the daily production on the average (1.0 means it will use only the new number as average)

CONTRACT_ESTIMATE_AVERAGE_DAILY_PRODUCTION_ALPHA = 0.5， — 平均每日产量的效果应该有多强（1.0 表示它将仅使用新数字作为平均值）

CONTRACT_ESTIMATE_AVERAGE_CONVOY_COUNT_SNAP_LIMIT = 0.3,		— If the difference between current and estimated available convoy count is smaller then this value, we will use the current value for calculations.

CONTRACT_ESTIMATE_AVERAGE_CONVOY_COUNT_SNAP_LIMIT = 0.3， — 如果当前和估计的可用护航数量之间的差异小于此值，我们将使用当前值进行计算。

CONTRACT_ESTIMATE_AVERAGE_DAILY_PRODUCTION_SNAP_LIMIT = 1.5,	— If the difference between current and estimated daily production is smaller then this value, we will use the current value for calculations.

CONTRACT_ESTIMATE_AVERAGE_DAILY_PRODUCTION_SNAP_LIMIT = 1.5， — 如果当前日产量与估计日产量之间的差异小于此值，我们将使用当前值进行计算。

CONTRACT_ESTIMATE_AVERAGE_CONVOY_SUNK_MULTIPLIER_ALPHA = 0.5,	— How strong effect should have the daily sunk efficiency on the average (1.0 means it will use only the new number as average)

CONTRACT_ESTIMATE_AVERAGE_CONVOY_SUNK_MULTIPLIER_ALPHA = 0.5， — 平均每日沉没效率的效果应该有多强（1.0 意味着它只会使用新数字作为平均值）

CONTRACT_ESTIMATE_AVERAGE_CONVOY_SUNK_MULTIPLIER_SNAP_LIMIT = 0.05, — If the difference between current and estimated sunk efficiency convoy count is smaller then this value, we will use the current value for calculations.

CONTRACT_ESTIMATE_AVERAGE_CONVOY_SUNK_MULTIPLIER_SNAP_LIMIT = 0.05， — 如果当前和估计的沉没效率护航数量之间的差异小于此值，我们将使用当前值进行计算。

WARNING_CONVOYS_SUNK_MAX_DAYS = 30, — The contracts will show sunk convoy message if there was sunk convoy in this amount of days

WARNING_CONVOYS_SUNK_MAX_DAYS = 30， — 如果在这段天数内有沉没的护航，合约将显示沉没的护航消息



},



NTechnology = {

技术学 = {

MAX_SUBTECHS = 3,						— Max number of sub technologies a technology can have.

MAX_SUBTECHS = 3， — 技术可以具有的最大子技术数。

BASE_RESEARCH_POINTS_SAVED = 30.0,		— Base amount of research points a country can save per slot.

BASE_RESEARCH_POINTS_SAVED = 30.0， — 一个国家/地区每个槽位可以节省的基础研究点数。

BASE_YEAR_AHEAD_PENALTY_FACTOR = 2,		— Base year ahead penalty

BASE_YEAR_AHEAD_PENALTY_FACTOR = 2， — 未来基准年罚款

BASE_TECH_COST = 110,					— Base cost for a tech. multiplied with tech cost and ahead of time penalties

BASE_TECH_COST = 110， — 技术的基本成本乘以技术成本和提前罚款

MAX_TECH_SHARING_BONUS = 0.5, 			— Max technology sharing bonus that can be applied instantly

MAX_TECH_SHARING_BONUS = 0.5， — 可立即应用的最大技术分享加成

LICENSE_PRODUCTION_TECH_BONUS = 0.2,	— License production tech bonus

LICENSE_PRODUCTION_TECH_BONUS = 0.2， — 许可证生产技术加成



DEFAULT_XP_UNLOCK_RESEARCH_COST = 0,			— default xp cost of a research to unlock directly

DEFAULT_XP_UNLOCK_RESEARCH_COST = 0， — 直接解锁的研究的默认 XP 成本

DEFAULT_XP_BOOST_RESEARCH_COST = 0,				— default xp cost of a research to speed up the process

DEFAULT_XP_BOOST_RESEARCH_COST = 0， — 用于加快过程的研究的默认 XP 成本

DEFAULT_XP_BOOST_RESEARCH_BONUS = 0,			— default boost research bonus gained when xp is used to research an item

DEFAULT_XP_BOOST_RESEARCH_BONUS = 0， — 使用 XP 研究物品时获得的默认 Boost Research 加成

MIN_RESEARCH_SPEED = 0.1,						— research speed can’t go below this value

MIN_RESEARCH_SPEED = 0.1， — 研究速度不能低于此值



USE_BONUS_REGRET_TIMER = 3,						— Number of days the player has to regret using a limited tech bonus

USE_BONUS_REGRET_TIMER = 3， — 玩家必须后悔使用有限科技奖励的天数

},



NPolitics = {

NPolitics = {

BASE_LEADER_TRAITS = 3,				— Base amount of leader traits.

BASE_LEADER_TRAITS = 3， — 领导者特征的基础数量。

MAX_RANDOM_LEADERS = 1,				— Maximum amount random leader to have per party.

MAX_RANDOM_LEADERS = 1， — 每个队伍拥有的最大随机领导者数量。

BASE_POLITICAL_POWER_INCREASE = 2,	— Weekly increase of PP.

BASE_POLITICAL_POWER_INCREASE = 2， — PP 的每周增加量。

ARMY_LEADER_COST = 5,					— command power cost for recruiting new leaders, ‘this value’ * number_of_existing_leaders_of_type

ARMY_LEADER_COST = 5， — 招募新领导者的指挥能力成本，'此值' * number_of_existing_leaders_of_type

NAVY_LEADER_COST = 5,					— command power cost for recruiting new leaders, ‘this value’ * number_of_existing_leaders_of_type

NAVY_LEADER_COST = 5， — 招募新领导者的命令力成本，'此值' * number_of_existing_leaders_of_type

ARMY_LEADER_MAX_COST = 80,				— max cost BEFORE modifiers

ARMY_LEADER_MAX_COST = 80， — 最大成本 BEFORE 修饰符

NAVY_LEADER_MAX_COST = 80,				— max cost BEFORE modifiers

NAVY_LEADER_MAX_COST = 80， — 最大成本 BEFORE 修饰符

LEADER_TRAITS_XP_SHOW = 0.05,			— Amount of XP a trait needs to be shown in tooltips of a leader.

LEADER_TRAITS_XP_SHOW = 0.05， — 特征需要在领导者的工具提示中显示的 XP 数量。

REVOLTER_PARTY_POPULARITY = 0.4,		— Revolter party loses 80% popularity when the civil war breaks out

REVOLTER_PARTY_POPULARITY = 0.4， — 内战爆发时，叛乱党失去了 80% 的人气

MIN_OVERTHROWN_GOVERNMENT_SUPPORT_RATIO = 0.4, — Min possible support for new government after puppeting the government

MIN_OVERTHROWN_GOVERNMENT_SUPPORT_RATIO = 0.4， — 傀儡政府后对新政府的最小可能支持

NUM_OCCUPATION_POLICIES = 4,		— Number of potential occupation policies

NUM_OCCUPATION_POLICIES = 4， — 潜在占领策略的数量

DEFAULT_OCCUPATION_POLICY = 1,		— Defaullt value for occupation policy

DEFAULT_OCCUPATION_POLICY = 1， — 占领策略的 Defaullt 值

INSTANT_WIN_REVOLTER_POPULARITY_RATIO = 0.4, — Min party popularity for instant win in one province state

INSTANT_WIN_REVOLTER_POPULARITY_RATIO = 0.4， — 在一个省份州立即获胜的最低队伍支持率

INSTANT_WIN_POPULARITY_WIN = 50, — New party popularity

INSTANT_WIN_POPULARITY_WIN = 50， — 新队伍的受欢迎程度

},



NBuildings = {

NBuildings = {

ANTI_AIR_SUPERIORITY_MULT = 5.0,	— How much air superiority reduction to the enemy does our AA guns? Normally each building level = -1 reduction. With this multiplier.

ANTI_AIR_SUPERIORITY_MULT = 5.0， — 我们的防空炮对敌人的空中优势降低了多少？通常每个建筑等级 = -1 减少。有了这个乘数。

SAM_MISSION_SUPERIORITY = 5.0, — How much air superiority each SAM mission gives per rocket wing performing SAM missions.

SAM_MISSION_SUPERIORITY = 5.0， — 每个地空导弹任务为执行地空导弹任务的每个火箭翼提供多少空中优势。

MAX_BUILDING_LEVELS = 15,			— Max levels a building can have.

MAX_BUILDING_LEVELS = 15， — 建筑物可以具有的最大标高。

AIRBASE_CAPACITY_MULT = 200,		— Each level of airbase building multiplied by this, gives capacity (max operational value). Value is int. 1 for each airplane.

AIRBASE_CAPACITY_MULT = 200， — 空军基地建筑的每一层乘以此，得到容量（最大运行值）。每架飞机的值为 int. 1。

ROCKETSITE_CAPACITY_MULT = 100,		— Each level of rocketsite building multiplied by this, gives capacity (max operational value). Value is int. 1 for each rocket.

ROCKETSITE_CAPACITY_MULT = 100， — 火箭站点建设的每个级别乘以此，得到容量（最大运行值）。每个火箭的值为 int. 1。

NAVALBASE_REPAIR_MULT = 0.05,		— Each level of navalbase building repairs X strength and can repair as many ships as its level

NAVALBASE_REPAIR_MULT = 0.05， — 海军基地建筑的每个级别都会修复 X 个力量，并且可以修复与其级别一样多的船只

RADAR_RANGE_BASE = 20,				— Radar range base, first level radar will be this + min, best radar will be this + max

RADAR_RANGE_BASE = 20， — 雷达测距基础，第一级雷达为此 + 最小值，最佳雷达为此 + 最大值

RADAR_RANGE_MIN = 20,				— Radar range (from state center to province center) in measure of map pixels. Exluding techs.

RADAR_RANGE_MIN = 20， — 以地图像素为单位的雷达范围（从州中心到省中心）。不包括技术人员。

RADAR_RANGE_MAX = 200,				— Range is interpolated between building levels 1-15.

RADAR_RANGE_MAX = 200 — 范围在建筑物级别 1-15 之间插值。

RADAR_INTEL_EFFECT = 40,			— Province covered by radar increases intel by 10 (where 255 is max). Province may be covered by multiple radars, then the value sums up.

RADAR_INTEL_EFFECT = 40， — 雷达覆盖的省份会增加 10 点情报（其中 255 最多）。Province 可能被多个雷达覆盖，那么该值相加。

SABOTAGE_FACTORY_DAMAGE = 100.0,		— How much damage takes a factory building in sabotage when state is occupied. Damage is mult by (1 + resistance strength), i.e. up to 2 x base value.

SABOTAGE_FACTORY_DAMAGE = 100.0， — 当国家被占领时，破坏工厂建筑造成的损失。伤害乘以 （1 + 抗性强度），即最多 2 x 基础值。

BASE_FACTORY_REPAIR = 1.0,			— Default repair rate in percentage before factories are taken into account (1.0 equals 1%).

BASE_FACTORY_REPAIR = 1.0 — 考虑工厂前的默认维修率百分比（1.0 等于 1%）。

BASE_FACTORY_REPAIR_FACTOR = 2.0,	— Factory speed modifier when repairing.

BASE_FACTORY_REPAIR_FACTOR = 2.0， — 修复时的出厂速度修正。

SUPPLY_PORT_LEVEL_THROUGHPUT = 3, — supply throughput per level of naval base

SUPPLY_PORT_LEVEL_THROUGHPUT = 3， — 每级海军基地的补给吞吐量

MAX_SHARED_SLOTS = 25,				— Max slots shared by factories

MAX_SHARED_SLOTS = 25， — 工厂共享的最大槽位

OWNER_CHANGE_EXTRA_SHARED_SLOTS_FACTOR = 1, —Scale factor of extra shared slots when state owner change.

OWNER_CHANGE_EXTRA_SHARED_SLOTS_FACTOR = 1， — 状态所有者更改时额外共享槽的比例因子。

DESTRUCTION_COOLDOWN_IN_WAR = 30,	— Number of days cooldown between removal of buildings in war times

DESTRUCTION_COOLDOWN_IN_WAR = 30， — 战时拆除建筑物之间的冷却天数



INFRASTRUCTURE_RESOURCE_BONUS = 0.2, — multiplicative resource bonus for each level of (non damaged) infrastructure

INFRASTRUCTURE_RESOURCE_BONUS = 0.2， — 每个级别（未损坏的）基础设施的乘法资源奖励

SUPPLY_ROUTE_RESOURCE_BONUS = 0.2, — multiplicative resource bonus for having a railway/naval connection to the capital

SUPPLY_ROUTE_RESOURCE_BONUS = 0.2， — 与首都有铁路/海军连接的乘法资源加成

INFRASTRUCTURE_MUD_EFFECT = -0.8, — multiplicative effect on mud growth for max infra

INFRASTRUCTURE_MUD_EFFECT = -0.8， — 最大基础设施对泥浆生长的乘法效应

},



NDeployment = {

N部署= {

BASE_DEPLOYMENT_TRAINING = 1,		— Base training done each day during deployment.

BASE_DEPLOYMENT_TRAINING = 1， — 部署期间每天进行的基础训练。

},



NMilitary = {

NMilitary = {

COMBAT_VALUE_ORG_IMPORTANCE = 1,		— Multiplier on TotalOrganisation when determining the combat value of a division

COMBAT_VALUE_ORG_IMPORTANCE = 1， — 确定师的战斗值时 TotalOrganisation 的乘数

COMBAT_VALUE_STR_IMPORTANCE = 1,		— Multiplier on TotalStrength when determining the combat value of a division

COMBAT_VALUE_STR_IMPORTANCE = 1， — 确定师的战斗值时 TotalStrength 的乘数



SOFT_ATTACK_TARGETING_FACTOR = 1.0,		— How much we care about potential soft attacks when evaluating priority combat target

SOFT_ATTACK_TARGETING_FACTOR = 1.0， — 在评估优先战斗目标时，我们对潜在软攻击的关心程度

HARD_ATTACK_TARGETING_FACTOR = 1.2,		— How much we care about potential hard attacks when evaluating priority combat target

HARD_ATTACK_TARGETING_FACTOR = 1.2， — 在评估优先战斗目标时，我们对潜在重攻击的关心程度



CASUALTIES_WS_P_PENALTY_DIVISOR = 200,							—Divisor for casualties WS penalty

CASUALTIES_WS_P_PENALTY_DIVISOR = 200， —伤亡 WS 罚分的除数

CASUALTIES_WS_A_PENALTY_DIVISOR = 600,							—Divisor for casualties WS penalty

CASUALTIES_WS_A_PENALTY_DIVISOR = 600，—伤亡 WS 罚分的除数



PIERCING_THRESHOLDS = {					— Our piercing / their armor must be this value to deal damage fraction equal to the index in the array below [higher number = higher penetration]. If armor is 0, 1.00 will be returned.

PIERCING_THRESHOLDS = { — 我们的穿甲 / 他们的装甲必须是这个值，才能造成等于下面数组中索引的伤害分数 [更高的数字 = 更高的穿透力]。如果 armor 为 0，则返回 1.00。

1.00,

0.75,





0.50,


0.00, —there isn’t much point setting this higher than 0

0.00， - 设置高于 0 的点不多

},

PIERCING_THRESHOLD_DAMAGE_VALUES = {	— 0 armor will always receive maximum damage (so add overmatching at your own peril). the system expects at least 2 values, with no upper limit.

PIERCING_THRESHOLD_DAMAGE_VALUES = { — 0 护甲总是会受到最大伤害（所以加上过度匹配，风险自负）。系统至少需要 2 个值，没有上限。

1.00,

0.80,

0.65,





0.50,


},



DIVISIONAL_COMMANDER_TRAIT_XP_REQUIREMENT = 400.0,	—Get a trait if any valid options & xp gained >= this

DIVISIONAL_COMMANDER_TRAIT_XP_REQUIREMENT = 400.0， —如果有任何有效的选项和获得的经验值>则获取一个特征

NUM_DAYS_FOR_OPERATION_ENTRY = 60,					—Number of days that a unit must have been on a particular active order instance to receive a history entry.

NUM_DAYS_FOR_OPERATION_ENTRY = 60， — 单位必须位于特定活动订单实例上才能接收历史记录条目的天数。

MAX_LEADERS_TO_SHOW = 50,							—Max officers to show in field officers list, sorted by field EXP. Divisions with awardable entries will potentially supercede this limit

MAX_LEADERS_TO_SHOW = 50， - 在外勤官员列表中显示的最大军官数，按外勤 EXP 排序。具有可奖励条目的师可能会取代此限制

BASE_FEMALE_DIVISIONAL_COMMANDER_CHANCE = 0,		—Chance to receive a female divisonal commander. This is set to zero in the base game, as we do not have generic female portraits for many graphical culture groups.

BASE_FEMALE_DIVISIONAL_COMMANDER_CHANCE = 0， —有几率获得一名女性分区指挥官。在基础游戏中，此数字设置为零，因为我们没有适用于许多图形文化群体的通用女性肖像。

—this expects a value between 0 and 1 and is added to by female_divisional_commander_chance. If you don’t have female generic portraits defined, you -will-get silhouettes.

- 该值介于 0 和 1 之间，并由 female_divisional_commander_chance 相加。如果您没有定义女性通用肖像，您将得到剪影。



DIVISIONAL_COMMANDER_RANK_XP_THRESHOLD = { 		— XP thresholds for divisional commander ranks. [TAG]_DIVISION_EXPERIENCE_TITLE_ARMY_EXPERIENCE_[array index]

DIVISIONAL_COMMANDER_RANK_XP_THRESHOLD = { — 师长军衔的 XP 阈值。[标签]_DIVISION_EXPERIENCE_TITLE_ARMY_EXPERIENCE_[数组索引]

0,

100.0,

200.0,

400.0,





800.0,


},



USE_MULTIPLICATIVE_ORG_LOSS_WHEN_MOVING = true, — whether to apply org_loss_when_moving modifiers additively or multiplicatively (hardcoded multiplicative pre-2021)

USE_MULTIPLICATIVE_ORG_LOSS_WHEN_MOVING = true， — 是加法还是乘法应用 org_loss_when_moving 修饰符（2021 年之前的硬编码乘法）

HOURLY_ORG_MOVEMENT_IMPACT = -0.2,		— how much org is lost every hour while moving an army.

HOURLY_ORG_MOVEMENT_IMPACT = -0.2， — 移动军队时每小时损失多少组织。

ZERO_ORG_MOVEMENT_MODIFIER = -0.8,		— speed impact at 0 org.

ZERO_ORG_MOVEMENT_MODIFIER = -0.8， — 0 组织的速度影响。

INFRA_ORG_IMPACT = 0.5,				— scale factor of infra on org regain.

INFRA_ORG_IMPACT = 0.5， — 组织 Regain 上基础设施的比例因子。

ENGAGEMENT_WIDTH_PER_WIDTH = 2.0,	— how much enemy combat width we are allowed to engage per width of our own

ENGAGEMENT_WIDTH_PER_WIDTH = 2.0， — 我们每幅自己的宽度允许与多少敌人战斗宽度交战



INFRASTRUCTURE_MOVEMENT_SPEED_IMPACT = -0.05,	— speed penalty per infrastucture below maximum.

INFRASTRUCTURE_MOVEMENT_SPEED_IMPACT = -0.05， — 每个基础设施的速度惩罚低于最大值。



VPS_FOR_HISTORY_ENTRY = 3,					— Minimum VPs required to receive an entry in divisional history

VPS_FOR_HISTORY_ENTRY = 3， — 在部门历史中获得条目所需的最低 VP 数

VPS_FOR_HIGH_HISTORY_ENTRY = 8,				— VPs required for high-level history entry

VPS_FOR_HIGH_HISTORY_ENTRY = 8， — 高级历史记录条目所需的 VP

ENTRIES_TO_CHECK_FOR_DUPLICATE = 2,			— Max number of history entries to check back to see if we’re being awarded the same entry

ENTRIES_TO_CHECK_FOR_DUPLICATE = 2， — 要回来检查的最大历史条目数，以查看我们是否获得了相同的条目

COST_INCREASE_PER_ACTIVE_MEDAL = 0.25,		— Additional cost factor per active medal

COST_INCREASE_PER_ACTIVE_MEDAL = 0.25， — 每枚有效奖牌的额外成本系数

MAX_ENTRY_ELISION_COUNT = 4,				— If we do the same type of thing consecutively, each entry will stack locations up to this number

MAX_ENTRY_ELISION_COUNT = 4， — 如果我们连续执行相同类型的事情，则每个条目将堆叠位置，直到达到此数字

GENERATE_AI_DIV_COMMAND_HISTORY_ENTRIES = true,	—Should we generate history entries for the AI (may cause savegame bloat)

GENERATE_AI_DIV_COMMAND_HISTORY_ENTRIES = true， —我们应该为 AI 生成历史条目吗（可能会导致保存游戏膨胀）

FIELD_EXPERIENCE_ON_DIVISION_MULT = 0.04,	— Multiply field experience gained by this, when applying to divisional commander

FIELD_EXPERIENCE_ON_DIVISION_MULT = 0.04， — 申请师长时，乘以由此获得的战地经验

MAX_FIELD_EXPERIENCE_ON_DIVISION = 8000,	— Max experience that can be gained on divisional commanders

MAX_FIELD_EXPERIENCE_ON_DIVISION = 8000， — 师长可以获得的最大经验值

FIELD_EXPERIENCE_ON_DIVISION_PER_MEDAL_MULT = 0.1,	—Multiply officer field experience gain by this * number of division medals on application

FIELD_EXPERIENCE_ON_DIVISION_PER_MEDAL_MULT = 0.1， —将军官战地经验增益乘以此 * 申请时的师奖章数量

HISTORY_OPERATION_RANDOM_MAX = 24,			— max random int to roll when determining whether to grant an awardable entry for operations. 1/N chances.

HISTORY_OPERATION_RANDOM_MAX = 24， — 在确定是否为作授予可奖励条目时滚动的最大随机整数。1/N 的机会。

CASUALTY_COUNT_FOR_HISTORY_ENTRY = 40000,	— number of received casualties to receive a history entry (one only)

CASUALTY_COUNT_FOR_HISTORY_ENTRY = 40000， — 接收历史条目的接收伤亡人数（仅 1 个）

FIELD_OFFICER_PROMOTION_PENALTY = 0.25,		—Amount of division experience lost when promoting a commander (reduced by modifiers)

FIELD_OFFICER_PROMOTION_PENALTY = 0.25， —晋升指挥官时损失的师经验量（通过修正减少）



HISTORICAL_ORDER_NAME_EXHAUSTION = false,	— Do historically chosen order instances exhaust their case names? If false ie, Operation Barbarossa will appear for any orders fulfilling the conditions for Germany

HISTORICAL_ORDER_NAME_EXHAUSTION = false， — 历史上选择的 order 实例是否会用尽其 case 名称？如果为 false，即 Operation Barbarossa 将出现在满足德国条件的任何订单中



WAR_SCORE_LOSSES_RATIO = 0.5,								— war score gained for every 1000 casualties

WAR_SCORE_LOSSES_RATIO = 0.5， — 每 1000 人伤亡获得战争分数

WAR_SCORE_LOSSES_MULT_IF_CAPITULATED = 0.25, 				— factor applied to war score gained from casualties if capitulated

WAR_SCORE_LOSSES_MULT_IF_CAPITULATED = 0.25， — 投降时从伤亡中获得的战争分数的系数

WAR_SCORE_STRATEGIC_BOMBING_FACTOR = 0.02, 				— war score gained for every damage made to enemy’s building with strategic bombing

WAR_SCORE_STRATEGIC_BOMBING_FACTOR = 0.02， — 战略轰炸对敌人建筑造成的每一次伤害都会获得战争分数

WAR_SCORE_STRAT_BOMBING_DECAY_PER_CIVILIAN_FACTORY = 0.10,	— monthly war score deducted from strategic bombing for every civilian factory in service on the bombed enemy side

WAR_SCORE_STRAT_BOMBING_DECAY_PER_CIVILIAN_FACTORY = 0.10， — 被轰炸的敌方每家在役民用工厂的战略轰炸中扣除每月战争分数

WAR_SCORE_AIR_IC_LOSS_FACTOR = 0.08,						— war score gained for every IC of damage done to an enemy’s air mission

WAR_SCORE_AIR_IC_LOSS_FACTOR = 0.08， — 对敌人的空中任务造成每 IC 伤害，战争分数就会获得

WAR_SCORE_LAND_DAMAGE_FACTOR = 0.1, 				— war score gained for every strengh damage done to an enemy’s army

WAR_SCORE_LAND_DAMAGE_FACTOR = 0.1， — 对敌军造成每一次强化伤害，战争分数就会获得

WAR_SCORE_ATTACKER_AND_WINNER_FACTOR = 1.2,					— factor applied to war score gained for strength damage done when being the attacker and the winner

WAR_SCORE_ATTACKER_AND_WINNER_FACTOR = 1.2， — 作为进攻方和赢家时，根据力量伤害获得的战争分数的系数

WAR_SCORE_LAND_IC_LOSS_FACTOR = 0.08, 				— war score gained for every IC damage done to an enemy’s army

WAR_SCORE_LAND_IC_LOSS_FACTOR = 0.08， — 对敌军造成每造成一次 IC 伤害，战争分数就会获得

WAR_SCORE_PROVINCE_FACTOR = 4.0,							— war score gained when capturing a province for the first time, multiplied by province’s worth

WAR_SCORE_PROVINCE_FACTOR = 4.0， — 首次占领省份时获得的战争分数乘以省份的价值

WAR_SCORE_LEND_LEASE_GIVEN_IC_FACTOR = 0.003, 				— war score gained for every IC of lend lease sent to allies

WAR_SCORE_LEND_LEASE_GIVEN_IC_FACTOR = 0.003， — 每向盟友发送一次租借 IC，战争分数就会获得

WAR_SCORE_LEND_LEASE_GIVEN_FUEL_FACTOR = 0.003, 			— war score gained for every 100 units of fuel lend lease sent to allies

WAR_SCORE_LEND_LEASE_GIVEN_FUEL_FACTOR = 0.003， — 每向盟友发送 100 个单位的燃料租借获得战争分数

WAR_SCORE_LEND_LEASE_RECEIVED_IC_FACTOR = 0.002, 			— war score deducted for every IC of lend lease received from allies

WAR_SCORE_LEND_LEASE_RECEIVED_IC_FACTOR = 0.002， — 从盟友那里收到的每一个租借 IC 都会扣除战争分数

WAR_SCORE_LEND_LEASE_RECEIVED_FUEL_FACTOR = 0.002, 		— war score deducted for every 100 units of fuel lend lease received from allies

WAR_SCORE_LEND_LEASE_RECEIVED_FUEL_FACTOR = 0.002， — 从盟友那里每收到 100 个单位的燃料租借就扣除战争分数



CORPS_COMMANDER_DIVISIONS_CAP = 24,			— how many divisions a corps commander is limited to. 0 = inf, < 0 = blocked

CORPS_COMMANDER_DIVISIONS_CAP = 24， — 军团指挥官只能管理多少个师。0 = inf，< 0 = 阻塞

DIVISION_SIZE_FOR_XP = 8, — how many battalions should a division have to count as a full divisions when calculating XP stuff

DIVISION_SIZE_FOR_XP = 8， — 在计算 XP 时，一个师必须将多少个营算作一个完整的师

CORPS_COMMANDER_ARMIES_CAP = -1,			— how many armies a corps commander is limited to. 0 = inf, < 0 = blocked

CORPS_COMMANDER_ARMIES_CAP = -1， — 军团指挥官只能指挥多少支军队。0 = inf，< 0 = 阻塞

FIELD_MARSHAL_DIVISIONS_CAP = 24,			— how many divisions a field marshall is limited to. 0 = inf, < 0 = blocked

FIELD_MARSHAL_DIVISIONS_CAP = 24， — 陆军元帅被限制的分区数。0 = inf，< 0 = 阻塞

FIELD_MARSHAL_ARMIES_CAP = 5,				— how many armies a field marshall is limited to. 0 = inf, < 0 = blocked

FIELD_MARSHAL_ARMIES_CAP = 5， — 陆军元帅限制的军队数量。0 = inf，< 0 = 阻塞



UNIT_LEADER_GENERATION_CAPITAL_CONTINENT_FACTOR = 100, —Integer factor to multiply manpower.

UNIT_LEADER_GENERATION_CAPITAL_CONTINENT_FACTOR = 100， —用于乘以人力的整数因子。



RECON_SKILL_IMPACT = 5, — how many skillpoints is a recon advantage worth when picking a tactic.

RECON_SKILL_IMPACT = 5， — 选择战术时，侦察优势值多少技能点。



MAX_DIVISION_BRIGADE_WIDTH = 5,			— Max width of regiments in division designer.

MAX_DIVISION_BRIGADE_WIDTH = 5， — 师设计器中团的最大宽度。

MAX_DIVISION_BRIGADE_HEIGHT = 5,		— Max height of regiments in division designer.

MAX_DIVISION_BRIGADE_HEIGHT = 5， — 师设计器中团的最大高度。

MIN_DIVISION_BRIGADE_HEIGHT = 4,		— Min height of regiments in division designer.

MIN_DIVISION_BRIGADE_HEIGHT = 4， — 师设计器中团的最小高度。

MAX_DIVISION_SUPPORT_WIDTH = 1,			— Max width of support in division designer.

MAX_DIVISION_SUPPORT_WIDTH = 1， — 划分设计器中的最大支撑宽度。

MAX_DIVISION_SUPPORT_HEIGHT = 5,		— Max height of support in division designer.

MAX_DIVISION_SUPPORT_HEIGHT = 5， — 分区设计器中的最大支撑高度。



BASE_DIVISION_BRIGADE_GROUP_COST = 20, 	—Base cost to unlock a regiment slot,

BASE_DIVISION_BRIGADE_GROUP_COST = 20， —解锁团槽的基本成本，

BASE_DIVISION_BRIGADE_CHANGE_COST = 5,	—Base cost to change a regiment column.

BASE_DIVISION_BRIGADE_CHANGE_COST = 5，- 更改团列的基本成本。

BASE_DIVISION_SUPPORT_SLOT_COST = 10, 	—Base cost to unlock a support slot

BASE_DIVISION_SUPPORT_SLOT_COST = 10，— 解锁支持槽的基本成本



MAX_ARMY_EXPERIENCE = 500,			—Max army experience a country can store

MAX_ARMY_EXPERIENCE = 500，—一个国家可以存储的最大军队经验值

MAX_NAVY_EXPERIENCE = 500,			—Max navy experience a country can store

MAX_NAVY_EXPERIENCE = 500，- 一个国家/地区可以存储的最大海军经验值

MAX_AIR_EXPERIENCE = 500,				—Max air experience a country can store

MAX_AIR_EXPERIENCE = 500，- 一个国家/地区可以存储的最大空中经验



COMBAT_MINIMUM_TIME = 4,			— Shortest time possible for a combat in hours

COMBAT_MINIMUM_TIME = 4， — 战斗的最短时间（以小时为单位）

SPOTTING_QUALITY_DROP_HOURS = 4, 	— Each X hours the intel quality drops after unit was spotted.

SPOTTING_QUALITY_DROP_HOURS = 4， — 发现单位后，每 X 小时情报质量就会下降。

LEADER_GROUP_MAX_SIZE = 1000, —5,			— Max slots for leader groups.

LEADER_GROUP_MAX_SIZE = 1000， —5， — 领导组的最大槽数。



MIN_SUPPLY_CONSUMPTION = 0.05,					— minimum value of supply consumption that a unit can get

MIN_SUPPLY_CONSUMPTION = 0.05， — 单位可以获得的最小供应消耗值



LAND_COMBAT_ORG_DICE_SIZE = 4, — nr of damage dice

LAND_COMBAT_ORG_DICE_SIZE = 4， — 伤害骰子的 NR

LAND_COMBAT_STR_DICE_SIZE = 2, — nr of damage dice

LAND_COMBAT_STR_DICE_SIZE = 2， — 伤害骰子的 NR

LAND_COMBAT_STR_DAMAGE_MODIFIER = 0.060, — global damage modifier… but some equipment is returned at end of battles see : EQUIPMENT_COMBAT_LOSS_FACTOR

LAND_COMBAT_STR_DAMAGE_MODIFIER = 0.060， — 全局伤害修正...但一些装备在战斗结束时被归还 参见 ： EQUIPMENT_COMBAT_LOSS_FACTOR

LAND_COMBAT_ORG_DAMAGE_MODIFIER = 0.053, — global damage modifier

LAND_COMBAT_ORG_DAMAGE_MODIFIER = 0.053， — 全局伤害编辑

LAND_AIR_COMBAT_STR_DAMAGE_MODIFIER = 0.032, — air global damage modifier

LAND_AIR_COMBAT_STR_DAMAGE_MODIFIER = 0.032， — 空气全局伤害编辑

LAND_AIR_COMBAT_ORG_DAMAGE_MODIFIER = 0.032, — global damage modifier

LAND_AIR_COMBAT_ORG_DAMAGE_MODIFIER = 0.032， — 全局伤害编辑

LAND_AIR_COMBAT_MAX_PLANES_PER_ENEMY_WIDTH = 3, — how many CAS/TAC can enter a combat depending on enemy width there

LAND_AIR_COMBAT_MAX_PLANES_PER_ENEMY_WIDTH = 3， — 有多少 CAS/TAC 可以进入战斗，具体取决于敌人的宽度

LAND_COMBAT_STR_ARMOR_ON_SOFT_DICE_SIZE = 2, — extra damage dice if our armor outclasses enemy

LAND_COMBAT_STR_ARMOR_ON_SOFT_DICE_SIZE = 2， — 如果我们的盔甲超过敌人，则额外伤害骰子

LAND_COMBAT_ORG_ARMOR_ON_SOFT_DICE_SIZE = 6, — extra damage dice if our armor outclasses enemy

LAND_COMBAT_ORG_ARMOR_ON_SOFT_DICE_SIZE = 6， — 如果我们的盔甲超过敌人，则额外伤害骰子

LAND_COMBAT_STR_ARMOR_DEFLECTION_FACTOR = 0.5, — damage reduction if armor outclassing enemy

LAND_COMBAT_STR_ARMOR_DEFLECTION_FACTOR = 0.5， — 如果装甲超过敌人，则伤害减免

LAND_COMBAT_ORG_ARMOR_DEFLECTION_FACTOR = 0.5, — damage reduction if armor outclassing enemy

LAND_COMBAT_ORG_ARMOR_DEFLECTION_FACTOR = 0.5， — 如果装甲超过敌人，则减轻伤害

LAND_COMBAT_COLLATERAL_FORT_FACTOR = 0.005,		— Factor to scale collateral damage to forts with.

LAND_COMBAT_COLLATERAL_FORT_FACTOR = 0.005， — 缩放堡垒附带伤害的系数。

LAND_COMBAT_COLLATERAL_INFRA_FACTOR = 0.0022,	— Factor to scale collateral damage to infra with.

LAND_COMBAT_COLLATERAL_INFRA_FACTOR = 0.0022， — 缩放基础设施附带损害的系数。

LAND_COMBAT_FORT_DAMAGE_CHANCE = 5,				— chance to get a hit to damage on forts. (out of 100)

LAND_COMBAT_FORT_DAMAGE_CHANCE = 5， — 有几率对要塞造成伤害。（满分 100 分）

ATTRITION_DAMAGE_ORG = 0.08,					 — damage from attrition to Organisation

ATTRITION_DAMAGE_ORG = 0.08， — 组织减员造成的伤害

ATTRITION_EQUIPMENT_LOSS_CHANCE = 0.1,		 — Chance for loosing equipment when suffer attrition. Scaled up the stronger attrition is. Then scaled down by equipment reliability.

ATTRITION_EQUIPMENT_LOSS_CHANCE = 0.1， — 遭受损耗时丢失设备的几率。按比例扩大，损耗越强。然后按设备可靠性缩小规模。

ATTRITION_EQUIPMENT_PER_TYPE_LOSS_CHANCE = 0.1, — Chance for loosing equipment when suffer attrition. Scaled up the stronger attrition is. Then scaled down by equipment reliability.

ATTRITION_EQUIPMENT_PER_TYPE_LOSS_CHANCE = 0.1， — 遭受损耗时丢失设备的几率。按比例扩大，损耗越强。然后按设备可靠性缩小规模。

ATTRITION_WHILE_MOVING_FACTOR = 1,

ATTRITION_WHILE_MOVING_FACTOR = 1，

RELIABILITY_ORG_REGAIN = -0.3, — how much reliability affects org regain

RELIABILITY_ORG_REGAIN = -0.3， — 可靠性对组织重新获得的影响程度

RELIABILITY_ORG_MOVING = -1.0, — how much reliability affects org loss on moving

RELIABILITY_ORG_MOVING = -1.0， — 可靠性对搬迁时组织损失的影响程度

RELIABILITY_WEATHER = 3.0, — how much reliability is afffecting weather impact

RELIABILITY_WEATHER = 3.0 — 影响天气影响的可靠性程度

RELIABILTY_RECOVERY = 0.1, — factor affecting how much equipment is returned “from the dead”

RELIABILTY_RECOVERY = 0.1， — 影响“死而复生”的装备数量的因素

BASE_CHANCE_TO_AVOID_HIT = 90, — Base chance to avoid hit if defences left.

BASE_CHANCE_TO_AVOID_HIT = 90， — 如果防守离开，则避免被击中的基础几率。

CHANCE_TO_AVOID_HIT_AT_NO_DEF = 60,	 — chance to avoid hit if no defences left.

CHANCE_TO_AVOID_HIT_AT_NO_DEF = 60， — 如果没有防御，则有几率避免被击中。

COMBAT_MOVEMENT_SPEED = 0.33,	 — speed reduction base modifier in combat

COMBAT_MOVEMENT_SPEED = 0.33， — 战斗中的速度降低基础修正

TACTIC_SWAP_FREQUENCEY = 12, — hours between tactic swaps

TACTIC_SWAP_FREQUENCEY = 12， — 战术交换之间的小时数

PREFERRED_TACTIC_CHARACTER_SKILL_LEVEL_REQUIRED = 5, — Which level a field marhal or general has to be before they can pick their preferred tactic

PREFERRED_TACTIC_CHARACTER_SKILL_LEVEL_REQUIRED = 5， — 陆军元帅或将军必须达到哪个级别才能选择他们喜欢的战术

COUNTRY_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.25, — extra weight multiplier for the country preferred tactic when doing weighted random

COUNTRY_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.25， — 执行加权随机时国家/地区首选策略的额外权重乘数

ARMY_GENERAL_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.5, — extra weight multiplier for the army general preferred tactic when doing weighted random

ARMY_GENERAL_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.5， — 进行加权随机时陆军将军首选战术的额外权重乘数

FIELD_MARSHAL_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.25, — extra weight multiplier for the field marhsal preferred tactic when doing weighted random

FIELD_MARSHAL_PREFERRED_TACTIC_WEIGHT_FACTOR = 0.25 — 执行加权随机时 Field Marhsal 首选策略的额外权重乘数

PREFERRED_TACTIC_COMMAND_POWER_COST = 20,	 — command point cost for changing preferred tactic

PREFERRED_TACTIC_COMMAND_POWER_COST = 20， — 更改首选战术的命令点消耗

INITIATIVE_PICK_COUNTER_ADVANTAGE_FACTOR = 0.35, — advantage per leader level for picking a counter

INITIATIVE_PICK_COUNTER_ADVANTAGE_FACTOR = 0.35， — 每个领导级别选择反击的优势

AMPHIBIOUS_INVADE_MOVEMENT_COST = 24.0, — total progress cost of movement while amphibious invading

AMPHIBIOUS_INVADE_MOVEMENT_COST = 24.0， — 两栖入侵时移动的总进度成本

LAND_SPEED_MODIFIER = 0.05, — basic speed control

LAND_SPEED_MODIFIER = 0.05， — 基本速度控制

RIVER_CROSSING_PENALTY = -0.3, — small river crossing

RIVER_CROSSING_PENALTY = -0.3， — 小河流穿越

RIVER_CROSSING_PENALTY_LARGE = -0.6, — large river crossing

RIVER_CROSSING_PENALTY_LARGE = -0.6， — 大型河流穿越

RIVER_CROSSING_SPEED_PENALTY = -0.25, — small river crossing

RIVER_CROSSING_SPEED_PENALTY = -0.25， — 小河穿越

RIVER_CROSSING_SPEED_PENALTY_LARGE = -0.5, — large river crossing

RIVER_CROSSING_SPEED_PENALTY_LARGE = -0.5， — 大型河流穿越

RIVER_SMALL_START_INDEX = 0, — color indices for rivers

RIVER_SMALL_START_INDEX = 0， — 河流的颜色索引

RIVER_SMALL_STOP_INDEX = 6,

RIVER_SMALL_STOP_INDEX = 6，

RIVER_LARGE_STOP_INDEX = 11,

RIVER_LARGE_STOP_INDEX = 11，

BASE_FORT_PENALTY = -0.15, 					 — fort penalty

BASE_FORT_PENALTY = -0.15， — 要塞罚分

MULTIPLE_COMBATS_PENALTY = -0.5, — defender penalty if attacked from multiple directions

MULTIPLE_COMBATS_PENALTY = -0.5， — 如果受到来自多个方向的攻击，防守球员将受到处罚

DIG_IN_FACTOR = 0.02,						 — bonus factor for each dug-in level

DIG_IN_FACTOR = 0.02， — 每个挖出的关卡的奖励因子

ARMY_LEADER_XP_GAIN_PER_UNIT_IN_COMBAT = 0.1, — XP gain per unit in combat

ARMY_LEADER_XP_GAIN_PER_UNIT_IN_COMBAT = 0.1， — 战斗中每个单位获得的经验值

CONSTANT_XP_RATIO_FOR_MULTIPLE_LEADERS_IN_SAME_COMBAT = 0.5, — if there are multiple leaders in same combat, each one gets thisratio + (1-thisratio)/num leaders. amount of xp each general gets scales 1 0.75 0.66 etc for 1 2 3 generals

CONSTANT_XP_RATIO_FOR_MULTIPLE_LEADERS_IN_SAME_COMBAT = 0.5， — 如果在同一战斗中有多个领导者，则每个领导者都会获得此比率 + （1-thisratio）/数量领导者。每个将军获得的经验值 比例 1、0.75、0.66 等，适用于 1、2、3 名将军

BASE_LEADER_TRAIT_GAIN_XP = 0.45,			 — Base xp gain for traits per hour for armies

BASE_LEADER_TRAIT_GAIN_XP = 0.45， — 军队每小时特性的基础经验获取

MAX_NUM_TRAITS = -1,						 — cant have more, -1 to disable

MAX_NUM_TRAITS = -1， — 不能有更多，-1 禁用

ENEMY_AIR_SUPERIORITY_IMPACT = -0.35, — effect on defense due to enemy air superiorty

ENEMY_AIR_SUPERIORITY_IMPACT = -0.35， — 敌方空中优势对防御的影响

ENEMY_AIR_SUPERIORITY_DEFENSE = 0.70,	 — more AA attack will approach this amount of help (diminishing returns)

ENEMY_AIR_SUPERIORITY_DEFENSE = 0.70， — 更多的 AA 攻击将接近这个数量的帮助（收益递减）

ENEMY_AIR_SUPERIORITY_DEFENSE_STEEPNESS = 112, — how quickly defense approaches the max impact diminishing returns curve

ENEMY_AIR_SUPERIORITY_DEFENSE_STEEPNESS = 112， — 防御接近最大影响递减收益曲线的速度

ENEMY_AIR_SUPERIORITY_SPEED_IMPACT = -0.3, — effect on speed due to enemy air superiority

ENEMY_AIR_SUPERIORITY_SPEED_IMPACT = -0.3， — 敌方空中优势对速度的影响



ANTI_AIR_TARGETTING_TO_CHANCE = 0.07,			— Balancing value to determine the chance of ground AA hitting an attacking airplane, affecting both the effective average damage done by AA to airplanes, and the reduction of damage done by airplanes due to AA support

ANTI_AIR_TARGETTING_TO_CHANCE = 0.07， — 平衡值，用于确定地面防空击中攻击飞机的几率，该几率既影响防空对飞机造成的有效平均伤害，也影响飞机因防空支持而造成的伤害减少

ANTI_AIR_ATTACK_TO_AMOUNT = 0.005,				— Balancing value to convert equipment stat anti_air_attack to the random % value of airplanes being hit.

ANTI_AIR_ATTACK_TO_AMOUNT = 0.005， — 将设备属性anti_air_attack转换为被击中飞机的随机百分比值的平衡值。



ENCIRCLED_PENALTY = -0.3, 	— penalty when completely encircled

ENCIRCLED_PENALTY = -0.3， — 完全包围时的惩罚



UNIT_EXPERIENCE_PER_COMBAT_HOUR = 0.0001,

UNIT_EXPERIENCE_PER_COMBAT_HOUR = 0.0001，

UNIT_EXPERIENCE_SCALE = 1.0,

UNIT_EXPERIENCE_SCALE = 1.0，

UNIT_EXPERIENCE_PER_TRAINING_DAY = 0.0015,

UNIT_EXPERIENCE_PER_TRAINING_DAY = 0.0015，

TRAINING_MAX_LEVEL = 2,

TRAINING_MAX_LEVEL = 2，

DEPLOY_TRAINING_MAX_LEVEL = 1,

DEPLOY_TRAINING_MAX_LEVEL = 1，

TRAINING_EXPERIENCE_SCALE = 62.0,

TRAINING_EXPERIENCE_SCALE = 62.0，

TRAINING_ORG = 0.2,

TRAINING_ORG = 0.2，

ARMY_EXP_BASE_LEVEL = 1,

ARMY_EXP_BASE_LEVEL = 1，

UNIT_EXP_LEVELS = { 0.1, 0.3, 0.75, 0.9 },		— Experience needed to progress to the next level

UNIT_EXP_LEVELS = { 0.1， 0.3， 0.75， 0.9 }， — 提升到下一个级别所需的经验

FIELD_EXPERIENCE_SCALE = 0.0015,

FIELD_EXPERIENCE_SCALE = 0.0015，

FIELD_EXPERIENCE_MAX_PER_DAY = 1.2,				— Most xp you can gain per day

FIELD_EXPERIENCE_MAX_PER_DAY = 1.2， — 您每天可以获得的最高经验值

EXPEDITIONARY_FIELD_EXPERIENCE_SCALE = 0.3,		— reduction factor in Xp from expeditionary forces

EXPEDITIONARY_FIELD_EXPERIENCE_SCALE = 0.3， — 远征军的 Xp 折减系数

LEND_LEASE_FIELD_EXPERIENCE_SCALE = 0.0005,		— Experience scale for lend leased equipment used in combat.

LEND_LEASE_FIELD_EXPERIENCE_SCALE = 0.0005， — 用于战斗的借出租赁设备的经验量表。

LEADER_EXPERIENCE_SCALE = 1.0,

LEADER_EXPERIENCE_SCALE = 1.0，

SLOWEST_SPEED = 4,

SLOWEST_SPEED = 4，

REINFORCEMENT_REQUEST_MAX_WAITING_DAYS = 14, — Every X days the equipment will be sent, regardless if still didn’t produced all that has been requested.

REINFORCEMENT_REQUEST_MAX_WAITING_DAYS = 14， — 每 X 天发送一次设备，无论是否仍未生产出所请求的所有设备。

REINFORCEMENT_REQUEST_DAYS_FREQUENCY = 7,	 — How many days must pass until we may give another reinforcement request

REINFORCEMENT_REQUEST_DAYS_FREQUENCY = 7， — 必须经过多少天才能再次提出增援请求

EXPERIENCE_COMBAT_FACTOR = 0.25,

EXPERIENCE_COMBAT_FACTOR = 0.25，

UNIT_DIGIN_CAP = 5, — how “deep” you can dig you can dig in until hitting max bonus

UNIT_DIGIN_CAP = 5， — 在达到最大奖金之前，您可以挖多“深”

UNIT_DIGIN_SPEED = 1,						 — how “deep” you can dig a day.

UNIT_DIGIN_SPEED = 1， — 您一天可以挖掘多“深”。

PARACHUTE_FAILED_EQUIPMENT_DIV = 50.0,		 — When the transport plane was shot down, we drop unit with almost NONE equipment

PARACHUTE_FAILED_EQUIPMENT_DIV = 50.0， — 当运输机被击落时，我们空投的单位几乎没有设备

PARACHUTE_FAILED_MANPOWER_DIV = 100.0,		 — When the transport plane was shot down, we drop unit with almost NONE manpower

PARACHUTE_FAILED_MANPOWER_DIV = 100.0， — 当运输机被击落时，我们几乎没有人力

PARACHUTE_FAILED_STR_DIV = 10.0,			 — When the transport plane was shot down, we drop unit with almost NONE strenght

PARACHUTE_FAILED_STR_DIV = 10.0， — 当运输机被击落时，我们以几乎没有强度的单位投放

PARACHUTE_DISRUPTED_EQUIPMENT_DIV = 1.5,	 — When the transport plane was hit, we drop unit with reduced equipment. Penalty is higher as more hits was received (and AA guns was in the state).

PARACHUTE_DISRUPTED_EQUIPMENT_DIV = 1.5， — 当运输机被击中时，我们空投装备减少的部队。受到的命中越多，惩罚就越高（并且 AA 枪在该州）。

PARACHUTE_DISRUPTED_MANPOWER_DIV = 1.9,	 — When the transport plane was hit, we drop unit with reduced manpower. Penalty is higher as more hits was received (and AA guns was in the state).

PARACHUTE_DISRUPTED_MANPOWER_DIV = 1.9， — 当运输机被击中时，我们以更少的人力投放单位。受到的命中越多，惩罚就越高（并且 AA 枪在该州）。

PARACHUTE_DISRUPTED_STR_DIV = 2.2,			 — When the transport plane was hit, we drop unit with reduced strength. Penalty is higher as more hits was received (and AA guns was in the state).

PARACHUTE_DISRUPTED_STR_DIV = 2.2， — 当运输机被击中时，我们投放强度降低的单位。受到的命中越多，惩罚就越高（并且 AA 枪在该州）。

PARACHUTE_PENALTY_RANDOMNESS = 0.1,			 — Random factor for str,manpower,eq penalties.

PARACHUTE_PENALTY_RANDOMNESS = 0.1， — str、manpower、eq 惩罚的随机因子。

PARACHUTE_DISRUPTED_AA_PENALTY = 1, — How much the Air defence in the state (from AA buildings level * air_defence) is scaled to affect overall disruption (equipment,manpower,str).

PARACHUTE_DISRUPTED_AA_PENALTY = 1， — 该州的防空系统（从 AA 建筑物级别 * air_defence）的比例（从 AA 建筑物级别 * ）到影响整体中断（设备、人力、力量）的程度。

PARACHUTE_COMPLETE_ORG = 0.4,				 — Organisation value (in %) after unit being dropped, regardless if failed, disrupted, or successful.

PARACHUTE_COMPLETE_ORG = 0.4 — 单位掉落后的组织价值（以 % 为单位），无论它是失败、中断还是成功。

PARACHUTE_ORG_REGAIN_PENALTY_DURATION = 120, — penalty in org regain after being parachuted. Value is in hours.

PARACHUTE_ORG_REGAIN_PENALTY_DURATION = 120， — 降落伞后 org 恢复的惩罚。值以小时为单位。

PARACHUTE_ORG_REGAIN_PENALTY_MULT = -0.8,	 — penalty to org regain after being parachuted.

PARACHUTE_ORG_REGAIN_PENALTY_MULT = -0.8， — 降落伞后对 org 重新获得的惩罚。

SHIP_MORALE_TO_ORG_REGAIN_BASE = 0.2,			 — Base org regain per hour

SHIP_MORALE_TO_ORG_REGAIN_BASE = 0.2 — 基本组织每小时的回收率

BASE_NIGHT_ATTACK_PENALTY = -0.5,

BASE_NIGHT_ATTACK_PENALTY = -0.5，

EXILE_EQUIPMENT = 1.0,						 — Amount of equipment to keep

EXILE_EQUIPMENT = 1.0， — 要保留的装备数量

EXILE_ORG = 0.0,							 — Amount of org to keep

EXILE_ORG = 0.0， — 要保留的组织数量

EXPERIENCE_LOSS_FACTOR = 1.00, — percentage of experienced solders who die when manpower is removed

EXPERIENCE_LOSS_FACTOR = 1.00， — 在移除人力时死亡的有经验的焊料的百分比

EQUIPMENT_COMBAT_LOSS_FACTOR = 0.70,	 	 — % of equipment lost to strength ratio in combat, so some % is returned if below 1

EQUIPMENT_COMBAT_LOSS_FACTOR = 0.70， — 战斗中损失的装备与力量比率的百分比，因此如果低于 1，则会返回一些百分比

SUPPLY_USE_FACTOR_MOVING = 1.5, — Deprecated/Unused

SUPPLY_USE_FACTOR_MOVING = 1.5， — 已弃用/未使用

SUPPLY_USE_FACTOR_INACTIVE = 0.95,			 — Deprecated/Unused

SUPPLY_USE_FACTOR_INACTIVE = 0.95， — 已弃用/未使用

SUPPLY_GRACE = 72,							 — troops always carry 3 days of food and supply

SUPPLY_GRACE = 72， — 部队总是携带 3 天的食物和补给

SUPPLY_GRACE_MAX_REDUCE_PER_HOUR = 2, — supply grace is not decreased instantly when it is buffed temporarily and buff is removed

SUPPLY_GRACE_MAX_REDUCE_PER_HOUR = 2， — 当供应宽限度暂时得到增益并移除时，它不会立即减少

SUPPLY_ORG_MAX_CAP = 0.35, — Max organization is factored by this if completely out of supply

SUPPLY_ORG_MAX_CAP = 0.35， — 如果完全供应，则由此计算最大组织

MAX_OUT_OF_SUPPLY_DAYS = 30, 				 — how many days of shitty supply until max penalty achieved

MAX_OUT_OF_SUPPLY_DAYS = 30， — 在达到最大惩罚之前有多少天的糟糕供应

OUT_OF_SUPPLY_ATTRITION = 0.20, — max attrition when out of supply

OUT_OF_SUPPLY_ATTRITION = 0.20， — 缺货时的最大损耗

OUT_OF_SUPPLY_SPEED = -0.8, — max speed reduction from supply

OUT_OF_SUPPLY_SPEED = -0.8， — 电源的最大速度降低

NON_CORE_SUPPLY_SPEED = -0.5,				 — we are not running on our own VP supply so need to steal stuff along the way

NON_CORE_SUPPLY_SPEED = -0.5， — 我们没有使用自己的 VP 供应，因此需要在此过程中窃取东西

NON_CORE_SUPPLY_AIR_SPEED = -0.25,			 — we are not running on our own VP supply so need to steal stuff along the way, a bit less due to air supply

NON_CORE_SUPPLY_AIR_SPEED = -0.25， — 我们没有使用自己的 VP 供应，因此需要沿途偷东西，由于空气供应，偷东西要少一点

OUT_OF_SUPPLY_MORALE = -0.2, — max org regain reduction from supply

OUT_OF_SUPPLY_MORALE = -0.2， — 最大组织补给减少量

TRAINING_ATTRITION = 0.05,		 			 — amount of extra attrition from being in training

TRAINING_ATTRITION = 0.05， — 因参加训练而额外减员的金额

TRAINING_MIN_STRENGTH = 0.1,					— if strength is less than this, the unit will pause training until it’s been reinforced

TRAINING_MIN_STRENGTH = 0.1， — 如果力量小于此值，该单位将暂停训练，直到得到强化

TRAINING_MAX_DAILY_COUNTRY_EXP = 0.08,			— Maximum army XP gained per day from training

TRAINING_MAX_DAILY_COUNTRY_EXP = 0.08， — 每天从训练中获得的最大军队经验值

AIR_SUPPORT_BASE = 0.25, — CAS bonus factor for air support moddifier for land unit in combat

AIR_SUPPORT_BASE = 0.25， — 战斗中陆地单位空中支援改装器的 CAS 加成系数

LOW_SUPPLY = 0.99,							 — When the supply status of an unit becomes low.

LOW_SUPPLY = 0.99 — 当设备的供应状态变为低时。

BORDER_WAR_ATTRITION_FACTOR = 0.1,			 — How much of borderwar balance of power makes it into attrition

BORDER_WAR_ATTRITION_FACTOR = 0.1， — 边境战争的权力平衡有多少会变成消耗

BORDER_WAR_VICTORY = 0.8,					 — At wich border war balance of power is victory declared

BORDER_WAR_VICTORY = 0.8， — 在边境战争中，宣布了胜利

REINFORCE_CHANCE = 0.02, 	 — base chance to join combat from back line when empty

REINFORCE_CHANCE = 0.02， — 空时从后场加入战斗的基础几率

SPEED_REINFORCEMENT_BONUS = 0.01, — chance to join combat bonus by each 100% larger than infantry base (up to 200%)

SPEED_REINFORCEMENT_BONUS = 0.01， — 每比步兵基地大 100% 就有几率加入战斗加成（最多 200%）

OVERSEAS_LOSE_EQUIPMENT_FACTOR = 0.75,		 — percentage of equipment lost disbanded overseas

OVERSEAS_LOSE_EQUIPMENT_FACTOR = 0.75，— 海外解散设备损失的百分比

NAVAL_TRANSFER_DISBAND_MANPOWER_FACTOR = 0.5, — percentage of manpower returned when a naval transfering unit is disbanded

NAVAL_TRANSFER_DISBAND_MANPOWER_FACTOR = 0.5， — 海军转移单位解散时返回的人力百分比

ENCIRCLED_DISBAND_MANPOWER_FACTOR = 0.2, — percentage of manpower returned when an encircled unit is disbanded

ENCIRCLED_DISBAND_MANPOWER_FACTOR = 0.2， — 被包围的单位解散时返回的人力百分比

ORG_LOSS_FACTOR_ON_CONQUER = 0.2, — percentage of (max) org loss on takign enemy province

ORG_LOSS_FACTOR_ON_CONQUER = 0.2， — 敌方省份的（最大）组织损失百分比

LOW_ORG_FOR_ATTACK = 0.3, — at what org % we start affecting speed when doign hostile moves. scales down ZERO_ORG_MOVEMENT_MODIFIER

LOW_ORG_FOR_ATTACK = 0.3， — 我们在进行敌对动作时开始影响速度的组织百分比。缩小 ZERO_ORG_MOVEMENT_MODIFIER



PLANNING_DECAY = 0.01,

PLANNING_DECAY = 0.01，

PLAYER_ORDER_PLANNING_DECAY = 0.03,				— Amount of planning lost due to player manual order

PLAYER_ORDER_PLANNING_DECAY = 0.03， — 由于玩家手动命令而丢失的计划量

PLANNING_GAIN = 0.02,

PLANNING_GAIN = 0.02，

NAVAL_INVASION_PLANNING_BONUS_GAIN = 0.02,		— Planning Bonus gain per day for naval invasions

NAVAL_INVASION_PLANNING_BONUS_GAIN = 0.02， — 每天海军入侵的计划加成收益

NAVAL_INVASION_PLANNING_BONUS_MALUS = -1,		— Malus in percentage for the planning bonus gain for naval invasions

NAVAL_INVASION_PLANNING_BONUS_MALUS = -1， — 海军入侵的计划加成收益的百分比

PLANNING_MAX = 0.3, 	— can get more from techs

PLANNING_MAX = 0.3， — 可以从技术人员那里获得更多

CIVILWAR_ORGANIZATION_FACTOR = 0.3,			 	— Multiplier of org for both sides when civilwar.

CIVILWAR_ORGANIZATION_FACTOR = 0.3， — 内战时双方的组织乘数。

PLAN_CONSIDERED_GOOD = 0.25,					— Plan evaluations above this value are considered more or less safe

PLAN_CONSIDERED_GOOD = 0.25 — 高于此值的计划评估被认为或多或少是安全的

PLAN_CONSIDERED_BAD = -0.25,					— Plan evaluations below this value are considered unsafe

PLAN_CONSIDERED_BAD = -0.25 — 低于此值的计划评估被视为不安全

PLAN_MIN_AUTOMATED_EMPTY_POCKET_SIZE = 2,		— The battle plan system will only automatically attack provinces in pockets that has no resistance and are no bigger than these many provinces

PLAN_MIN_AUTOMATED_EMPTY_POCKET_SIZE = 2， — 作战计划系统只会自动攻击没有抵抗力且不大于这些众多省份的省份

PLAN_SPREAD_ATTACK_WEIGHT = 12.0,				— The higher the value, the less it should crowd provinces with multiple attacks.

PLAN_SPREAD_ATTACK_WEIGHT = 12.0， — 值越高，多次攻击的省份就越不拥挤。

PLAN_NEIGHBORING_ENEMY_PROVINCE_FACTOR = 0.7,	— When calculating the importance of provinces, it takes number of enemy provinces into account, factored by this

PLAN_NEIGHBORING_ENEMY_PROVINCE_FACTOR = 0.7， — 在计算省份的重要性时，它会考虑敌方省份的数量，由此计算

PLAN_PROVINCE_BASE_IMPORTANCE = 2.0,			— Used when calculating the calue of front and defense area provinces for the battle plan system

PLAN_PROVINCE_BASE_IMPORTANCE = 2.0， — 在计算作战计划系统的前线和防御区域省份的计算时使用



PLAN_PROVINCE_LOW_VP_DEFENSE_THRESHOLD = 2.0, — For area defense VP orders, what are the thresholds for “low”, “medium” and “high” VP values

PLAN_PROVINCE_LOW_VP_DEFENSE_THRESHOLD = 2.0， — 对于区域防御 VP 订单，“低”、“中”和“高”VP 值的阈值是什么

PLAN_PROVINCE_MEDIUM_VP_DEFENSE_THRESHOLD = 8.0, — see above

PLAN_PROVINCE_MEDIUM_VP_DEFENSE_THRESHOLD = 8.0， — 见上文

PLAN_PROVINCE_HIGH_VP_DEFENSE_THRESHOLD = 25.0, — see above

PLAN_PROVINCE_HIGH_VP_DEFENSE_THRESHOLD = 25.0， — 见上文

PLAN_PROVINCE_LOW_VP_DEFENSE_IMPORTANCE = 2.0, — For area defense VP orders, use this value for relative importance

PLAN_PROVINCE_LOW_VP_DEFENSE_IMPORTANCE = 2.0， - 对于区域防御 VP 订单，请使用此值表示相对重要性

PLAN_PROVINCE_MEDIUM_VP_DEFENSE_IMPORTANCE = 5.0, — see above

PLAN_PROVINCE_MEDIUM_VP_DEFENSE_IMPORTANCE = 5.0， — 见上文

PLAN_PROVINCE_HIGH_VP_DEFENSE_IMPORTANCE = 10.0, — see above

PLAN_PROVINCE_HIGH_VP_DEFENSE_IMPORTANCE = 10.0， — 见上文

PLAN_PROVINCE_CAPITAL_DEFENSE_IMPORTANCE = 50.0, — For area defense VP orders, boost importance value with this if it’s the capital

PLAN_PROVINCE_CAPITAL_DEFENSE_IMPORTANCE = 50.0， — 对于区域防御 VP 订单，如果是首都，则用这个提升重要值

MIN_VP_NEEDED_FOR_DEFENSE_ORDER_ASSIGNMENTS = 1.0, — For area devense VP orders, ignore provinces with VP <= this value

MIN_VP_NEEDED_FOR_DEFENSE_ORDER_ASSIGNMENTS = 1.0， — 对于区域开发 VP 订单，忽略 VP <= 此值的省份



PLAN_PROVINCE_LOW_VP_IMPORTANCE_FRONT = 2.0, — Used when calculating the calue of fronts in the battle plan system

PLAN_PROVINCE_LOW_VP_IMPORTANCE_FRONT = 2.0， — 在计算作战计划系统中的前线计算时使用

PLAN_PROVINCE_MEDIUM_VP_IMPORTANCE_FRONT = 2.25, — Used when calculating the calue of fronts in the battle plan system

PLAN_PROVINCE_MEDIUM_VP_IMPORTANCE_FRONT = 2.25， — 在计算作战计划系统中的前线计算时使用

PLAN_PROVINCE_HIGH_VP_IMPORTANCE_FRONT = 2.75, — Used when calculating the calue of fronts in the battle plan system

PLAN_PROVINCE_HIGH_VP_IMPORTANCE_FRONT = 2.75， — 在计算作战计划系统中的前线计算时使用



PLAN_SHARED_FRONT_PROV_IMPORTANCE_FACTOR = 0.8,	— If fornt orders share end provinces, they should each have a somewhat reduced prio due to it being shared.

PLAN_SHARED_FRONT_PROV_IMPORTANCE_FACTOR = 0.8， — 如果 fornt 订单共享结束省份，则由于共享，它们各自的优先级应该有所降低。



PLAN_PORVINCE_PORT_BASE_IMPORTANCE = 12.0,		— Added importance for area defense province with a port

PLAN_PORVINCE_PORT_BASE_IMPORTANCE = 12.0， — 增加了带有端口的区域防御省份的重要性

PLAN_PORVINCE_PORT_LEVEL_FACTOR = 1.5,			— Bonus factor for port level

PLAN_PORVINCE_PORT_LEVEL_FACTOR = 1.5， — 端口级别的奖励因子

PLAN_PORVINCE_AIRFIELD_BASE_IMPORTANCE = 3.0,	— Added importance for area defense province with air field

PLAN_PORVINCE_AIRFIELD_BASE_IMPORTANCE = 3.0， — 增加了带有机场的区域防御省份的重要性

PLAN_PORVINCE_AIRFIELD_POPULATED_FACTOR = 1.5,	— Bonus factor when an airfield has planes on it

PLAN_PORVINCE_AIRFIELD_POPULATED_FACTOR = 1.5 — 机场上有飞机时的奖励系数

PLAN_PORVINCE_AIRFIELD_LEVEL_FACTOR = 0.25,		— Bonus factor for airfield level

PLAN_PORVINCE_AIRFIELD_LEVEL_FACTOR = 0.25， — 机场级别的奖励系数

PLAN_PORVINCE_RESISTANCE_BASE_IMPORTANCE = 10.0, — Used when calculating the calue of defense area provinces for the battle plan system (factored by resistance level)

PLAN_PORVINCE_RESISTANCE_BASE_IMPORTANCE = 10.0， — 在计算作战计划系统的防御区域省份计算时使用（由抵抗力水平考虑）

PLAN_PROVINCE_VP_PORT_FACTOR = 0.25,

PLAN_PROVINCE_VP_PORT_FACTOR = 0.25，



— These need to result in province value > 1.0 for it to matter.

— 这些需要导致省值> 1.0 才有意义。

PLAN_AREA_DEFENSE_ENEMY_CONTROLLER_SCORE = 25.0,— Score applied to provinces in the defense area order controlled by enemies

PLAN_AREA_DEFENSE_ENEMY_CONTROLLER_SCORE = 25.0，— 应用于敌人控制的防御区域顺序中的省份的分数

PLAN_AREA_DEFENSE_ENEMY_UNIT_FACTOR = -2.0,		— Factor applied to province score in area defense order per enemy unit in that province

PLAN_AREA_DEFENSE_ENEMY_UNIT_FACTOR = -2.0， — 应用于该省份中每个敌方单位的区域防御顺序中省份分数的系数

PLAN_AREA_DEFENSE_FORT_IMPORTANCE = 0.25,		— Used when calculating the value of defense area provinces for the battle plan system, works as multipliers on the rest

PLAN_AREA_DEFENSE_FORT_IMPORTANCE = 0.25， — 在计算战斗计划系统的防御区域省份值时使用，作为其余省份的乘数

PLAN_AREA_DEFENSE_COASTAL_FORT_IMPORTANCE = 3.0,— Used when calculating the value of defense area provinces for the battle plan system

PLAN_AREA_DEFENSE_COASTAL_FORT_IMPORTANCE = 3.0 — 在计算作战计划系统的防御区域省份值时使用

PLAN_AREA_DEFENSE_COAST_NO_FORT_IMPORTANCE = 1.1,— Used when calculating the value of defense area provinces for the battle plan system

PLAN_AREA_DEFENSE_COAST_NO_FORT_IMPORTANCE = 1.1，— 在计算作战计划系统的防御区域省份值时使用

PLAN_AREA_DEFENSE_HAS_RAIL_IMPORTANCE = 1.5,	— Used when calculating the value of defense area provinces for the battle plan system

PLAN_AREA_DEFENSE_HAS_RAIL_IMPORTANCE = 1.5， — 在计算作战计划系统的防御区域省份值时使用

PLAN_AREA_DEFENSE_HAS_SUPPLY_NODE = 20.0,		— Used when calculating the value of defense area provinces for the battle plan system

PLAN_AREA_DEFENSE_HAS_SUPPLY_NODE = 20.0， — 在计算作战计划系统的防御区域省份值时使用

PLAN_AREA_DEFENSE_FACILITY = 15.0, — Used when calculating the value of defense area provinces for the battle plan system

PLAN_AREA_DEFENSE_FACILITY = 15.0， — 在计算作战计划系统的防御区域省份值时使用



PLAN_STICKINESS_FACTOR = 100.0,					— Factor used in unitcontroller when prioritizing units for locations

PLAN_STICKINESS_FACTOR = 100.0， — 确定位置单位的优先级时在 unitcontroller 中使用的系数



PLAN_PROVINCE_PRIO_DISTRIBUTION_MIN = 0.7,		— Lowest fraction of divisions that will be distributed based on province priority

PLAN_PROVINCE_PRIO_DISTRIBUTION_MIN = 0.7， — 将根据省份优先级分配的分区的最低比例

PLAN_PROVINCE_PRIO_DISTRIBUTION_MAX = 1.0,		— Highest fraction of divisions that will be distributed based on province priority

PLAN_PROVINCE_PRIO_DISTRIBUTION_MAX = 1.0 — 将根据省份优先级分配的分区的最高比例

PLAN_PROVINCE_PRIO_DISTRIBUTION_DPP_HIGH = 3.0, — At what divisions per province should we use PLAN_PROVINCE_PRIO_DISTRIBUTION_MIN

PLAN_PROVINCE_PRIO_DISTRIBUTION_DPP_HIGH = 3.0， — 我们应该在每个省份使用什么分区PLAN_PROVINCE_PRIO_DISTRIBUTION_MIN

PLAN_PROVINCE_PRIO_DISTRIBUTION_DPP_LOW = 2.0,	— At what divisions per province should we use PLAN_PROVINCE_PRIO_DISTRIBUTION_MAX

PLAN_PROVINCE_PRIO_DISTRIBUTION_DPP_LOW = 2.0， — 我们应该在每个省份使用什么分区PLAN_PROVINCE_PRIO_DISTRIBUTION_MAX



PLAN_EXECUTE_CAREFUL_LIMIT = 25, — When looking for an attack target, this score limit is required in the battle plan to consider province for attack

PLAN_EXECUTE_CAREFUL_LIMIT = 25， — 在寻找攻击目标时，在作战计划中需要此分数限制，以考虑攻击的省份

PLAN_EXECUTE_BALANCED_LIMIT = 0, — When looking for an attack target, this score limit is required in the battle plan to consider province for attack

PLAN_EXECUTE_BALANCED_LIMIT = 0， — 在寻找攻击目标时，在战斗计划中需要此分数限制以考虑攻击省份

PLAN_EXECUTE_RUSH = -200, — When looking for an attack target, this score limit is required in the battle plan to consider province for attack

PLAN_EXECUTE_RUSH = -200， — 在寻找攻击目标时，在战斗计划中需要此分数限制，以考虑攻击的省份

PLAN_EXECUTE_CAREFUL_MAX_FORT = 5,				— If execution mode is set to careful, units will not attack provinces with fort levels greater than or equal to this

PLAN_EXECUTE_CAREFUL_MAX_FORT = 5， — 如果执行模式设置为小心，单位不会攻击要塞等级大于或等于此级别的省份



— order by EExecutionType: careful, balanced, rush, <skip>, rush_weak

— 按 EExecutionType： careful， balanced， rush， <skip>， rush_weak 排序

PLAN_EXECUTE_SUPPLY_CHECK = { 1.0, 0.0, 0.0, 1.0, 0.0 }, — for each execution mode how careful should we be with supply (1.0 means full required supply available, zero is no limit).

PLAN_EXECUTE_SUPPLY_CHECK = { 1.0， 0.0， 0.0， 1.0， 0.0 }， — 对于每种执行模式，我们应该多小心地使用供应（1.0 表示完全需要的供应可用，零是无限制的）。



PLAN_MAX_PROGRESS_TO_JOIN = 0.50,				— If Lower progress than this, probably needs support

PLAN_MAX_PROGRESS_TO_JOIN = 0.50， — 如果进度低于此进度，则可能需要支持



PLAN_COHESION_WEIGHTS = { 1.0, 40.0, 80.0 }, 	— for each cohesion setting, how keen on relocating from distance should we be? (default 1.0), higher weight = shorter max distance

PLAN_COHESION_WEIGHTS = { 1.0， 40.0， 80.0 }， — 对于每个内聚设置，我们应该有多热衷于从远处搬迁？（默认 1.0），权重越高 = 最大距离越短

PLAN_COHESION_DISTANCE_MAX_WHEN_LEFT_BEHIND = 38,	—Unused and deprecated - will be removed in next major version.

PLAN_COHESION_DISTANCE_MAX_WHEN_LEFT_BEHIND = 38，- 未使用和已弃用 - 将在下一个主要版本中删除。



PLAN_BLITZ_OPTIMISM = 0.2,						— Additional combat balance value in favor of blitzing side when considering targets (not a combat bonus, just offsets planning)

PLAN_BLITZ_OPTIMISM = 0.2， — 在考虑目标时，有利于闪电战一方的额外战斗平衡值（不是战斗加成，只是抵消计划）

MIN_BALANCE_SCORE_TO_PROCEED_ATTACK = 0.2,		—A combat balance score of less than this will prevent auto attacking

MIN_BALANCE_SCORE_TO_PROCEED_ATTACK = 0.2， —战斗平衡分数低于此值将阻止自动攻击

DYNAMIC_MODIFIER_ATTACK_BIAS = 1.0,				—This factors the weighting bias of dynamic attack modifiers

DYNAMIC_MODIFIER_ATTACK_BIAS = 1.0 — 此因素考虑了动态攻击特效的加权偏差



FLANKED_PROVINCES_COUNT = 3,					— Attacker has to attack from that many provinces for the attack to be considered as flanking

FLANKED_PROVINCES_COUNT = 3， — 进攻方必须从这么多省份发起攻击，才能将攻击视为侧翼攻击

EQUIPMENT_REPLACEMENT_RATIO = 0.1,				— Equipment min ratio after blocking the equipment type

EQUIPMENT_REPLACEMENT_RATIO = 0.1， — 阻止设备类型后的设备最小比率

NUKE_DELAY_HOURS = 2,							— How many hours does it take for the nuclear drop to happen

NUKE_DELAY_HOURS = 2， — 发生核下降需要多少小时

PARADROP_PENALTY = -0.3, 						— Combat penalty when recently paradropped

PARADROP_PENALTY = -0.3， — 最近降落时的战斗惩罚

PARADROP_HOURS = 48,							— time paratroopers suffer penalties in combat

PARADROP_HOURS = 48， — 伞兵在战斗中受到惩罚的时间

COMBAT_SUPPLY_LACK_ATTACKER_ATTACK = -0.25, — attack combat penalty for attacker if out of supply

COMBAT_SUPPLY_LACK_ATTACKER_ATTACK = -0.25， — 如果补给不足，攻击者的攻击战斗惩罚

COMBAT_SUPPLY_LACK_ATTACKER_DEFEND = -0.65, — defend combat penalty for attacker if out of supply

COMBAT_SUPPLY_LACK_ATTACKER_DEFEND = -0.65， — 如果供应不足，则对攻击者的防御战斗惩罚

COMBAT_SUPPLY_LACK_DEFENDER_ATTACK = -0.35, — attack combat penalty for defender if out of supply

COMBAT_SUPPLY_LACK_DEFENDER_ATTACK = -0.35， — 如果补给不足，防守方的攻击战斗惩罚

COMBAT_SUPPLY_LACK_DEFENDER_DEFEND = -0.15, — defend combat penalty for defender if out of supply

COMBAT_SUPPLY_LACK_DEFENDER_DEFEND = -0.15， — 如果补给不足，防守方会受到防御战斗惩罚

COMBAT_STACKING_START = 5,						— at what nr of divisions stacking penalty starts

COMBAT_STACKING_START = 5， — 在哪个分区开始累积处罚

COMBAT_STACKING_EXTRA = 3, — extra stacking from directions

COMBAT_STACKING_EXTRA = 3， — 来自方向的额外堆叠

COMBAT_STACKING_PENALTY = -0.02, — how much stackign penalty per division

COMBAT_STACKING_PENALTY = -0.02， — 每个分区的 stackign 惩罚金额

COMBAT_OVER_WIDTH_PENALTY = -1,					— over combat width penalty per %.

COMBAT_OVER_WIDTH_PENALTY = -1， — 每 % 的超额战斗宽度惩罚。

COMBAT_OVER_WIDTH_PENALTY_MAX = -0.33,			— over combat width max (when you cant join no more).

COMBAT_OVER_WIDTH_PENALTY_MAX = -0.33， — 超过最大战斗宽度（当你不能再加入时）。

RETREAT_SPEED_FACTOR = 0.25, — speed bonus when retreating

RETREAT_SPEED_FACTOR = 0.25， — 撤退时的速度加成

WITHDRAWING_SPEED_FACTOR = 0.15,				— speed bonus when withdrawing

WITHDRAWING_SPEED_FACTOR = 0.15， — 提款时的速度奖励

STRATEGIC_SPEED_INFRA_BASE = 5.0, — Base speed of strategic redeployment when not on railways

STRATEGIC_SPEED_INFRA_BASE = 5.0， — 不在铁路上时战略重新部署的基本速度

STRATEGIC_SPEED_INFRA_MAX = 10.0, — Additional speed of strategic redeployment on max-level infrastructure

STRATEGIC_SPEED_INFRA_MAX = 10.0 — 在最高级别的基础设施上实现战略性重新部署的额外速度

STRATEGIC_SPEED_RAIL_BASE = 15.0, — Base speed of strategic redeployment when on railways

STRATEGIC_SPEED_RAIL_BASE = 15.0， — 在铁路上战略重新部署的基本速度

STRATEGIC_SPEED_RAIL_MAX = 25.0, — Additional speed of strategic redeployment on max-level railways

STRATEGIC_SPEED_RAIL_MAX = 25.0， — 在最高级别铁路上战略重新部署的额外速度

STRATEGIC_REDEPLOY_ORG_RATIO = 0.1,				— Ratio of max org while strategic redeployment

STRATEGIC_REDEPLOY_ORG_RATIO = 0.1， — 战略性重新部署时最大组织比率

BATALION_NOT_CHANGED_EXPERIENCE_DROP = 0.0,		— Division experience drop if unit has same batalion

BATALION_NOT_CHANGED_EXPERIENCE_DROP = 0.0， — 如果单位具有相同的营，则师经验值掉落

BATALION_CHANGED_EXPERIENCE_DROP = 0.5,			— Division experience drop if unit has different batalion

BATALION_CHANGED_EXPERIENCE_DROP = 0.5， — 如果单位有不同的营，师经验会掉落

ARMOR_VS_AVERAGE = 0.4,			 — how to weight in highest armor & pen vs the division average

ARMOR_VS_AVERAGE = 0.4， — 如何在最高装甲和笔中与师平均水平进行加权

PEN_VS_AVERAGE = 0.4,

PEN_VS_AVERAGE = 0.4，



LAND_EQUIPMENT_BASE_COST = 10,					— Cost in XP to upgrade a piece of equipment one level is base + ( total levels * ramp )

LAND_EQUIPMENT_BASE_COST = 10， — 升级一件装备一级的 XP 成本是基础 + （ 总等级 * 斜坡 ）

LAND_EQUIPMENT_RAMP_COST = 5,

LAND_EQUIPMENT_RAMP_COST = 5，

NAVAL_EQUIPMENT_BASE_COST = 25,

NAVAL_EQUIPMENT_BASE_COST = 25，

NAVAL_EQUIPMENT_RAMP_COST = 5,

NAVAL_EQUIPMENT_RAMP_COST = 5，

AIR_EQUIPMENT_BASE_COST = 25,

AIR_EQUIPMENT_BASE_COST = 25，

AIR_EQUIPMENT_RAMP_COST = 5,

AIR_EQUIPMENT_RAMP_COST = 5，



FASTER_ORG_REGAIN_LEVEL = 0.25,

FASTER_ORG_REGAIN_LEVEL = 0.25，

FASTER_ORG_REGAIN_MULT = 1.0,

FASTER_ORG_REGAIN_MULT = 1.0，

SLOWER_ORG_REGAIN_LEVEL = 0.80,

SLOWER_ORG_REGAIN_LEVEL = 0.80，

SLOWER_ORG_REGAIN_MULT = -0.5,

SLOWER_ORG_REGAIN_MULT = -0.5，



DISBAND_MANPOWER_LOSS = 0.0,

DISBAND_MANPOWER_LOSS = 0.0，

MIN_DIVISION_DEPLOYMENT_TRAINING = 0.2,			— Min level of division training

MIN_DIVISION_DEPLOYMENT_TRAINING = 0.2， — 师级训练的最低水平



FRONTLINE_EXPANSION_FACTOR = 0.6,				— When attacking along a frontline, how much should units spread out as they advance. 0.0 means head (more or less) directly to the drawn frontline, with no distractions

FRONTLINE_EXPANSION_FACTOR = 0.6， — 沿着前线进攻时，单位应该在前进时分散多少。0.0 表示头部（或多或少）直接指向绘制的前线，没有干扰

FRONT_MIN_PATH_TO_REDEPLOY = 8,					— If a units path is at least this long to reach its front location, it will strategically redeploy.

FRONT_MIN_PATH_TO_REDEPLOY = 8， — 如果单位的路径至少要这么长才能到达其前线位置，它将战略性地重新部署。

ARMY_INITIATIVE_REINFORCE_FACTOR = 0.25,		— scales initiative for reinforce chance

ARMY_INITIATIVE_REINFORCE_FACTOR = 0.25， — 为加强机会缩放主动性



BASE_CAPTURE_EQUIPMENT_RATIO = 0.0,				— after a successful land combat, ratio of the equipments that are being captured/salvaged from enemy’s lost equipment

BASE_CAPTURE_EQUIPMENT_RATIO = 0.0， — 在一场成功的陆战后，从敌人丢失的装备中缴获/打捞的装备的比率



ACCLIMATIZATION_IN_COMBAT_SPEED_FACTOR = 3,		— Acclimatization speed multiplier while being in combat.

ACCLIMATIZATION_IN_COMBAT_SPEED_FACTOR = 3， — 在战斗中适应速度倍数。

ACCLIMATIZATION_SPEED_GAIN = 0.15,				— A variable used to balance the overall speed of gaining the acclimatization

ACCLIMATIZATION_SPEED_GAIN = 0.15， — 用于平衡获得环境适应的总体速度的变量

ACCLIMATIZATION_LOSS_SPEED_FACTOR = 2.0,		— Loosing one acclimatization while being under affect of the opposite climate should cause it to drop down much faster than gaining.

ACCLIMATIZATION_LOSS_SPEED_FACTOR = 2.0， — 在受到相反气候的影响下失去一个适应能力，应该会导致它下降的速度比增加的速度快得多。



PROMOTE_LEADER_CP_COST = 40.0,					— cost of promoting a leader

PROMOTE_LEADER_CP_COST = 40.0， — 提升领导者的成本



FIELD_MARSHAL_ARMY_BONUS_RATIO = 0.5, — ratio to apply regular bonuses FM bonuses to armies

FIELD_MARSHAL_ARMY_BONUS_RATIO = 0.5， — 将常规奖金 FM 奖金应用于军队的比率



FIELD_MARSHAL_XP_RATIO = 0.3,					— xp gain ratio for army group leaders

FIELD_MARSHAL_XP_RATIO = 0.3， — 集团军组长的经验获得率



GARRISON_ORDER_ARMY_CAP_FACTOR = 3.0,			— armies gets increased cap when they are garrisoned

GARRISON_ORDER_ARMY_CAP_FACTOR = 3.0， — 军队在驻军时获得更高的上限



COMMANDER_LEVEL_UP_STAT_COUNT = 3, 				— num stats gained on level up

COMMANDER_LEVEL_UP_STAT_COUNT = 3， — 升级时获得的属性数量

COMMANDER_LEVEL_UP_STAT_WEIGHTS = {5, 5, 5, 5}, — level up stat random base weights attack, defense, planning, logistics

COMMANDER_LEVEL_UP_STAT_WEIGHTS = {5， 5， 5， 5}， — 升级统计随机基础权重攻击、防御、规划、后勤



NAVY_LEADER_LEVEL_UP_STAT_WEIGHTS = {5, 5, 5, 5}, — level up stat random base weights attack, defense, maneuvering, coordination

NAVY_LEADER_LEVEL_UP_STAT_WEIGHTS = {5， 5， 5， 5}， — 升级属性 随机基础权重 攻击， 防御， 机动， 协调



UNIT_LEADER_INITIAL_TRAIT_SLOT = { 				— trait slot for 0 level leader

UNIT_LEADER_INITIAL_TRAIT_SLOT = { — 0 级领导者的特征槽

1.0, — field marshal

1.0， — 场上元帅

0.0, — corps commander

0.0， — 军团指挥官

1.0, — navy general

1.0， — 海军将军





0.0, — operative


0.0， —作


},



UNIT_LEADER_TRAIT_SLOT_PER_LEVEL = { 			— num extra traits on each level

UNIT_LEADER_TRAIT_SLOT_PER_LEVEL = { — 每个级别的额外特征数量

0.5, — field marshal

0.5， — 场上元帅

0.5, — corps commander

0.5， — 军团指挥官

0.5, — navy general

0.5， — 海军将军





0.0, — operative


0.0， —作


},



UNIT_LEADER_USE_NONLINEAR_XP_GAIN = true, — Whether unit leader XP gain is scaled by 1/<nr_of_traits>

UNIT_LEADER_USE_NONLINEAR_XP_GAIN = true， — 单位首领 XP 增益是否按 1/ <nr_of_traits>缩放



HOURS_REQ_REJOIN_BORDER_WAR_FOR_INJURED_UNITS = 336, — minimum hours required for units to rejoin border wars

HOURS_REQ_REJOIN_BORDER_WAR_FOR_INJURED_UNITS = 336， — 单位重新加入边境战争所需的最低小时数



NEW_COMMANDER_RANDOM_PERSONALITY_TRAIT_CHANCES = { — chances to gain a personality trait for new generals

NEW_COMMANDER_RANDOM_PERSONALITY_TRAIT_CHANCES = { — 新将军获得性格特征的几率

0.5, — 50% for first trait

0.5， — 第一个特征为 50%

0.15 — 15% for second trait after that

0.15 — 15% 之后的第二个特性

},



NEW_COMMANDER_RANDOM_BASIC_TRAIT_CHANCES = { — chances to gain a basic trait for new generals

NEW_COMMANDER_RANDOM_BASIC_TRAIT_CHANCES = { — 获得新将军基本特性的几率

},



NEW_COMMANDER_RANDOM_STATUS_TRAIT_CHANCES = { — chances to gain a status trait for new generals

NEW_COMMANDER_RANDOM_STATUS_TRAIT_CHANCES = { — 新将军获得状态特性的几率

},



NEW_OPERATIVE_RANDOM_PERSONALITY_TRAIT_CHANCES = { — chances to gain a personality trait for new operatives

NEW_OPERATIVE_RANDOM_PERSONALITY_TRAIT_CHANCES = { — 新特工获得性格特征的几率

0.5, — 50% for first trait

0.5， — 第一个特征为 50%

0.1 — 10% for second trait after that

0.1 — 10% 之后的第二个特征

},



NEW_OPERATIVE_RANDOM_BASIC_TRAIT_CHANCES = { — chances to gain a basic trait for new operatives

NEW_OPERATIVE_RANDOM_BASIC_TRAIT_CHANCES = { — 获得新特工基本特性的几率

0.25, — 25% for first trait

0.25， — 第一个特征为 25%

0.05 — 5% for second trait after that

0.05 — 之后的第二个特征为 5%

},



NEW_OPERATIVE_RANDOM_STATUS_TRAIT_CHANCES = { — chances to gain a status trait for new operatives

NEW_OPERATIVE_RANDOM_STATUS_TRAIT_CHANCES = { — 新特工获得状态特征的几率

},



NEW_COMMANDER_RANDOM_SKILL_CHANCES = { — chances to give a random stat skill for new operatives

NEW_COMMANDER_RANDOM_SKILL_CHANCES = { — 几率为新特工提供随机属性技能

},



NEW_NAVY_LEADER_RANDOM_SKILL_CHANCES = { — chances to give a random stat skill point for a new admiral

NEW_NAVY_LEADER_RANDOM_SKILL_CHANCES = { — 为新海军上将提供随机属性技能点的几率

},



UNIT_LEADER_MODIFIER_COOLDOWN_ON_GROUP_CHANGE = 15,		— time in days for a unit leader to regain its modifiers

UNIT_LEADER_MODIFIER_COOLDOWN_ON_GROUP_CHANGE = 15， — 单位首领重新获得其修正的时间（以天为单位）

UNIT_LEADER_ASSIGN_TRAIT_COST = 15.0,					— cost to assign a new trait to a unit leader

UNIT_LEADER_ASSIGN_TRAIT_COST = 15.0， — 为单位首领分配新特征的成本

ATTACHED_WINGS_ORDER_UPDATE_DAYS = 5,					— Days untill the attached wing will update the order

ATTACHED_WINGS_ORDER_UPDATE_DAYS = 5， — 距离附加的机翼更新订单的天数



BORDER_WAR_WIN_DAYS_AGAINST_EMPTY_OPPONENTS = 14,		— border wars will be automatically won if no opponent shows up for this duration

BORDER_WAR_WIN_DAYS_AGAINST_EMPTY_OPPONENTS = 14， — 如果在这段时间内没有对手出现，边境战争将自动获胜



MAX_RELATIVE_COMBAT_DAMAGE_TO_MODIFY_XP = 4.0,			— you gain more XP if you are doing more damage relative to enemy, this is the max relative amount to gain following RATe

MAX_RELATIVE_COMBAT_DAMAGE_TO_MODIFY_XP = 4.0， — 如果你相对于敌人造成更多的伤害，你会获得更多的 XP，这是 RATe 之后获得的最大相对数量

XP_GAIN_FACTOR_FOR_MAX_RELATIVE_COMBAT_DAMAGE = 4.0,	— XP factor scaling for max relative combat damage

XP_GAIN_FACTOR_FOR_MAX_RELATIVE_COMBAT_DAMAGE = 4.0， — 最大相对战斗伤害的 XP 因子缩放



XP_DECAY_RATE_PER_HOUR_IN_COMBAT = 0.03,				— you get reduced XP as combat drags

XP_DECAY_RATE_PER_HOUR_IN_COMBAT = 0.03，— 随着战斗的拖拽，你的 XP 会减少

MIN_XP_RATE_TO_DECAY = 0.1,								— minimum XP factor for dragged combats

MIN_XP_RATE_TO_DECAY = 0.1， — 拖拽战斗的最小 XP 系数



XP_GAIN_PER_OVERRUN_UNIT = 35.0,						— fixed XP gain per overrun unit

XP_GAIN_PER_OVERRUN_UNIT = 35.0 — 每个超限单位的固定 XP 增益

XP_GAIN_FOR_SHATTERING = 35.0, — fixed XP gain per shattered unit

XP_GAIN_FOR_SHATTERING = 35.0， — 固定每个破碎单位获得的经验值



UNIT_UPKEEP_ATTRITION = 0.00,							—Constant attrition value applied to armies.

UNIT_UPKEEP_ATTRITION = 0.00，- 应用于军队的恒定损耗值。



FUEL_PENALTY_START_RATIO = 0.25,				— ratio of fuel in an army to start getting penalties

FUEL_PENALTY_START_RATIO = 0.25， — 军队中开始受到惩罚的燃料比率



SURPLUS_SUPPLY_RATIO_FOR_ZERO_FUEL_FLOW = 0.5,		— if a supply chunk has more supply needed than this ratio + 1 compared to its max supply flow, the units inside the chiunk will get no fuel

SURPLUS_SUPPLY_RATIO_FOR_ZERO_FUEL_FLOW = 0.5， — 如果一个补给块需要的补给量超过其最大补给流量的比率 + 1，则 Chiunk 内的单位将不会获得燃料



ARMY_MAX_FUEL_FLOW_MULT = 2.0,					— max fuel ratio that an army can get per hour, multiplied by supply situation

ARMY_MAX_FUEL_FLOW_MULT = 2.0， — 军队每小时可以获得的最大燃料比率乘以补给情况



ARMY_FUEL_COST_MULT = 0.5,						— fuel cost multiplier for all army related stuff

ARMY_FUEL_COST_MULT = 0.5， — 所有军队相关内容的燃料消耗乘数

ARMY_COMBAT_FUEL_MULT = 1.0,					— fuel consumption ratio in combat (plus ARMY_MOVEMENT_FUEL_MULT if you are also moving. ie offensive combat)

ARMY_COMBAT_FUEL_MULT = 1.0， — 战斗中的燃料消耗率（如果您也在移动，则加上 ARMY_MOVEMENT_FUEL_MULT。即进攻性战斗）

ARMY_TRAINING_FUEL_MULT = 1.0,					— fuel consumption ratio while training

ARMY_TRAINING_FUEL_MULT = 1.0， — 训练时的油耗比

ARMY_MOVEMENT_FUEL_MULT = 1.0,					— fuel consumption ratio while moving

ARMY_MOVEMENT_FUEL_MULT = 1.0， — 移动时的油耗比

ARMY_NAVAL_TRANSFER_FUEL_MULT = 0.0,			— fuel consumption ratio while naval transferring

ARMY_NAVAL_TRANSFER_FUEL_MULT = 0.0， — 海军转移时的油耗比

ARMY_STRATEGIC_DEPLOYMENT_FUEL_MULT = 0.0,		— fuel consumption ratio while doing strategic deployment

ARMY_STRATEGIC_DEPLOYMENT_FUEL_MULT = 0.0， — 进行战略部署时的燃料消耗率

ARMY_IDLE_FUEL_MULT = 0.0,						— fuel consumption ratio while just existing

ARMY_IDLE_FUEL_MULT = 0.0， — 仅存在时的油耗比

FUEL_EFFICIENCY_RAID_MULTIPLIER = 1.0,			— convoy raid multiplier for fuel sunk

FUEL_EFFICIENCY_RAID_MULTIPLIER = 1.0， — 燃料沉没的护航突袭乘数



FUEL_FLOW_PENALTY_FOR_SUPPLY_CHUNK_EDGE_RATIO = 0.5, — supply flow that is limited by control of incoming edge provinces will have lesser effect on fuel flow

FUEL_FLOW_PENALTY_FOR_SUPPLY_CHUNK_EDGE_RATIO = 0.5， — 受进入边缘省份控制限制的补给流对燃料流的影响较小



OUT_OF_FUEL_EQUIPMENT_MULT = 0.1,				— ratio of the stats that you get from equipments that uses fuel and you lack it

OUT_OF_FUEL_EQUIPMENT_MULT = 0.1， — 你从使用燃料和缺乏燃料的设备中获得的属性的比率

OUT_OF_FUEL_SPEED_MULT = 0.4,					— speed mult that armies get when out of fuel

OUT_OF_FUEL_SPEED_MULT = 0.4， — 军队在燃料耗尽时获得的速度倍数

OUT_OF_FUEL_TRAINING_XP_GAIN_MULT = 0.0,		— xp gain mult from training when a unit is out of fuel

OUT_OF_FUEL_TRAINING_XP_GAIN_MULT = 0.0， — 当单位燃料耗尽时，从训练中获得的经验值倍数

FUEL_CAPACITY_DEFAULT_HOURS = 96,				— default capacity if not specified

FUEL_CAPACITY_DEFAULT_HOURS = 96， — 如果未指定，则为默认容量



MAX_ESTIMATED_PLAN_UNITS_NOT_IN_PLACE_FACTOR = -0.6, 	—Scaled by % of units not in place. Used to be a flat -50%

MAX_ESTIMATED_PLAN_UNITS_NOT_IN_PLACE_FACTOR = -0.6， - 按未就位单位的百分比进行缩放。以前是固定的 -50%

DAMAGE_SPLIT_ON_FIRST_TARGET = 0.35,			—% of damage dealt to the first target in a combat. The rest will be split amongst subsequent targets. Modifiers can affect this up to a maximum of 0.9. That value must not be exposed as a define.

DAMAGE_SPLIT_ON_FIRST_TARGET = 0.35，—战斗中对第一个目标造成的伤害的百分比。其余部分将在后续目标之间分配。修饰语对此的影响最大为 0.9。该值不得作为 define 公开。



NEW_ARMY_LEADER_LEVEL_CHANCES = {				— chances for new army leaders to start at a given level

NEW_ARMY_LEADER_LEVEL_CHANCES = { — 新军队领导人从给定级别开始的几率

0.95, — 95% for level one

0.95， — 1 级为 95%

0.05 — 5% for level two

0.05 — 2 级为 5%

— 0% for level three to ten

— 3 至 10 级为 0%

}

},



NAir = {

NAir = {

AIR_WING_FLIGHT_SPEED_MULT = 0.02,					— Global speed multiplier for airplanes (affects fe.transferring to another base)

AIR_WING_FLIGHT_SPEED_MULT = 0.02， — 飞机的全局速度乘数 （影响 fe.transfer to another base）

AIR_WING_MAX_STATS_ATTACK = 100,					— Max stats

AIR_WING_MAX_STATS_ATTACK = 100， — 最大统计数据

AIR_WING_MAX_STATS_DEFENCE = 100,

AIR_WING_MAX_STATS_DEFENCE = 100，

AIR_WING_MAX_STATS_AGILITY = 100,

AIR_WING_MAX_STATS_AGILITY = 100，

AIR_WING_MAX_STATS_SPEED = 800,

AIR_WING_MAX_STATS_SPEED = 800，

AIR_WING_MAX_STATS_BOMBING = 100,

AIR_WING_MAX_STATS_BOMBING = 100，

AIR_WING_MAX_SIZE = 1000, 							— Max amount of airplanes in wing

AIR_WING_MAX_SIZE = 1000， — 机翼中的最大飞机数量

AIR_WING_AVERAGE_SIZE = 100, 						— Eyeballed average amount of airplanes in wing. Used when calculating air volunteer.

AIR_WING_AVERAGE_SIZE = 100， — 目测机翼中飞机的平均数量。在计算空中志愿者时使用。

AIR_WING_BOMB_DAMAGE_FACTOR = 2,					— Used to balance the damage done while bombing.

AIR_WING_BOMB_DAMAGE_FACTOR = 2， — 用于平衡轰炸时造成的伤害。

BIGGEST_AGILITY_FACTOR_DIFF = 4.0,					— biggest factor difference in agility for doing damage (caps to this)

BIGGEST_AGILITY_FACTOR_DIFF = 4.0， — 造成伤害的敏捷性的最大因素差异（上限）

BIGGEST_SPEED_FACTOR_DIFF = 3.5,					— biggest factor difference in speed for doing damage (caps to this)

BIGGEST_SPEED_FACTOR_DIFF = 3.5， — 造成伤害的速度的最大因素差异（上限）

TOP_SPEED_DAMAGE_BONUS_FACTOR = 0.025,				— A factor for scaling the top speed of a plane into damage buff. If an attacking wing has a speed advantage of any form their speed value will be converted into a percentage bonus with this modifier

TOP_SPEED_DAMAGE_BONUS_FACTOR = 0.025， — 将飞机的最高速度缩放为伤害增益的系数。如果攻击翼具有任何形式的速度优势，他们的速度值将使用此修正转换为百分比加成

COMBAT_DAMAGE_STATS_MULTILPIER = 0.2,

COMBAT_DAMAGE_STATS_MULTILPIER = 0.2，

COMBAT_BETTER_AGILITY_DAMAGE_REDUCTION = 0.45, 		— How much the better agility (than opponent’s) can reduce their damage to us.

COMBAT_BETTER_AGILITY_DAMAGE_REDUCTION = 0.45， — （比对手的）更好的敏捷能减少他们对我们的伤害多少。

COMBAT_BETTER_SPEED_DAMAGE_INCREASE = 0.65, 		— How much the better Speed (than opponent’s) can reduce increase our damage to them.

COMBAT_BETTER_SPEED_DAMAGE_INCREASE = 0.65， — 速度（比对手的）能降低多少，会增加我们对他们的伤害。

— Both of these defines are combined with their sister FACTOR_DIFF defines to create defense or offensive buffs

— 这两个定义都与它们的姊妹 FACTOR_DIFF 定义相结合，以创建防御或进攻增益

— In both cases the maximum bonus or reduction is (BIGGEST_X_FACTOR_DIFF - 1) * COMBAT_BETTER_X_DAMAGE_Y * Damage

— 在这两种情况下，最大加成或减免为 （BIGGEST_X_FACTOR_DIFF - 1） * COMBAT_BETTER_X_DAMAGE_Y * 伤害

COMBAT_MAX_WINGS_AT_ONCE = 10000, 						— Max amount of air wings in one combat simulation. The higher value, the quicker countries may loose their wings. It’s a gameplay balance value.

COMBAT_MAX_WINGS_AT_ONCE = 10000， — 一次战斗模拟中的最大空翼数量。价值越高，国家可能越快松开翅膀。这是一个游戏平衡值。

COMBAT_MAX_WINGS_AT_GROUND_ATTACK = 10000,	 	— we can really pounce a land strike and escalate

COMBAT_MAX_WINGS_AT_GROUND_ATTACK = 10000， — 我们真的可以突袭陆地打击并升级

COMBAT_MAX_WINGS_AT_ONCE_PORT_STRIKE = 10000, — we can really pounce a naval strike and escalate

COMBAT_MAX_WINGS_AT_ONCE_PORT_STRIKE = 10000，— 我们真的可以突袭海军打击并升级

AIR_REGION_SUPERIORITY_PIXEL_SCALE = 0.04, — air superiority scale = superiority/(pixels*this)

AIR_REGION_SUPERIORITY_PIXEL_SCALE = 0.04， — 空中优越性刻度 = 优越性/（像素*这个）

COMBAT_MULTIPLANE_CAP = 3.0,						— How many planes can shoot at each plane on other side ( if there are 100 planes we are atttacking COMBAT_MULTIPLANE_CAP * 100 of our planes can shoot )

COMBAT_MULTIPLANE_CAP = 3.0， — 可以向另一侧的每架飞机射击多少架飞机（如果有 100 架飞机，我们正在瞄准 COMBAT_MULTIPLANE_CAP * 100 架飞机可以射击）

COMBAT_DAMAGE_SCALE = 1,							— Higher value = more shot down planes

COMBAT_DAMAGE_SCALE = 1， — 值越高 = 被击落的飞机越多

COMBAT_DAMAGE_SCALE_CARRIER = 5,					— same as above but used inside naval combat for carrier battles

COMBAT_DAMAGE_SCALE_CARRIER = 5， — 同上，但在海战中用于航母战

DETECT_CHANCE_FROM_OCCUPATION = 0.10, 				— How much the controlled provinces in area affects the air detection base value.

DETECT_CHANCE_FROM_OCCUPATION = 0.10， — 区域中的受控省份对空气检测基础值的影响程度。

DETECT_CHANCE_FROM_RADARS = 0.5, 					— How much the radars in area affects detection chance.

DETECT_CHANCE_FROM_RADARS = 0.5， — 区域中的雷达对检测几率的影响程度。

DETECT_CHANCE_FROM_AIRCRAFTS_EFFECTIVE_COUNT = 3000, — Max amount of aircrafts in region to give full detection bonus.

DETECT_CHANCE_FROM_AIRCRAFTS_EFFECTIVE_COUNT = 3000， — 区域中提供完全检测加成的最大飞机数量。

DETECT_CHANCE_FROM_AIRCRAFTS = 0.8,					— How much aircrafts in region improves air detection (up to effective count).

DETECT_CHANCE_FROM_AIRCRAFTS = 0.8， — 区域中有多少飞机可以提高空气检测（直到有效计数）。

DETECT_CHANCE_FROM_NIGHT = -0.2,					— How much the night can reduce the air detection. (see static modifiers to check how weather affects it too.)

DETECT_CHANCE_FROM_NIGHT = -0.2， — 夜晚可以减少多少空气检测。（请参阅 Static Modifiers 来检查天气如何影响它。

DETECT_EFFICIENCY_BASE = 0.1,						— Base value for detection efficiency (once something detected, efficiency says how many airplanes was detected).

DETECT_EFFICIENCY_BASE = 0.1， — 检测效率的基值（一旦检测到某物，效率表示检测到多少架飞机）。

DETECT_EFFICIENCY_FROM_RADAR = 0.7,					— How much radars affect the efficiency.

DETECT_EFFICIENCY_FROM_RADAR = 0.7， — 雷达对效率的影响程度。

DETECT_EFFICIENCY_RANDOM_FACTOR = 0.1,				— How much randomness is in amount of detected aircrafts.

DETECT_EFFICIENCY_RANDOM_FACTOR = 0.1， — 检测到的飞机数量的随机性。

DAY_NIGHT_COVERAGE_FACTOR = 0.5,					— The max night coverage in a region that is still considered to be day-time when determining if day/night air missions shall run.

DAY_NIGHT_COVERAGE_FACTOR = 0.5， — 在确定是否应运行昼/夜空中任务时，仍被视为白天的区域的最大夜间覆盖范围。

HOURS_DELAY_AFTER_EACH_COMBAT = 4,					— How many hours needs the wing to be ready for the next combat. Use for tweaking if combats happens too often. (generally used as double because of roundtrip)

HOURS_DELAY_AFTER_EACH_COMBAT = 4， — 机翼需要多少小时才能为下一次战斗做好准备。用于在战斗发生过于频繁时进行调整。（由于往返，一般用作双倍）

PORT_STRIKES_DELAY_MULTIPLIER = 2,					— multplies HOURS_DELAY_AFTER_EACH_COMBAT if port strikes

PORT_STRIKES_DELAY_MULTIPLIER = 2， — 如果端口触发，则HOURS_DELAY_AFTER_EACH_COMBAT多个

CARRIER_HOURS_DELAY_AFTER_EACH_COMBAT = 3, — how often carrier planes do battle inside naval combat

CARRIER_HOURS_DELAY_AFTER_EACH_COMBAT = 3， — 舰载机在海战中作战的频率

CARRIER_SIZE_STAT_INCREMENT = 10,					— Each Point of carrier_size state adds capacity for this many planes

CARRIER_SIZE_STAT_INCREMENT = 10 — carrier_size 状态的每个点都会增加这么多飞机的容量

MISSILE_LAUNCHER_CAPACITY = 10, — The number of missiles per slot

MISSILE_LAUNCHER_CAPACITY = 10， — 每个槽位的导弹数量

MISSILE_LAUNCHER_SLOTS = 1, — The number of missile slots a missile launcher unit can have

MISSILE_LAUNCHER_SLOTS = 1， — 导弹发射器单位可以拥有的导弹槽位数量

NAVAL_STRIKE_TARGETTING_TO_AMOUNT = 0.3,			— Balancing value to convert the naval_strike_targetting equipment stats to chances of how many airplanes managed to do successfull strike.

NAVAL_STRIKE_TARGETTING_TO_AMOUNT = 0.3， — 将naval_strike_targetting设备统计数据转换为成功打击的飞机数量几率的平衡值。

NAVAL_STRIKE_DAMAGE_TO_STR = 1.0,					— Balancing value to convert damage ( naval_strike_attack * hits ) to Strength reduction.

NAVAL_STRIKE_DAMAGE_TO_STR = 1.0， — 将伤害 （ naval_strike_attack * 命中数 ） 转换为力量降低的平衡值。

NAVAL_STRIKE_DAMAGE_TO_ORG = 1.5,					— Balancing value to convert damage ( naval_strike_attack * hits ) to Organisation reduction.

NAVAL_STRIKE_DAMAGE_TO_ORG = 1.5， — 将伤害 （ naval_strike_attack * 命中 ） 转换为组织减少的平衡值。

NAVAL_STRIKE_CARRIER_MULTIPLIER = 10.0, — damage bonus when planes are in naval combat where their carrier is present (and can thus sortie faster and more effectively)

NAVAL_STRIKE_CARRIER_MULTIPLIER = 10.0， — 当飞机在航母在场的海战中时，伤害加成（因此可以更快、更有效地出击）

FIELD_EXPERIENCE_SCALE = 0.0004,

FIELD_EXPERIENCE_SCALE = 0.0004，

FIELD_EXPERIENCE_MAX_PER_DAY = 2,					— Most xp you can gain per day

FIELD_EXPERIENCE_MAX_PER_DAY = 2， — 您每天可以获得的最高经验值

CLOSE_AIR_SUPPORT_EXPERIENCE_SCALE = 0.0005,		— How much the experinence gained by CAS is scaled

CLOSE_AIR_SUPPORT_EXPERIENCE_SCALE = 0.0005， — CAS 获得的经验被缩放的程度

PARADROP_EXPERIENCE_SCALE = 0.03,					— How much the experinence gained by paradropping is scaled

PARADROP_EXPERIENCE_SCALE = 0.03， — 通过降落获得的经验被缩放的程度

BOMBING_DAMAGE_EXPERIENCE_SCALE = 0.0002, — How much the experinence gained by bombing is scaled

BOMBING_DAMAGE_EXPERIENCE_SCALE = 0.0002， — 轰炸获得的经验被缩放的程度



EXPERIENCE_SCALE_ATTACK_LOGISTICS_NO_TRUCK_CONSUMERS = 0.0001, — How much country experinence gained by attacking consumers who aren’t motorized

EXPERIENCE_SCALE_ATTACK_LOGISTICS_NO_TRUCK_CONSUMERS = 0.0001， — 通过攻击未使用机动车的消费者获得了多少国家经验

EXPERIENCE_SCALE_ATTACK_LOGISTICS_NODE_AND_TRAINS = 0.0002, — How much country experinence gained by attacking node/trains

EXPERIENCE_SCALE_ATTACK_LOGISTICS_NODE_AND_TRAINS = 0.0002， — 通过攻击节点/火车获得多少国家经验

EXPERIENCE_SCALE_ATTACK_LOGISTICS_TRUCKS = 0.0002, — How much country experinence gained by attacking trucks

EXPERIENCE_SCALE_ATTACK_LOGISTICS_TRUCKS = 0.0002， — 通过攻击卡车获得多少国家经验



FIELD_EXPERIENCE_FACTOR = 0.7,						— Factor all air experience gain from missions by this

FIELD_EXPERIENCE_FACTOR = 0.7， — 按此计算所有从任务中获得的空中经验



AI_ALLOWED_PLANES_KEPT_IN_RESERVE = 0.10,			—AI allowed planes is reduced by this percentage. Overflow will be distributed to the next valid order. Worst case, this will result in this % of planes no being assigned any order.

AI_ALLOWED_PLANES_KEPT_IN_RESERVE = 0.10，- AI 允许的平面将减少此百分比。溢出将分配给下一个有效订单。最坏的情况是，这将导致此百分比的飞机没有被分配任何订单。



ACCIDENT_CHANCE_BASE = 0.1,							— Base chance % (0 - 100) for accident to happen. Reduced with higher reliability stat.

ACCIDENT_CHANCE_BASE = 0.1， — 事故发生的基本几率 % （0 - 100）。随着可靠性属性的提高而减少。

ACCIDENT_CHANCE_CARRIER_MULT = 1.5,					— The total accident chance is scaled up when it happens on the carrier ship.

ACCIDENT_CHANCE_CARRIER_MULT = 1.5， — 当事故发生在运输船上时，总事故几率会按比例增加。

ACCIDENT_CHANCE_BALANCE_MULT = 0.10,				— Multiplier for balancing how often the air accident really happens. The higher mult, the more often.

ACCIDENT_CHANCE_BALANCE_MULT = 0.10， — 平衡航空事故实际发生频率的乘数。mult 越高，频率越高。

ACCIDENT_CHANCE_RELIABILITY_MULT = 2.0,				— Multiplier to accident chance per point of missing reliability.

ACCIDENT_CHANCE_RELIABILITY_MULT = 2.0， — 每缺少可靠性点的事故几率乘数。

ACCIDENT_EFFECT_MULT = 0.007,						— Multiplier for balancing the effect of accidents

ACCIDENT_EFFECT_MULT = 0.007， — 平衡事故影响的乘数

ACE_DEATH_CHANCE_BASE = 0.005,						— Base chance % for ace pilot die when an airplane is shot down in the Ace wing.

ACE_DEATH_CHANCE_BASE = 0.005， — 当飞机在 Ace 机翼中被击落时，王牌飞行员死亡的基本几率 %。

ACE_DEATH_BY_OTHER_ACE_CHANCE = 1.0,				— chance to an ace dying by another ace if it was hit by ace in combat

ACE_DEATH_BY_OTHER_ACE_CHANCE = 1.0， — 如果在战斗中被 A 击中，则 A 被另一张 A 击中，则有几率

ACE_DEATH_CHANCE_PLANES_MULT = 0.001,				— The more airplanes was lost in a single airplanes (more bloody it was) the higher chance of Ace to die.

ACE_DEATH_CHANCE_PLANES_MULT = 0.001， — 单架飞机损失的飞机越多（越血腥），Ace 死亡的几率就越高。

AIR_AGILITY_TO_NAVAL_STRIKE_AGILITY = 0.02, 		— conversion factor to bring agility in line with ship AA

AIR_AGILITY_TO_NAVAL_STRIKE_AGILITY = 0.02， — 使敏捷性与船舶 AA 保持一致的转换系数

ACE_EARN_CHANCE_BASE = 0.01,						— Base chance % for ace pilot creation roll to happen. Happens only when successfully kill airplane/ship or damage the buildings.

ACE_EARN_CHANCE_BASE = 0.01， — 王牌飞行员创建掷骰的基本几率 %。仅在成功杀死飞机/飞船或损坏建筑物时发生。

ACE_EARN_CHANCE_PLANES_MULT = 0.005,				— Ace generation chance per aircraft. Chance is rolled twice because decimal numbers can’t be small enough

ACE_EARN_CHANCE_PLANES_MULT = 0.005， — 每架飞机的 Ace 生成几率。机会被掷出两次，因为十进制数字不能足够小

AIR_DAMAGE_TO_DIVISION_LOSSES = 1.0,				— factor for conversion air damage to division losses for details statistics of air wings

AIR_DAMAGE_TO_DIVISION_LOSSES = 1.0， — 空中损失与师损失的转换系数 有关空军联队的详细统计数据

AIR_NAVAL_KAMIKAZE_DAMAGE_MULT = 20.0,				— Balancing value to increase usual damage to Strength for Kamikaze

AIR_NAVAL_KAMIKAZE_DAMAGE_MULT = 20.0， — 增加神风特攻队力量常规伤害的平衡值

AIR_NAVAL_KAMIKAZE_LOSSES_MULT = 4.0, 			— Balancing value to increase usual losses if Kamikaze participating in the battle

AIR_NAVAL_KAMIKAZE_LOSSES_MULT = 4.0， — 如果神风特攻队参与战斗，则增加通常损失的平衡值

BASE_KAMIKAZE_DAMAGE = 2.0, 				— Base Kamikaze death rate

BASE_KAMIKAZE_DAMAGE = 2.0， — 基础神风特攻队死亡率

BASE_KAMIKAZE_TARGETING = 2.0,			 		— Kamikaze can’t be a bad target

BASE_KAMIKAZE_TARGETING = 2.0， — 神风特攻队不会是一个坏目标

BASE_STRATEGIC_BOMBING_HIT_SHIP_CHANCE = 0.01,		— Chance to hit a ship in port when it is bombed.

BASE_STRATEGIC_BOMBING_HIT_SHIP_CHANCE = 0.01， — 当船只被轰炸时，有几率击中港口的船只。

BASE_STRATEGIC_BOMBING_HIT_SHIP_DAMAGE_FACTOR = 50,

BASE_STRATEGIC_BOMBING_HIT_SHIP_DAMAGE_FACTOR = 50，

BASE_STRATEGIC_BOMBING_HIT_PLANE_CHANCE = 0.5,		— Chance to hit a plane in airbase when it is bombed.

BASE_STRATEGIC_BOMBING_HIT_PLANE_CHANCE = 0.5， — 当飞机被轰炸时，有几率击中空军基地的飞机。

BASE_STRATEGIC_BOMBING_HIT_PLANE_DAMAGE_FACTOR = 0.2,

BASE_STRATEGIC_BOMBING_HIT_PLANE_DAMAGE_FACTOR = 0.2，

AGGRESSION_THRESHOLD = { 0.0, 0.25, 0.5 },			— Threshold levels for mission aggressivity for air

AGGRESSION_THRESHOLD = { 0.0， 0.25， 0.5 }， — 空中任务攻击性的阈值水平



ACE_WING_SIZE =	100,								— size of wing ace bonuses are set up for. if lower more bonus, if higher less bonus

ACE_WING_SIZE = 100， — 设置的 Wing Ace 奖金的大小。如果较低则增加奖金，如果较高则减少奖金

ACE_WING_SIZE_MAX_BONUS = 2, 	 — biggest bonus we can get from having a small wing with an ace on

ACE_WING_SIZE_MAX_BONUS = 2， — 我们可以从拥有一个带有 A 的小翼中获得的最大好处

NO_SEARCH_MISSION_DETECT_FACTOR = -0.5,				— value of planes not on active search missions for detection

NO_SEARCH_MISSION_DETECT_FACTOR = -0.5， — 未执行主动搜索任务的飞机值

SUPPLY_NEED_FACTOR = 0.28, 							— multiplies supply usage

SUPPLY_NEED_FACTOR = 0.28， — 电源使用量乘以

SUPPLY_PRIO_FACTOR = 100.0,							— Effect of supply need per unit for target province picking for air supply

SUPPLY_PRIO_FACTOR = 100.0， — 目标省份领料空气补给时每单位的补给需求的影响

CAPACITY_PENALTY = 2,								— scales penalty of having overcrowded bases.

CAPACITY_PENALTY = 2， — 基地过度拥挤的比例惩罚。

AIR_COMBAT_FINAL_DAMAGE_SCALE = 0.015, — % how many max disrupted only planes are alloed to die in a single combat

AIR_COMBAT_FINAL_DAMAGE_SCALE = 0.015， — % 在一场战斗中，只有一架飞机被破坏后才会死亡的最大数量

AIR_COMBAT_FINAL_DAMAGE_PLANES = 50, — scaling/control for when only very few planes exist to stop roundoff issues

AIR_COMBAT_FINAL_DAMAGE_PLANES = 50， — 当只有极少数平面存在时进行缩放/控制以阻止舍入问题

AIR_COMBAT_FINAL_DAMAGE_PLANES_FACTOR = 0.1,

AIR_COMBAT_FINAL_DAMAGE_PLANES_FACTOR = 0.1，

AA_INDUSTRY_AIR_DAMAGE_FACTOR = -0.12,				— 5x levels = 60% defense from bombing

AA_INDUSTRY_AIR_DAMAGE_FACTOR = -0.12， — 5 倍等级 = 60% 轰炸防御

NAVAL_STRIKE_DETECTION_BALANCE_FACTOR = 0.5,		— Value used to scale the surface_visibility stats to balance the gameplay, so 100% detection chance still won’t spam the strikes.

NAVAL_STRIKE_DETECTION_BALANCE_FACTOR = 0.5， — 用于调整surface_visibility属性以平衡游戏玩法的值，因此 100% 的检测几率仍然不会发送垃圾邮件。

NAVAL_RECON_DETECTION_BALANCE_FACTOR = 0.5,			— Value used to scale the surface_visibility stats to balance the gameplay, so 100% detection chance still won’t spam spotting.

NAVAL_RECON_DETECTION_BALANCE_FACTOR = 0.5， — 用于缩放surface_visibility统计数据以平衡游戏玩法的值，因此 100% 的检测几率仍然不会垃圾邮件侦查。

LEND_LEASED_EQUIPMENT_EXPERIENCE_GAIN = 0.5,		— Value used for equipment

LEND_LEASED_EQUIPMENT_EXPERIENCE_GAIN = 0.5， — 用于设备的值

ANTI_AIR_PLANE_DAMAGE_FACTOR = 0.8,					— Anti Air Gun Damage factor

ANTI_AIR_PLANE_DAMAGE_FACTOR = 0.8， — 反气枪伤害系数

ANTI_AIR_PLANE_DAMAGE_CHANCE = 0.1,					— Anti Air Gun hit chance

ANTI_AIR_PLANE_DAMAGE_CHANCE = 0.1， — 反气枪的命中率

ANTI_AIR_ATTACK_TO_DAMAGE_REDUCTION_FACTOR = 1.0,	— Balancing value to convert equipment stat anti_air_attack to the damage reduction modifier apply to incoming air attacks against units with AA.

ANTI_AIR_ATTACK_TO_DAMAGE_REDUCTION_FACTOR = 1.0， — 将装备属性anti_air_attack转换为伤害减免修正的平衡值，适用于对具有 AA 的单位的来袭空袭。

ANTI_AIR_MAXIMUM_DAMAGE_REDUCTION_FACTOR = 0.75,	— Maximum damage reduction factor applied to incoming air attacks against units with AA.

ANTI_AIR_MAXIMUM_DAMAGE_REDUCTION_FACTOR = 0.75， — 对具有 AA 的单位的来袭空袭施加的最大伤害减免系数。

AIR_DEPLOYMENT_DAYS = 2,							— Days to deploy one air wing

AIR_DEPLOYMENT_DAYS = 2， — 部署一个空军联队的天数

NAVAL_STRIKE_BASE_STR_TO_PLANES_RATIO = 0.03,		— Max airbombers to do port strike comparing to strength

NAVAL_STRIKE_BASE_STR_TO_PLANES_RATIO = 0.03， — 与兵力相比，进行港口打击的最大轰炸机

NAVAL_COMBAT_EXTERNAL_PLANES_JOIN_RATIO = 0.05,		— Max planes that can join a combat comparing to the total strength of the ships

NAVAL_COMBAT_EXTERNAL_PLANES_JOIN_RATIO = 0.05， — 与战舰总兵力相比，可以加入战斗的最大飞机数

NAVAL_COMBAT_EXTERNAL_PLANES_JOIN_RATIO_PER_DAY = 0.2, — max extra plane % that can join every day

NAVAL_COMBAT_EXTERNAL_PLANES_JOIN_RATIO_PER_DAY = 0.2， — 每天可以加入的最大额外平面百分比

NAVAL_COMBAT_EXTERNAL_PLANES_MIN_CAP = 20,			— Min cap for planes that can join naval combat

NAVAL_COMBAT_EXTERNAL_PLANES_MIN_CAP = 20， — 可以加入海战的飞机的最小上限



AIR_MORE_GROUND_CREWS_COST = 20.0,					— CP cost to maintain more ground crews

AIR_MORE_GROUND_CREWS_COST = 20.0， — 维持更多地勤人员的 CP 成本

AIR_MORE_GROUND_CREWS_BOOST = 0.1,					— Efficienct boost for more ground crews

AIR_MORE_GROUND_CREWS_BOOST = 0.1， — 为更多地勤人员提高效率



EFFICIENCY_REGION_CHANGE_PENALTY_FACTOR = 0.9,				— Penalty applied for changing region

EFFICIENCY_REGION_CHANGE_PENALTY_FACTOR = 0.9， — 更改区域时适用的罚金

— Gain should be changed in increments of 0.024 due to precision.

— 由于精度，增益应以 0.024 的增量更改。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_DEFAULT = 1,	— Default how much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_DEFAULT = 1， — 默认每天要恢复的效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_CAS = 0.888,				— How much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_CAS = 0.888， — 每天恢复多少效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_NAVAL_BOMBER = 0.192,		— How much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_NAVAL_BOMBER = 0.192， — 每天恢复多少效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_TACTICAL_BOMBER = 0.192,	— How much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_TACTICAL_BOMBER = 0.192， — 每天要恢复多少效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_FIGHTER = 0.888,			— How much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_FIGHTER = 0.888， — 每天恢复多少效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_STRATEGIC_BOMBER = 0.072,	— How much efficiency to regain per day. Gain applied hourly.

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_STRATEGIC_BOMBER = 0.072， — 每天恢复多少效率。每小时应用一次增益。

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_MARITIME_PATROL_PLANE = 1,

EFFICIENCY_REGION_CHANGE_DAILY_GAIN_MARITIME_PATROL_PLANE = 1，



AIR_WING_XP_MAX = 1000.0, 											—Per plane XP.

AIR_WING_XP_MAX = 1000.0，—每平面 XP。

AIR_WING_XP_LEVELS = { 100, 300, 700, 900 }, 						—Experience needed to progress to the next level

AIR_WING_XP_LEVELS = { 100， 300， 700， 900 }， —进入下一个级别所需的经验

AIR_WING_XP_LOSS_WHEN_KILLED = 300,									—if a plane dies, the game assumes that a pilot with this amount of xp died and recalcs average.

AIR_WING_XP_LOSS_WHEN_KILLED = 300， —如果一架飞机死亡，则游戏假设具有此 XP 数量的飞行员死亡并重新计算平均值。

AIR_WING_XP_TRAINING_MAX = 300.0, 									—Max average XP achieved with training.

AIR_WING_XP_TRAINING_MAX = 300.0，—通过训练达到的最大平均 XP。



AIR_WING_XP_TRAINING_MISSION_GAIN_DAILY = 7.0, 						—Daily gain when running training exercise mission

AIR_WING_XP_TRAINING_MISSION_GAIN_DAILY = 7.0，—执行训练锻炼任务时的每日增益

AIR_WING_XP_AIR_VS_AIR_COMBAT_GAIN = 0.8, 							—Wings in combat gain extra XP

AIR_WING_XP_AIR_VS_AIR_COMBAT_GAIN = 0.8，—战斗中的翅膀获得额外的 XP

AIR_WING_XP_GROUND_MISSION_COMPLETED_GAIN = 0.28, 					—Bombers bombing, CAS cassing, NBs nbing, kamikazees kamikazeeing, etc.

AIR_WING_XP_GROUND_MISSION_COMPLETED_GAIN = 0.28， —轰炸机轰炸、CAS 外壳、NBs nbing、神风敢死队等。

AIR_WING_XP_RECON_MISSION_COMPLETED_GAIN = 0.05, 					—recon mission

AIR_WING_XP_RECON_MISSION_COMPLETED_GAIN = 0.05， —侦察任务



AIR_WING_COUNTRY_XP_FROM_TRAINING_FACTOR = 0.003, 					—Factor on country Air XP gained from wing training

AIR_WING_COUNTRY_XP_FROM_TRAINING_FACTOR = 0.003，—从机翼训练中获得的国家航空 XP 的系数

AIR_WING_XP_TRAINING_MISSION_ACCIDENT_FACTOR = 0.2, 				—Training exercises cause more accidents

AIR_WING_XP_TRAINING_MISSION_ACCIDENT_FACTOR = 0.2，—训练演习导致的事故更多

AIR_WING_XP_LOSS_REDUCTION_OVER_FRIENDLY_TERRITORY_FACTOR = 0.3, 	—Reduction on XP loss over friendly territory

AIR_WING_XP_LOSS_REDUCTION_OVER_FRIENDLY_TERRITORY_FACTOR = 0.3，—在友方领土上减少 XP 损失



DISRUPTION_FACTOR = 4.0,									— multiplier on disruption damage to scale its effects on planes

DISRUPTION_FACTOR = 4.0， — 干扰伤害的乘数，以调整其对飞机的影响

DISRUPTION_FACTOR_CARRIER = 6.0,							— multiplier on disruption damage to scale its effects on carrier vs carrier planes

DISRUPTION_FACTOR_CARRIER = 6.0， — 干扰伤害的乘数，以调整其对航母和航母飞机的影响

DISRUPTION_SPEED_FACTOR = 1.0,

DISRUPTION_SPEED_FACTOR = 1.0，

DISRUPTION_AGILITY_FACTOR = 0.0,

DISRUPTION_AGILITY_FACTOR = 0.0，

DISRUPTION_ATTACK_FACTOR = 0.0,

DISRUPTION_ATTACK_FACTOR = 0.0，

DISRUPTION_DETECTION_FACTOR = 1.0,

DISRUPTION_DETECTION_FACTOR = 1.0，

ESCORT_FACTOR = 2.0,

ESCORT_FACTOR = 2.0，

ESCORT_SPEED_FACTOR = 1.0,

ESCORT_SPEED_FACTOR = 1.0，

ESCORT_AGILITY_FACTOR = 1.0,

ESCORT_AGILITY_FACTOR = 1.0，

ESCORT_ATTACK_FACTOR = 1.0,

ESCORT_ATTACK_FACTOR = 1.0，

DISRUPTION_DEFENCE_DEFENCE_FACTOR = 0.5,

DISRUPTION_DEFENCE_DEFENCE_FACTOR = 0.5，

DISRUPTION_DEFENCE_SPEED_FACTOR = 1.0,

DISRUPTION_DEFENCE_SPEED_FACTOR = 1.0，

DISRUPTION_DEFENCE_ATTACK_FACTOR = 0.5,

DISRUPTION_DEFENCE_ATTACK_FACTOR = 0.5，



CARRIER_PLANES_AMOUNT_FOR_POSITIONING = 50, — below this amount of planes on a carrier we no longer get max benefit on enemy positioning

CARRIER_PLANES_AMOUNT_FOR_POSITIONING = 50， — 如果航母上的飞机数量低于这个数量，我们就不再能在敌人的定位上获得最大的好处



CAS_NIGHT_ATTACK_FACTOR = 0.1, — CAS damaged get multiplied by this in land combats at night

CAS_NIGHT_ATTACK_FACTOR = 0.1， — 在夜间的陆战中，CAS 损坏的 CAS 乘以此值



AIR_WING_ATTACK_LOGISTICS_NO_TRUCK_DISRUPTION_FACTOR = 0.02, — If a unit isn’t motorized, still disrupt its supply by damage * this

AIR_WING_ATTACK_LOGISTICS_NO_TRUCK_DISRUPTION_FACTOR = 0.02， — 如果一个单位没有机动化，仍然会通过伤害来破坏其供应 * this

AIR_WING_ATTACK_LOGISTICS_TRUCK_DAMAGE_FACTOR = 0.27,

AIR_WING_ATTACK_LOGISTICS_TRUCK_DAMAGE_FACTOR = 0.27，

AIR_WING_ATTACK_LOGISTICS_INFRA_DAMAGE_SPILL_FACTOR = 0.0016, — Portion of truck damage to additionally deal to infrastructure

AIR_WING_ATTACK_LOGISTICS_INFRA_DAMAGE_SPILL_FACTOR = 0.0016， — 卡车损坏的一部分额外处理给基础设施

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_FACTOR = 0.040,

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_FACTOR = 0.040，

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_DISRUPTION_MITIGATION = 6.0, — Multiply Train Damage by (Smooth / (Smooth + (Disruption * Mitigation)))

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_DISRUPTION_MITIGATION = 6.0， — 将火车伤害乘以 （平滑 / （平滑 + （干扰 * 缓解）））

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_DISRUPTION_SMOOTHING = 5.0,

AIR_WING_ATTACK_LOGISTICS_TRAIN_DAMAGE_DISRUPTION_SMOOTHING = 5.0，

AIR_WING_ATTACK_LOGISTICS_RAILWAY_DAMAGE_SPILL_FACTOR = 0.006, — Portion of train damage to additionally deal to railways

AIR_WING_ATTACK_LOGISTICS_RAILWAY_DAMAGE_SPILL_FACTOR = 0.006， — 火车损坏的一部分额外对铁路造成伤害



AIR_WING_ATTACK_LOGISTICS_DISRUPTION_MIN_DAMAGE_FACTOR = 0.1, — Multiply train damage by this factor, scale from 1.0 at 0 disruption to this at AIR_WING_ATTACK_LOGISTICS_MAX_DISRUPTION_DAMAGE_TO_CONSIDER

AIR_WING_ATTACK_LOGISTICS_DISRUPTION_MIN_DAMAGE_FACTOR = 0.1， — 将火车损坏乘以此系数，从 0 次中断时的 1.0 到 AIR_WING_ATTACK_LOGISTICS_MAX_DISRUPTION_DAMAGE_TO_CONSIDER 时的 1.0 进行缩放

AIR_WING_ATTACK_LOGISTICS_MAX_DISRUPTION_DAMAGE_TO_CONSIDER = 15.0, — see above

AIR_WING_ATTACK_LOGISTICS_MAX_DISRUPTION_DAMAGE_TO_CONSIDER = 15.0， — 见上文

AIR_WING_ATTACK_LOGISTICS_DIRECT_DISRUPTION_DAMAGE_FACTOR = 0.01, — Disruption damage to supply throughput done by bombing damage, not dependant on killing trains which also causes diruption.

AIR_WING_ATTACK_LOGISTICS_DIRECT_DISRUPTION_DAMAGE_FACTOR = 0.01， — 轰炸伤害对补给吞吐量的干扰伤害，不依赖于杀死火车，这也会导致 diruption。



AIR_WING_ATTACK_LOGISTICS_TRUCK_MAX_FACTOR = 0.3, — max trucks we can destroy in one instance of a logistics strike

AIR_WING_ATTACK_LOGISTICS_TRUCK_MAX_FACTOR = 0.3， — 在一次物流罢工中我们可以摧毁的最大卡车数



SECONDARY_DAMAGE_STRAT = 0.2, — how much damage gets translated to railway guns for strat bombing

SECONDARY_DAMAGE_STRAT = 0.2， — Strat 轰炸的铁路炮的伤害是多少

SECONDARY_DAMAGE_LOGISTICS = 1.0, — how much damage gets translated to railway guns for logistic strike

SECONDARY_DAMAGE_LOGISTICS = 1.0， — 有多少伤害转化为铁路炮进行后勤打击



INTERCEPTION_DISTANCE_SCALE = 50, — At this many pixels of path length, full interception efficiency is applied to air missions. Lerp from 0.

INTERCEPTION_DISTANCE_SCALE = 50， — 在如此多的路径长度像素下，对空中任务应用完全拦截效率。从 0 开始的 Lerp。

INTERCEPTION_DAMAGE_SCALE = 0.3, — Multiply the interception damage with this value. Works as a cap when interception distance is at maximum.

INTERCEPTION_DAMAGE_SCALE = 0.3， — 将拦截伤害乘以此值。当拦截距离最大时用作上限。



MIN_PLANE_COUNT_PARADROP = 50,

MIN_PLANE_COUNT_PARADROP = 50，

MIN_PLANE_COUNT_AIR_SUPPLY = 1,

MIN_PLANE_COUNT_AIR_SUPPLY = 1，

BASE_UNIT_WEIGHT_IN_TRANSPORT_PLANES = 45.0,

BASE_UNIT_WEIGHT_IN_TRANSPORT_PLANES = 45.0，



MANPOWER_LOSS_RATIO_PLANE_SHOT = 0.10,	— The loss ratio of manpower for a shot plane.

MANPOWER_LOSS_RATIO_PLANE_SHOT = 0.10， — 射击飞机的人力损失率。



MISSION_COMMAND_POWER_COSTS = { — command power cost per plane to create a mission

MISSION_COMMAND_POWER_COSTS = { — 创建任务时每架飞机的命令功率消耗

0.0, — AIR_SUPERIORITY

0.0， — AIR_SUPERIORITY

0.0, — CAS

0.0， — 空气质素健康指数

0.0, — INTERCEPTION

0.0， — 拦截

0.0, — STRATEGIC_BOMBER

0.0， — STRATEGIC_BOMBER

0.0, — NAVAL_BOMBER

0.0， — NAVAL_BOMBER

0.0, — DROP_NUKE

0.0， — DROP_NUKE

0.0, — PARADROP

0.0， — PARADROP

0.0, — NAVAL_KAMIKAZE

0.0， — NAVAL_KAMIKAZE

0.0, — PORT_STRIKE

0.0， — PORT_STRIKE

0.0, — ATTACK_LOGISTICS

0.0， — ATTACK_LOGISTICS

0.05, — AIR_SUPPLY

0.05， — AIR_SUPPLY

0.0, — TRAINING

0.0， — 训练

0.0, — NAVAL_MINES_PLANTING

0.0， — NAVAL_MINES_PLANTING

0.0, — NAVAL_MINES_SWEEPING

0.0， — NAVAL_MINES_SWEEPING

0.0, — RECON

0.0， — 侦察





0.0, — NAVAL_PATROL


0.0， — NAVAL_PATROL


0,0, — BARRAGE

0.0， — 弹幕

0,0, — SAM

0,0， — SAM

},



MISSION_FUEL_COSTS = { — fuel cost per plane for each mission

MISSION_FUEL_COSTS = { — 每次任务每架飞机的燃料成本

1.0, — AIR_SUPERIORITY

1.0， — AIR_SUPERIORITY

1.0, — CAS

1.0， — CAS

0.2, — INTERCEPTION

0.2， — 拦截

1.0, — STRATEGIC_BOMBER

1.0， — STRATEGIC_BOMBER

1.0, — NAVAL_BOMBER

1.0， — NAVAL_BOMBER

1.0, — DROP_NUKE

1.0， — DROP_NUKE

1.0, — PARADROP

1.0， — PARADROP

0.75, — NAVAL_KAMIKAZE

0.75， — NAVAL_KAMIKAZE

1.2, — PORT_STRIKE

1.2， — PORT_STRIKE

1.2, — ATTACK_LOGISTICS

1.2， — ATTACK_LOGISTICS

1.0, — AIR_SUPPLY

1.0， — AIR_SUPPLY

0.6, — TRAINING

0.6， — 训练

1.0, — NAVAL_MINES_PLANTING

1.0， — NAVAL_MINES_PLANTING

1.0, — NAVAL_MINES_SWEEPING

1.0， — NAVAL_MINES_SWEEPING

1.0, — RECON

1.0， — 侦察

1.0, — NAVAL_PATROL

1.0， — NAVAL_PATROL





0.0, — BARRAGE


0.0， — 弹幕


0,0, — NUCLEAR

0.0， — 核能

0,0, — SAM

0,0， — SAM

},

MAX_FUEL_FLOW_MULT = 1.0, — max fuel flow ratio for planes, which will be multiplied by supply

MAX_FUEL_FLOW_MULT = 1.0， — 飞机的最大燃油流量比，将乘以供应量



FUEL_COST_MULT = 0.35, — fuel multiplier for all air missions

FUEL_COST_MULT = 0.35， — 所有空中任务的燃料乘数



MISSION_EFFICIENCY_MULT_AT_LACK_OF_FUEL = 0.25, 				— multiplier for mission efficiency when a base lacks fuel

MISSION_EFFICIENCY_MULT_AT_LACK_OF_FUEL = 0.25， — 基地缺乏燃料时任务效率的乘数



STRATEGIC_BOMBING_PROV_BUILD_PRIO_SCALE = 1.5,					— Scale of the selected priority for provincial buildings

STRATEGIC_BOMBING_PROV_BUILD_PRIO_SCALE = 1.5， — 省级建筑物的选定优先级的比例

STRATEGIC_BOMBING_STATE_BUILD_PRIO_SCALE = 1.5,					— Scale of the selected priority for state buildings

STRATEGIC_BOMBING_STATE_BUILD_PRIO_SCALE = 1.5， — 为州建筑物选择的优先级的比例

STRATEGIC_BOMBING_INFRA_PRIO_SCALE = 0.7,						— Scale of the selected priority for infrastructure

STRATEGIC_BOMBING_INFRA_PRIO_SCALE = 0.7 — 所选基础设施优先级的规模

STRATEGIC_BOMBING_RAILWAY_PRIORITY_SCALE = 0.2,					— The scale of extra priority assigned to railway for strategic bombing

STRATEGIC_BOMBING_RAILWAY_PRIORITY_SCALE = 0.2， — 分配给铁路进行战略轰炸的额外优先级的规模

STRATEGIC_BOMBING_STATE_BUILDING_SCALE = 1.0,					— The scale of state building priority for strategic bombing

STRATEGIC_BOMBING_STATE_BUILDING_SCALE = 1.0， — 战略轰炸的国家建设优先级的规模



NAVAL_MINES_PLANTING_SPEED_MULT = 0.025,						— Value used to overall balance of the speed of planting naval mines

NAVAL_MINES_PLANTING_SPEED_MULT = 0.025， — 用于平衡埋设海军水雷速度的值

NAVAL_MINES_SWEEPING_SPEED_MULT = 0.025,						— Value used to overall balance of the speed of sweeping naval mines

NAVAL_MINES_SWEEPING_SPEED_MULT = 0.025， — 用于总体平衡海军扫雷速度的值

NON_CORE_STRATEGIC_IMPACT = 0.5, — multiplier for strategic impact of non-core bombing

NON_CORE_STRATEGIC_IMPACT = 0.5， — 非核心轰炸战略影响的乘数

RECON_LAND_SPOT_CHANCE = 0.02, 				— scale factor on spotting lan

RECON_LAND_SPOT_CHANCE = 0.02， — 定位 LAN 的比例因子



REINFORCEMENT_DISABLING_DURATION_IN_LAND_CARRIER_TRANSFER = 48,	— The reinforcement disabling duration in hours when transfering from land to carrier and vice versa

REINFORCEMENT_DISABLING_DURATION_IN_LAND_CARRIER_TRANSFER = 48， — 从陆地转移到航母时增援禁用持续时间（以小时为单位），反之亦然



THRUST_WEIGHT_AGILITY_FACTOR = 0.5,								— For plane designs, additive agility bonus per point of thrust exceeding weight

THRUST_WEIGHT_AGILITY_FACTOR = 0.5， — 对于平面设计，超过重量的每点推力的附加敏捷性加成

MAX_QUICK_WING_SELECTION = 3,									— Max possible selection for airwing quick deploy

MAX_QUICK_WING_SELECTION = 3， — Airwing 快速部署的最大可能选择



USE_SINGLE_NAVAL_ARMAMENT_CATEGORY = true,						— If true, only the armament module category that inflicts the greatest damage to naval targets will contribute naval strike and port strike mission specific stats. Only modules with both naval_strike_attack and naval_strike_targetting are considered. This is used to prevent torpedo_mounting and bomb_locks stats from stacking.

USE_SINGLE_NAVAL_ARMAMENT_CATEGORY = true， — 如果为 true，则只有对海军目标造成最大伤害的武器模块类别才会贡献海军打击和港口打击任务的特定统计数据。仅考虑同时具有 naval_strike_attack 和 naval_strike_targetting 的模块。这用于防止 torpedo_mounting 和 bomb_locks 统计信息堆叠。



PORT_STRIKE_DAMAGE_FACTOR = 1.0,								— How much damage is dealt to ports during a port strike (per plane damage [complex number] * num flying planes * define)

PORT_STRIKE_DAMAGE_FACTOR = 1.0， — 在港口打击期间对港口造成的损害量（每架飞机的损坏 [复数] * 飞行飞机数量 * 定义）

},



NNavy = {

NN-avy = {

— Peace Conference

— 和平会议

WAR_SCORE_GAIN_FOR_SUNK_SHIP_MANPOWER_FACTOR = 0.004,			— war score gained for every manpower killed when sinking a ship

WAR_SCORE_GAIN_FOR_SUNK_SHIP_MANPOWER_FACTOR = 0.004， — 沉船时每杀死一个人力，战争分数就会获得

WAR_SCORE_GAIN_FOR_SUNK_SHIP_PRODUCTION_COST_FACTOR = 0.020,		— war score gained for every IC of the sunk ship

WAR_SCORE_GAIN_FOR_SUNK_SHIP_PRODUCTION_COST_FACTOR = 0.020， — 沉船每获得一个 IC 的战争分数

WAR_SCORE_GAIN_FOR_SUNK_CONVOY = 0.08,							— war score gained for every sunk convoy

WAR_SCORE_GAIN_FOR_SUNK_CONVOY = 0.08， — 每击沉一个护航队都会获得战争分数

WAR_SCORE_DECAY_FOR_BUILT_CONVOY = 0.01, 						— war score deducted when convoy-raided enemy produces one new convoy

WAR_SCORE_DECAY_FOR_BUILT_CONVOY = 0.01， — 当车队突袭的敌人产生一个新的车队时，将扣除战争分数

PEACE_ACTION_TRANSFER_NAVY_EXPERIENCE_RETAINED = 0.25,			— % of experience to retain after being transferred in a peace conference

PEACE_ACTION_TRANSFER_NAVY_EXPERIENCE_RETAINED = 0.25， — 在和平会议上被调动后保留的经验百分比



— Convoy Priorities START

— Convoy Priorities 开始

NAVAL_INVASION_PRIORITY = 1,									— Default convoy priority for naval invasions

NAVAL_INVASION_PRIORITY = 1， — 海军入侵的默认护航优先级

NAVAL_TRANSFER_PRIORITY = 1,									— Default convoy priority for naval transports

NAVAL_TRANSFER_PRIORITY = 1， — 海军运输船的默认护航优先级

SUPPLY_PRIORITY = 2,											— Default convoy priority for supplying units via sea

SUPPLY_PRIORITY = 2， — 通过海上为单位提供补给的默认护航优先权

RESOURCE_LENDLEASE_PRIORITY = 3,								— Default convoy priority for export lend lease

RESOURCE_LENDLEASE_PRIORITY = 3， — 出口借出租赁的默认护航优先级

RESOURCE_EXPORT_PRIORITY = 4,									— Default convoy priority for export trade

RESOURCE_EXPORT_PRIORITY = 4， — 出口贸易的默认护航优先权

RESOURCE_ORIGIN_PRIORITY = 5,									— Default convoy priority for resources shipped internally

RESOURCE_ORIGIN_PRIORITY = 5 – 内部运输资源的默认保护优先级

RESOURCE_PURCHASE_PRIORITY = 6,									— Default convoy priority for export equipment purchase

RESOURCE_PURCHASE_PRIORITY = 6， — 购买出口设备的默认护航优先权

UNDERWAY_REPLENISHMENT_PRIORITY = 7,							— Default convoy priority for underway replenishment

UNDERWAY_REPLENISHMENT_PRIORITY = 7， — 正在进行的补给的默认护航优先级

— Convoy Priorities END

— Convoy Priorities 结束



ADMIRAL_TASKFORCE_CAP = 10,										— admirals will start getting penalties after this amount of taskforces

ADMIRAL_TASKFORCE_CAP = 10， — 在这么多的特遣队之后，海军上将将开始受到惩罚



DETECTION_CHANCE_MULT_BASE = 0.1,								— base multiplier value for detection chance. Later the chance is an average between our detection and enemy visibility, mult by surface/sub detection chance in the following defines.

DETECTION_CHANCE_MULT_BASE = 0.1， — 检测几率的基乘数值。稍后的几率是我们的探测和敌人能见度之间的平均值，乘以表面/潜艇探测几率，在以下定义中。

DETECTION_CHANCE_MULT_RADAR_BONUS = 0.1,						— detection chance bonus from radars.

DETECTION_CHANCE_MULT_RADAR_BONUS = 0.1， — 雷达的检测几率加成。

DETECTION_CHANCE_MULT_AIR_SUPERIORITY_BONUS = 0.25,			— bonus from air superiority.

DETECTION_CHANCE_MULT_AIR_SUPERIORITY_BONUS = 0.25， — 空中优势的加成。



MAX_CAPITALS_PER_AUTO_TASK_FORCE = 5,							— maximum number of capital ships the auto-task force creation will put together when designing SurfaceActionGroup

MAX_CAPITALS_PER_AUTO_TASK_FORCE = 5， — 在设计 SurfaceActionGroup 时，自动特遣队创建将汇总的最大主力舰数量

MAX_SUBMARINES_PER_AUTO_TASK_FORCE = 30,						— maximum number of submarines the auto-task force creation will put together when designing wolfpack

MAX_SUBMARINES_PER_AUTO_TASK_FORCE = 30， — 在设计 Wolfpack 时，自动特遣队创建将组装的最大潜艇数量

BEST_CAPITALS_TO_CARRIER_RATIO = 1,							— capitals / carriers ratio used when auto-task force creation designs CarrierTaskForce

BEST_CAPITALS_TO_CARRIER_RATIO = 1， — 在自动特遣队创建设计 CarrierTaskForce 时使用的资本 / 承运人比率

BEST_CAPITALS_TO_SCREENS_RATIO = 0.25, 							— capitals / screens ratio used for creating FEX groups in naval combat

BEST_CAPITALS_TO_SCREENS_RATIO = 0.25， — 用于在海战中创建 FEX 组的首都/屏幕比率

COMBAT_BASE_HIT_CHANCE = 0.1,									— base chance for hit

COMBAT_BASE_HIT_CHANCE = 0.1， — 基础命中几率



COMBAT_MIN_HIT_CHANCE = 0.05,									— never less hit chance then this?

COMBAT_MIN_HIT_CHANCE = 0.05， — 从来没有比这更低的命中率吗？

COMBAT_EVASION_TO_HIT_CHANCE = 0.007,							— we take ship evasion stats, and mult by this value, so it gives hit chance reduction. So if reduction is 0.025 and ship evasion = 10, then there will be 0.25 (25%) lower hit chance. (Fe. 50% base -25% from evasion +10% bcoz it’s very close).

COMBAT_EVASION_TO_HIT_CHANCE = 0.007， — 我们获取飞船闪避统计数据，并乘以这个值，所以它可以减少命中率。因此，如果减少 0.025 且飞船闪避 = 10，那么命中率将降低 0.25 （25%）。（Fe. 50% 基础 -25% 来自闪避 +10%，因为它非常接近）。

COMBAT_EVASION_TO_HIT_CHANCE_TORPEDO_MULT = 10.0,				— the above evasion hit chance is multiplied by 400% if shooting with torpedoes. Torpedoes are slow, so evasion matters more.

COMBAT_EVASION_TO_HIT_CHANCE_TORPEDO_MULT = 10.0， — 如果使用鱼雷射击，上述闪避命中率乘以 400%。鱼雷速度很慢，所以躲避更重要。

MIN_HIT_PROFILE_MULT = 0.0,										— largest hit profile penalty to hitting

MIN_HIT_PROFILE_MULT = 0.0， — 击中的最大命中配置文件惩罚

COMBAT_LOW_ORG_HIT_CHANCE_PENALTY = -0.5,						— % of penalty applied to hit chance when ORG is very low.

COMBAT_LOW_ORG_HIT_CHANCE_PENALTY = -0.5， — 当 ORG 非常低时，应用于命中率的惩罚百分比。

COMBAT_LOW_MANPOWER_HIT_CHANCE_PENALTY = -0.25,					— % of penalty applied to hit chance when manpower is very low.

COMBAT_LOW_MANPOWER_HIT_CHANCE_PENALTY = -0.25， — 当人力非常低时，对命中率施加的惩罚百分比。

COMBAT_DAMAGE_RANDOMNESS = 0.5,									— random factor in damage. So if max damage is fe. 10, and randomness is 30%, then damage will be between 7-10.

COMBAT_DAMAGE_RANDOMNESS = 0.5， — 伤害的随机因子。因此，如果最大伤害是 fe.10，随机性为 30%，则伤害将在 7-10 之间。

COMBAT_TORPEDO_CRITICAL_CHANCE = 0.1,							— chance for critical hit from torpedo.

COMBAT_TORPEDO_CRITICAL_CHANCE = 0.1， — 鱼雷暴击的几率。

COMBAT_TORPEDO_CRITICAL_DAMAGE_MULT = 2.0,						— multiplier to damage when got critical hit from torpedo. (Critical hits are devastating as usualy torpedo_attack are pretty high base values).

COMBAT_TORPEDO_CRITICAL_DAMAGE_MULT = 2.0， — 被鱼雷暴击时的伤害乘数。（暴击通常具有毁灭性torpedo_attack而且基础值相当高）。



COMBAT_DAMAGE_TO_STR_FACTOR = 0.6,								— casting damage value to ship strength multiplier. Use it ot balance the game difficulty.

COMBAT_DAMAGE_TO_STR_FACTOR = 0.6， — 施放伤害值与飞船力量的乘数。使用它来平衡游戏难度。

COMBAT_DAMAGE_TO_ORG_FACTOR = 1.0,								— casting damage value to ship organisation multiplier. Use it to balance the game difficulty.

COMBAT_DAMAGE_TO_ORG_FACTOR = 1.0， — 施放伤害值到飞船组织乘数。用它来平衡游戏难度。



NAVY_MAX_XP = 100,

NAVY_MAX_XP = 100，

COMBAT_ON_THE_WAY_INIT_DISTANCE_BALANCE = 0.25, 				— Value to balance initial distance to arrive for ships that are “on the way”

COMBAT_ON_THE_WAY_INIT_DISTANCE_BALANCE = 0.25， — 用于平衡“正在途中”的船舶到达初始距离的值

COMBAT_CHASE_RESIGNATION_HOURS = 8,								— Before we resign chasing enemy, give them some minimum time so the combat doesn’t end instantly.

COMBAT_CHASE_RESIGNATION_HOURS = 8， — 在我们放弃追逐敌人之前，给他们一些最短的时间，这样战斗就不会立即结束。



COMBAT_MAX_GROUPS = 1,											— Max amount of “Fire Exchange” groups (FEX).

COMBAT_MAX_GROUPS = 1，— “Fire Exchange”组 （FEX） 的最大数量。

COMBAT_MIN_DURATION = 8,										— Min combat duration before we can retreat. It’s a balancing variable so it’s not possible to always run with our weak ships agains big flotillas.

COMBAT_MIN_DURATION = 8， — 我们撤退前的最小战斗持续时间。这是一个平衡变量，因此不可能总是让我们的弱船与大型舰队一起运行。

COMBAT_INITIAL_DURATION = 6,									— Number of hours that is considered the “initial phase” of naval combat, used for modifiers like surprise attack during “initial combat”

COMBAT_INITIAL_DURATION = 6， — 被视为海战“初始阶段”的小时数，用于“初始战斗”期间的突然袭击等修饰符

COMBAT_RETREAT_DECISION_CHANCE = 0.22, 							— There is also random factor in deciding if we should retreat or not. That causes a delay in taking decision, that sooner or later will be picked. It’s needed so damaged fast ships won’t troll the combat.

COMBAT_RETREAT_DECISION_CHANCE = 0.22， — 在决定我们是否应该撤退时，也存在随机因素。这会导致做出决定的延迟，迟早会被选中。这是必要的，这样受损的快速船只就不会拖钓战斗。

COMBAT_DETECTED_CONVOYS_FROM_SURFACE_DETECTION_STAT = 0.1,		— Each 1.0 of surface_detection that ship has (equipment stat), gives x% of convoys discovered from total travelling along the route.

COMBAT_DETECTED_CONVOYS_FROM_SURFACE_DETECTION_STAT = 0.1， — 该船每拥有 1.0 surface_detection（装备统计），则从沿途总航行中发现的护航队的 x%。

COMBAT_BASE_CRITICAL_CHANCE = 0.05,								— Base chance for receiving a critical chance. It get’s scaled down with ship reliability.

COMBAT_BASE_CRITICAL_CHANCE = 0.05， — 获得暴击几率的基础几率。它随着飞船的可靠性而缩小。

COMBAT_CRITICAL_DAMAGE_MULT = 5.0,								— Multiplier for the critical damage. Scaled down with the ship reliability.

COMBAT_CRITICAL_DAMAGE_MULT = 5.0， — 暴击伤害的乘数。随着飞船的可靠性而缩小。

COMBAT_ARMOR_PIERCING_CRITICAL_BONUS = 1.0,						— Bonus to critical chance when shooter armor piercing is higher then target armor.

COMBAT_ARMOR_PIERCING_CRITICAL_BONUS = 1.0， — 当射手的穿甲高于目标装甲时，暴击率加成。

COMBAT_ARMOR_PIERCING_DAMAGE_REDUCTION = 0,					— All damage reduction % when target armor is >= then shooter armor piercing. (depricated)

COMBAT_ARMOR_PIERCING_DAMAGE_REDUCTION = 0， — 当目标装甲为 >= 时所有伤害减免 %，然后射手穿甲。（被剥夺）

REPAIR_AND_RETURN_PRIO_LOW = 0.2,								— % of total Strength. When below, navy will go to home base to repair.

REPAIR_AND_RETURN_PRIO_LOW = 0.2， — 总强度的 %。当低于 master base 时，navy 将前往 home base 进行维修。

REPAIR_AND_RETURN_PRIO_MEDIUM = 0.5,							— % of total Strength. When below, navy will go to home base to repair.

REPAIR_AND_RETURN_PRIO_MEDIUM = 0.5，— 总强度的 %。当低于 master base 时，navy 将前往 home base 进行维修。

REPAIR_AND_RETURN_PRIO_HIGH = 0.9,								— % of total Strength. When below, navy will go to home base to repair.

REPAIR_AND_RETURN_PRIO_HIGH = 0.9， — 总强度的 %。当低于 master base 时，navy 将前往 home base 进行维修。

REPAIR_AND_RETURN_PRIO_LOW_COMBAT = 0.6,						— % of total Strength. When below, navy will go to home base to repair (in combat).

REPAIR_AND_RETURN_PRIO_LOW_COMBAT = 0.6， — 总力量的 %。当低于 3 小时，海军将前往大本营进行维修（在战斗中）。

REPAIR_AND_RETURN_PRIO_MEDIUM_COMBAT = 0.3,						— % of total Strength. When below, navy will go to home base to repair (in combat).

REPAIR_AND_RETURN_PRIO_MEDIUM_COMBAT = 0.3， — 总强度的 %。当低于 3 小时，海军将前往大本营进行维修（在战斗中）。

REPAIR_AND_RETURN_PRIO_HIGH_COMBAT = 0.1,						— % of total Strength. When below, navy will go to home base to repair (in combat).

REPAIR_AND_RETURN_PRIO_HIGH_COMBAT = 0.1， — 总强度的 %。当低于 3 小时，海军将前往大本营进行维修（在战斗中）。

REPAIR_AND_RETURN_AMOUNT_SHIPS_LOW = 0.2,						— % of total damaged ships, that will be sent for repair-and-return in one call.

REPAIR_AND_RETURN_AMOUNT_SHIPS_LOW = 0.2， — 受损船舶总数的百分比，将在一次呼叫中被送去维修和归还。

REPAIR_AND_RETURN_AMOUNT_SHIPS_MEDIUM = 0.4,					— % of total damaged ships, that will be sent for repair-and-return in one call.

REPAIR_AND_RETURN_AMOUNT_SHIPS_MEDIUM = 0.4， — 受损船舶总数的百分比，将在一次呼叫中被送去维修并返回。

REPAIR_AND_RETURN_AMOUNT_SHIPS_HIGH = 0.8,						— % of total damaged ships, that will be sent for repair-and-return in one call.

REPAIR_AND_RETURN_AMOUNT_SHIPS_HIGH = 0.8， — 占受损船舶总数的百分比，将在一次呼叫中被送去维修和返回。

REPAIR_AND_RETURN_UNIT_DYING_STR = 0.2,							— Str below this point is considering a single ship “dying”, and a high priority to send to repair.

REPAIR_AND_RETURN_UNIT_DYING_STR = 0.2， — 低于此点的 Str 认为有一艘船“垂死”，并且是送去维修的高优先级。

EXPERIENCE_LOSS_FACTOR = 1.00, 					— percentage of experienced solders who die when manpower is removed

EXPERIENCE_LOSS_FACTOR = 1.00， — 在移除人力时死亡的有经验的焊料的百分比

NAVY_EXPENSIVE_IC = 5500,										— How much IC is considering the fleet to be expensive. Those expensive will triger the alert, when are on low STR.

NAVY_EXPENSIVE_IC = 5500 — 有多少 IC 认为队列很昂贵。当 STR 较低时，那些昂贵的将触发警报。

MISSION_MAX_REGIONS = 0,										— Limit of the regions that can be assigned to naval mission. Set to 0 for unlimited.

MISSION_MAX_REGIONS = 0， — 可分配给海军任务的区域限制。设置为 0 表示无限制。

CONVOY_EFFICIENCY_LOSS_MODIFIER = 1.25,							— How much efficiency drops when losing convoys. If modifier is 0.5, then losing 100% of convoys in short period, the efficiency will drop by 50%.

CONVOY_EFFICIENCY_LOSS_MODIFIER = 1.25， — 失去护航队时效率下降多少。如果修正为 0.5，则在短时间内损失 100% 的运输队，效率会下降 50%。

CONVOY_EFFICIENCY_REGAIN_AFTER_DAYS = 7,						— Convoy starts regaining it’s efficiency after X days without any convoys being sink.

CONVOY_EFFICIENCY_REGAIN_AFTER_DAYS = 7， — Convoy 在 X 天后开始恢复其效率，没有任何护航队被击沉。

CONVOY_EFFICIENCY_REGAIN_BASE_SPEED = 0.04,						— How much efficiency regains every day.

CONVOY_EFFICIENCY_REGAIN_BASE_SPEED = 0.04， — 每天恢复多少效率。

CONVOY_EFFICIENCY_MIN_VALUE = 0.05,								— To avoid complete 0% efficiency, set the lower limit.

CONVOY_EFFICIENCY_MIN_VALUE = 0.05， — 为避免效率完全为 0%，请设置下限。

CONVOY_ROUTE_SIZE_CONVOY_SCALE = 0.5, — scales impact of convoy route size (0 to turn off)

CONVOY_ROUTE_SIZE_CONVOY_SCALE = 0.5 — 按比例调整护航路线大小的影响（0 表示关闭）

ANTI_AIR_TARGETTING_TO_CHANCE = 0.2,							— Balancing value to convert averaged equipment stats (anti_air_targetting and naval_strike_agility) to probability chances of airplane being hit by navies AA.

ANTI_AIR_TARGETTING_TO_CHANCE = 0.2， — 将平均设备统计数据（anti_air_targetting 和 naval_strike_agility）转换为飞机被海军 AA 击中的概率的平衡值。

ANTI_AIR_ATTACK_TO_AMOUNT = 0.01,								— Balancing value to convert equipment stat anti_air_attack to the random % value of airplanes being hit.

ANTI_AIR_ATTACK_TO_AMOUNT = 0.01， — 将设备属性anti_air_attack转换为被击中飞机的随机百分比值的平衡值。

CONVOY_SINKING_SPILLOVER = 0.5, 				— Damaged convoys roll for if they sink in the end of combat by accumulating the damage. This scales that chance.

CONVOY_SINKING_SPILLOVER = 0.5， — 如果受损的车队在战斗结束时通过累积伤害而沉没，则会滚动。这扩大了这个机会。

UNIT_EXPERIENCE_PER_COMBAT_HOUR = 10,

UNIT_EXPERIENCE_PER_COMBAT_HOUR = 10，

UNIT_EXPERIENCE_SCALE = 1,

UNIT_EXPERIENCE_SCALE = 1，

EXPERIENCE_FACTOR_CONVOY_ATTACK = 0.04,

EXPERIENCE_FACTOR_CONVOY_ATTACK = 0.04，

EXPERIENCE_FACTOR_NON_CARRIER_GAIN = 0.04,						— Xp gain by non-carrier ships in the combat

EXPERIENCE_FACTOR_NON_CARRIER_GAIN = 0.04， — 非航母舰在战斗中获得的经验值

EXPERIENCE_FACTOR_CARRIER_GAIN = 0.08,							— Xp gain by carrier ships in the combat

EXPERIENCE_FACTOR_CARRIER_GAIN = 0.08， — 战斗中航母舰获得的经验值

FIELD_EXPERIENCE_SCALE = 0.075,

FIELD_EXPERIENCE_SCALE = 0.075，

FIELD_EXPERIENCE_MAX_PER_DAY = 50,								— Most xp you can gain per day

FIELD_EXPERIENCE_MAX_PER_DAY = 50， — 您每天可以获得的最高经验值

LEADER_EXPERIENCE_SCALE = 1.0,

LEADER_EXPERIENCE_SCALE = 1.0，

BATTLE_NAME_VP_FACTOR = 100,									— Name is given by ((VP value) * BATTLE_NAME_VP_FACTOR) / (Distance VP -> battle)

BATTLE_NAME_VP_FACTOR = 100， — 名称由 （（VP 值） * BATTLE_NAME_VP_FACTOR） / （距离 VP -> 战斗） 给出

BATTLE_NAME_VP_CUTOFF = 1.0,									— If best score of above calculation is below this, name will be that of region.

BATTLE_NAME_VP_CUTOFF = 1.0， — 如果上述计算的最佳分数低于此分数，则 name 将为 region 的分数。

AMPHIBIOUS_LANDING_PENALTY = -0.5,								— amphibious landing penalty

AMPHIBIOUS_LANDING_PENALTY = -0.5， — 两栖着陆惩罚

AMPHIBIOUS_INVADE_SPEED_BASE = 0.5, 							— every hour movement progress on amphibious invasion

AMPHIBIOUS_INVADE_SPEED_BASE = 0.5， — 两栖入侵每小时移动进度

AMPHIBIOUS_INVADE_MOVEMENT_COST = 24.0, 						— total progress cost of movement while amphibious invading

AMPHIBIOUS_INVADE_MOVEMENT_COST = 24.0， — 两栖入侵时移动的总进度成本

AMPHIBIOUS_INVADE_ATTACK_LOW = 0.2, 							— low and high cap of attack modifier scale. Scale interpolated by invasion progress.

AMPHIBIOUS_INVADE_ATTACK_LOW = 0.2， — 攻击特效等级的低上限和高上限。按入侵进度插值的比例。

AMPHIBIOUS_INVADE_ATTACK_HIGH = 1.0,

AMPHIBIOUS_INVADE_ATTACK_HIGH = 1.0，

AMPHIBIOUS_INVADE_DEFEND_LOW = 1.5, 							— low and high cap of defend modifier scale. Scale interpolated by invasion progress.

AMPHIBIOUS_INVADE_DEFEND_LOW = 1.5， — 防御修改器比例的低上限和高上限。按入侵进度插值的比例。

AMPHIBIOUS_INVADE_DEFEND_HIGH = 1.0,

AMPHIBIOUS_INVADE_DEFEND_HIGH = 1.0，

AMPHIBIOUS_INVADE_LANDING_PENALTY_DECREASE = 3.5, 				— scale of bonus that decreases “amphibious penalty” during combat, relative to invading transporter tech.

AMPHIBIOUS_INVADE_LANDING_PENALTY_DECREASE = 3.5， — 相对于入侵的运输机技术，在战斗中减少“两栖惩罚”的加成比例。

BASE_CARRIER_SORTIE_EFFICIENCY = 0.5,							— factor of planes that can sortie by default from a carrier

BASE_CARRIER_SORTIE_EFFICIENCY = 0.5， — 默认情况下可以从航母出击的飞机系数

CONVOY_ATTACK_BASE_FACTOR = 0.15, — base % of convoys that get intercepted

CONVOY_ATTACK_BASE_FACTOR = 0.15， — 被拦截的车队的基本百分比

NAVAL_SPEED_MODIFIER = 0.1,	 				— basic speed control

NAVAL_SPEED_MODIFIER = 0.1， — 基本速度控制

NAVAL_RANGE_TO_INGAME_DISTANCE = 0.12,							— Scale the ship stats “naval_range” to the ingame distance

NAVAL_RANGE_TO_INGAME_DISTANCE = 0.12， — 将飞船统计数据 “naval_range” 缩放到游戏内距离

NAVAL_INVASION_PREPARE_HOURS = 168,								— base hours needed to prepare an invasion

NAVAL_INVASION_PREPARE_HOURS = 168， — 准备入侵所需的基本小时数

NAVAL_COMBAT_RESULT_TIMEOUT_YEARS = 2,							— after that many years, we clear the naval combat results, so they don’t get stuck forever in the memory.

NAVAL_COMBAT_RESULT_TIMEOUT_YEARS = 2， — 这么多年后，我们清除了海战结果，这样它们就不会永远留在记忆中。

CONVOY_LOSS_HISTORY_TIMEOUT_MONTHS = 24,						— after this many months remove the history of lost convoys to not bloat savegames and memory since there is no way to see them anyway

CONVOY_LOSS_HISTORY_TIMEOUT_MONTHS = 24， — 在这几个月后删除丢失的车队的历史记录，以免使存档和内存膨胀，因为无论如何都无法看到它们

NAVAL_TRANSFER_BASE_SPEED = 6, — base speed of units on water being transported

NAVAL_TRANSFER_BASE_SPEED = 6， — 在水上运输的单位的基本速度

NAVAL_TRANSFER_BASE_NAVAL_DIST_ADD = 100,						— Extra cost for naval movement ( compared to land movement ) when deciding what ports to use for a naval transfer

NAVAL_TRANSFER_BASE_NAVAL_DIST_ADD = 100， — 在决定使用哪些港口进行海军转移时，海军移动的额外成本（与陆地移动相比）

NAVAL_TRANSFER_BASE_NAVAL_DIST_MULT = 20,						— Multiplier for the cost of naval movement ( compared to land movement ) when deciding what ports to use for naval transfer

NAVAL_TRANSFER_BASE_NAVAL_DIST_MULT = 20， — 决定使用哪些港口进行海军转移时，海军移动成本的乘数（与陆地移动相比）

NAVAL_SUPREMACY_CAN_INVADE = 0.5,								— required naval supremacy to perform invasions on an area

NAVAL_SUPREMACY_CAN_INVADE = 0.5， — 需要海军优势才能对某个地区进行入侵

CARRIER_STACK_PENALTY = 4,										— The most efficient is 4 carriers in combat. 5+ brings the penalty to the amount of wings in battle.

CARRIER_STACK_PENALTY = 4， — 战斗中效率最高的是 4 个航母。5+ 会惩罚战斗中的翅膀数量。

CARRIER_STACK_PENALTY_EFFECT = 0.2,								— Each carrier above the optimal amount decreases the amount of airplanes being able to takeoff by such %.

CARRIER_STACK_PENALTY_EFFECT = 0.2， — 每个航母超过最佳数量时，能够起飞的飞机数量减少 % 为 %。

SHORE_BOMBARDMENT_CAP = 0.25,

SHORE_BOMBARDMENT_CAP = 0.25，

ANTI_AIR_TARGETING = 0.9, — how good ships are at hitting aircraft

ANTI_AIR_TARGETING = 0.9， — 飞船击中飞机的能力

MIN_TRACTED_ASSIST_DAMAGE_RATIO = 0.05,							— How much damage counts as assist damage

MIN_TRACTED_ASSIST_DAMAGE_RATIO = 0.05， — 有多少伤害算作助攻伤害

SUPPLY_NEED_FACTOR = 4,										 — multiplies supply usage

SUPPLY_NEED_FACTOR = 4， — 电源使用量乘以

DECRYPTION_SPOTTING_BONUS = 0.2,

DECRYPTION_SPOTTING_BONUS = 0.2，

DISBAND_MANPOWER_LOSS = 0.0,

DISBAND_MANPOWER_LOSS = 0.0，

MANPOWER_LOSS_RATIO_ON_SUNK = 0.5,								— sunk ships will lose this ratio of their current manpower

MANPOWER_LOSS_RATIO_ON_SUNK = 0.5， — 沉没的船只将损失其当前人力的这一比例

MANPOWER_LOSS_RATIO_ON_STR_LOSS = 0.5,							— losing strength will make you also lose manpower at this ratio of total manpower

MANPOWER_LOSS_RATIO_ON_STR_LOSS = 0.5， — 在这个总人力的比例下，失去体力也会使你失去人力

MIN_MANPOWER_RATIO_TO_DROP = 0.1,								— ships will not lose man power to below this ratio

MIN_MANPOWER_RATIO_TO_DROP = 0.1， — 船只不会因低于此比率而损失人力

DAILY_MANPOWER_GAIN_RATIO = 0.05,								— the ships not in combat will be able to gain this ratio of their max manpower

DAILY_MANPOWER_GAIN_RATIO = 0.05， — 未处于战斗状态的船只将能够获得其最大人力的这个比例

PRIDE_OF_THE_FLEET_UNASSIGN_COST = 100,							— cost to unassign/replace pride of the fleet

PRIDE_OF_THE_FLEET_UNASSIGN_COST = 100， — 取消分配/替换 Pride of the Fleet 的成本

PRIDE_OF_THE_FLEET_LOST_TEMP_MODIFIER_DURATION = 30,			— duration for temp modifiers that you get when you lose your pride of the fleet

PRIDE_OF_THE_FLEET_LOST_TEMP_MODIFIER_DURATION = 30， — 当你失去舰队的骄傲时获得的温度修正的持续时间

XP_GAIN_FACTOR = 1.0,	 			 							— xp gain factor for navy

XP_GAIN_FACTOR = 1.0， — 海军的 XP 增益系数



NAVAL_TRANSFER_DAMAGE_REDUCTION = 0.25,							— its hard to specifically balance 1-tick naval strikes vs unit transports so here is a factor for it

NAVAL_TRANSFER_DAMAGE_REDUCTION = 0.25， — 很难专门平衡 1 刻的海军打击和单位运输，所以这里有一个因素

CARRIER_ONLY_COMBAT_ACTIVATE_TIME = 0,							— hours from start of combat when carriers get to fight

CARRIER_ONLY_COMBAT_ACTIVATE_TIME = 0， — 航母开始战斗时从战斗开始的小时数

CAPITAL_ONLY_COMBAT_ACTIVATE_TIME = 6, — hours from start of combat when only carriers, capitals and subs get to attack

CAPITAL_ONLY_COMBAT_ACTIVATE_TIME = 6， — 战斗开始后小时数，此时只有航母、首都和潜艇可以攻击

ALL_SHIPS_ACTIVATE_TIME = 8, — hours where all get to attack

ALL_SHIPS_ACTIVATE_TIME = 8， — 所有人都开始攻击的小时数



MINIMUM_SHIP_SPEED = 1.0,										— slowest speed a ship can have

MINIMUM_SHIP_SPEED = 1.0， — 飞船可以拥有的最慢速度



REPAIR_SPLIT_TASKFORCE_SIZE = 5,								— if a country does not have empty naval naval bases for repairs, it will split ships with this sizes and distribute them around

REPAIR_SPLIT_TASKFORCE_SIZE = 5， — 如果一个国家没有空的海军基地进行维修，它将把这种尺寸的船只分开并分发给周围

NAVY_REPAIR_BASE_SEARCH_SCORE_PER_SHIP_WAITING_EXTRA_SHIP = 5, — if a naval base has more ships than it can repair, it will get penalties

NAVY_REPAIR_BASE_SEARCH_SCORE_PER_SHIP_WAITING_EXTRA_SHIP = 5， — 如果海军基地的船只数量超过其维修能力，它将受到处罚

NAVY_REPAIR_BASE_SEARCH_SCORE_PER_SLOT = 1.0,					— while searching for a naval base for repairs, the bases gets a bonus to their scores per empty slot they have

NAVY_REPAIR_BASE_SEARCH_SCORE_PER_SLOT = 1.0， — 在寻找需要维修的海军基地时，基地每有一个空槽就会获得分数加成

NAVY_REPAIR_BASE_SEARCH_BOOST_FOR_SAME_COUNTRY = 5,				— while searching for a naval base for repairs, your own bases gets a bonus

NAVY_REPAIR_BASE_SEARCH_BOOST_FOR_SAME_COUNTRY = 5， — 在寻找海军基地进行维修时，您自己的基地会获得奖励



CONVOY_SPOTTING_COOLDOWN = 0.3, — % of travel time

CONVOY_SPOTTING_COOLDOWN = 0.3， — 行驶时间的 %

CONVOY_SPOTTING_COOLDOWN_MIN = 36, — minimum cooldown time

CONVOY_SPOTTING_COOLDOWN_MIN = 36， — 最短冷却时间

CONVOY_SPOTTING_COOLDOWN_MAX = 168, — maximum cooldown time

CONVOY_SPOTTING_COOLDOWN_MAX = 168， — 最大冷却时间

CONVOY_SPOTTING_COOLDOWN_MIN_FROM_EFFICIENCY = 15, — clamped min value after screening efficiency has been applied

CONVOY_SPOTTING_COOLDOWN_MIN_FROM_EFFICIENCY = 15 — 应用筛选效率后的夹紧最小值



MISSION_FUEL_COSTS = { — fuel cost for each mission

MISSION_FUEL_COSTS = { — 每个任务的燃料消耗

0.0, — HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)

0.0， — HOLD （移动时消耗燃油 HOLD_MISSION_MOVEMENT_COST 燃油）





1.0, — PATROL


1.0， — 巡逻


1.0, — STRIKE FORCE (does not cost fuel at base, and uses IN_COMBAT_FUEL_COST in combat. this is just for the movement in between)

1.0， — 打击力量（在基地不消耗燃料，在战斗中使用IN_COMBAT_FUEL_COST。这只是为了中间的移动）

1.0, — CONVOY RAIDING

1.0， — 车队突袭

1.0, — CONVOY ESCORT

1.0， — 护航

1.0, — MINES PLANTING

1.0， — 地雷种植

1.0, — MINES SWEEPING

1.0， — 扫雷





0.6, — TRAIN


0.6， — 火车


0.0, — RESERVE_FLEET (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)

0.0， — RESERVE_FLEET （移动时消耗燃料 HOLD_MISSION_MOVEMENT_COST 燃料）

1.0, — NAVAL_INVASION_SUPPORT (does not cost fuel at base, only costs while doing bombardment and escorting units)

1.0， — NAVAL_INVASION_SUPPORT （基地不消耗燃料，只消耗轰炸和护航单位）

},



HOLD_MISSION_MOVEMENT_COST = 1.0,								— ships on hold cost this much fuel while moving

HOLD_MISSION_MOVEMENT_COST = 1.0 — 搁置的船舶在移动时消耗这么多燃料

ON_BASE_FUEL_COST = 0.0,										— ships that waits at naval bases cost this ratio

ON_BASE_FUEL_COST = 0.0， — 在海军基地等待的船只花费此比率

IN_COMBAT_FUEL_COST = 2.0,										— ships in combat will get this ratio for fuel cost

IN_COMBAT_FUEL_COST = 2.0， — 战斗中的舰船将获得此燃料成本比率

TRAINING_FUEL_COST_FOR_ESCORT_SHIPS = 0.15,						— ships that are on training mission but not training (ie they are at max xp and training will cancel at max xp) will consume this ratio of fuel

TRAINING_FUEL_COST_FOR_ESCORT_SHIPS = 0.15， — 正在执行训练任务但未进行训练的飞船（即它们处于最大 XP 且训练将在最大 XP 时取消）将消耗此比例的燃料



MAX_FUEL_FLOW_MULT = 2.0, — max fuel flow ratio for ships, which will be multiplied by supply

MAX_FUEL_FLOW_MULT = 2.0， — 船舶的最大燃料流量比，乘以供应

FUEL_COST_MULT = 0.10, — fuel multiplier for all naval missions

FUEL_COST_MULT = 0.10， — 所有海军任务的燃料乘数



OUT_OF_FUEL_SPEED_FACTOR = -0.75,

OUT_OF_FUEL_SPEED_FACTOR = -0.75，

OUT_OF_FUEL_RANGE_FACTOR = -0.75,

OUT_OF_FUEL_RANGE_FACTOR = -0.75，

OUT_OF_FUEL_ATTACK_FACTOR = -0.5,

OUT_OF_FUEL_ATTACK_FACTOR = -0.5，

OUT_OF_FUEL_TORPEDO_FACTOR = -0.8,

OUT_OF_FUEL_TORPEDO_FACTOR = -0.8，



UNDERWAY_REPLENISHMENT_RANGE_FACTOR = 0.4,			— bonus factor applied to task force’s range when underway replenishment is activated (e.g. 0.2 means +20%)

UNDERWAY_REPLENISHMENT_RANGE_FACTOR = 0.4， — 激活正在进行的补给时，特遣队的范围加成系数（例如 0.2 表示 +20%）

UNDERWAY_REPLENISHMENT_CONVOY_COST_PER_FUEL = 0.28,	— Cost in convoys for underway replenishment multiplied by max daily fuel consumption (rounded up)

UNDERWAY_REPLENISHMENT_CONVOY_COST_PER_FUEL = 0.28， — 在途补给车队的成本乘以最大每日燃料消耗量（四舍五入）



MISSION_SPREADS = { — mission spreads in the case a ship join combat, which is calculated for number of ships that will be in combat. 1 means no ship will be at start

MISSION_SPREADS = { — 如果战舰加入战斗，任务分布，这是根据将要进入战斗的战舰数量计算的。1 表示开始时不会有战舰

0.0, — HOLD

0.0， — 保持

0.0, — PATROL

0.0， — 巡逻

0.0, — STRIKE FORCE

0.0， — 打击力

0.0, — CONVOY RAIDING

0.0， — 车队突袭

0.0, — CONVOY ESCORT

0.0， — 护航

0.7, — MINES PLANTING

0.7， — 地雷种植

0.7, — MINES SWEEPING

0.7， — 扫雷

0.5, — TRAIN

0.5， — 火车

0.0, — RESERVE_FLEET

0.0， — RESERVE_FLEET





0.0, — NAVAL_INVASION_SUPPORT


0.0， — NAVAL_INVASION_SUPPORT


},

MISSION_DEFAULT_SPREAD_BASE = 1.0, — multiplier for mission spreads. higher = less ships on start

MISSION_DEFAULT_SPREAD_BASE = 1.0， — 任务点差的乘数。较高 = 开始时的船只较少



AGGRESSION_SETTINGS_VALUES = { — ships will use this values while deciding to attack enemies

AGGRESSION_SETTINGS_VALUES = { — 飞船在决定攻击敌人时会使用此值

0,		— do not engage

0， — 不参与

0.5,	— low

0.5， — 低

0.9,	— medium

0.9， — 中等





2.0,	— high


2.0， — 高


10000,	— I am death incarnate!

10000， — 我是死亡的化身！

},



AGGRESION_MULTIPLIER_FOR_COMBAT = 1.2,				— ships are more aggresive in combat

AGGRESION_MULTIPLIER_FOR_COMBAT = 1.2， — 船只在战斗中更具侵略性



AGGRESSION_ARMOR_EFFICIENCY_MULTIPLIER = 1.0,		— armor to enemy piercing ratio is multiplied by this value, which will increase the strength of ships while considering them for aggression

AGGRESSION_ARMOR_EFFICIENCY_MULTIPLIER = 1.0， — 装甲与敌人的穿甲比率乘以该值，这将增加船只的强度，同时考虑它们的侵略性

AGGRESSION_MIN_ARMOR_EFFICIENCY = 0.5, — armor multiplier has a min and max caps while being factored in aggression

AGGRESSION_MIN_ARMOR_EFFICIENCY = 0.5， — 护甲乘数有最小上限和最大上限，同时被考虑在侵略性中

AGGRESSION_MAX_ARMOR_EFFICIENCY = 1.5, — armor multiplier has a min and max caps while being factored in aggression

AGGRESSION_MAX_ARMOR_EFFICIENCY = 1.5， — 护甲乘数有最小上限和最大上限，同时被考虑在侵略性中



AGGRESSION_LIGHT_GUN_EFFICIENCY_ON_LIGHT_SHIPS = 1.0, — ratio for scoring for different gun types against light ships

AGGRESSION_LIGHT_GUN_EFFICIENCY_ON_LIGHT_SHIPS = 1.0， — 针对轻型船只的不同火炮类型的得分比率

AGGRESSION_HEAVY_GUN_EFFICIENCY_ON_LIGHT_SHIPS = 0.25,— ratio for scoring for different gun types against light ships

AGGRESSION_HEAVY_GUN_EFFICIENCY_ON_LIGHT_SHIPS = 0.25，— 对轻型船只的不同火炮类型得分的比率

AGGRESSION_TORPEDO_EFFICIENCY_ON_LIGHT_SHIPS = 0.1, — ratio for scoring for different gun types against light ships

AGGRESSION_TORPEDO_EFFICIENCY_ON_LIGHT_SHIPS = 0.1， — 针对轻型船只的不同火炮类型的得分比率



AGGRESSION_LIGHT_GUN_EFFICIENCY_ON_HEAVY_SHIPS = 0.1, — ratio for scoring for different gun types against heavy ships

AGGRESSION_LIGHT_GUN_EFFICIENCY_ON_HEAVY_SHIPS = 0.1， — 针对重型船只的不同火炮类型的得分比率

AGGRESSION_HEAVY_GUN_EFFICIENCY_ON_HEAVY_SHIPS = 1.0, — ratio for scoring for different gun types against heavy ships

AGGRESSION_HEAVY_GUN_EFFICIENCY_ON_HEAVY_SHIPS = 1.0， — 针对重型船只的不同火炮类型的评分比率

AGGRESSION_TORPEDO_EFFICIENCY_ON_HEAVY_SHIPS = 1.1, — ratio for scoring for different gun types against heavy ships

AGGRESSION_TORPEDO_EFFICIENCY_ON_HEAVY_SHIPS = 1.1， — 针对重型船只的不同火炮类型的得分比率



AGGRESSION_CONVOY_STRENGTH_FACTOR = 0.3,			 — convoys in combat gets a penalty to their strength in aggression calculations

AGGRESSION_CONVOY_STRENGTH_FACTOR = 0.3， — 在战斗中，车队在侵略性计算中会受到其实力的惩罚



SUBMARINE_ESCAPE_RATIOS = { — subs will escape battle in convoy raid if there are enemies that can attack

SUBMARINE_ESCAPE_RATIOS = { — 如果有可以攻击的敌人，潜艇将在护航突袭中逃脱战斗

1000, — do not engage

1000， — 不参与

15, — low

15， — 低

3.0, — medium

3.0， — 中等





1.0, — high


1.0， — 高


0.1, — I am death incarnate!

0.1， — 我是死亡的化身！

},



MIN_REPAIR_FOR_JOINING_COMBATS = { — strikeforces/patrol forces will not join combats if they are not repaired enough

MIN_REPAIR_FOR_JOINING_COMBATS = { — 如果打击部队/巡逻部队没有得到足够的修复，他们就不会参加战斗

0.0,	— do not repair

0.0， — 不修复

0.5,	— low

0.5， — 低

0.7,	— medium

0.7， — 中等





0.9,	— high


0.9， — 高


},



ORG_COST_WHILE_MOVING = { — org cost while the ships are moving

ORG_COST_WHILE_MOVING = { — 飞船移动时的组织成本

0.3, — HOLD

0.3， — 保持

0.2, — PATROL

0.2， — 巡逻

0.25, — STRIKE FORCE

0.25， — 打击力

0.2, — CONVOY RAIDING

0.2， — 护航队突袭

0.2, — CONVOY ESCORT

0.2， — 护航

0.2, — MINES PLANTING

0.2， — 地雷种植

0.2, — MINES SWEEPING

0.2， — 扫雷

0.2, — TRAIN

0.2， — 火车

0.3, — RESERVE_FLEET

0.3， — RESERVE_FLEET





0.2, — NAVAL_INVASION_SUPPORT


0.2， — NAVAL_INVASION_SUPPORT


},



ORG_COST_WHILE_MOVING_IN_MISSION_ZONE = { — org cost while moving in mission zone

ORG_COST_WHILE_MOVING_IN_MISSION_ZONE = { — 在任务区中移动时的组织成本

0.0, — HOLD

0.0， — 保持

0.0, — PATROL

0.0， — 巡逻

0.0, — STRIKE FORCE

0.0， — 打击力

0.0, — CONVOY RAIDING

0.0， — 车队突袭

0.0, — CONVOY ESCORT

0.0， — 护航

0.0, — MINES PLANTING

0.0， — 地雷种植

0.0, — MINES SWEEPING

0.0， — 扫雷

0.0, — TRAIN

0.0， — 训练

0.0, — RESERVE_FLEET

0.0， — RESERVE_FLEET





0.0, — NAVAL_INVASION_SUPPORT


0.0， — NAVAL_INVASION_SUPPORT


},



MAX_ORG_ON_MANUAL_MOVE = 0.66,	— org will clamped to this ratio on manual move

MAX_ORG_ON_MANUAL_MOVE = 0.66， — 组织将在手动移动时保持此比率

MIN_ORG_ON_MANUAL_MOVE = 0.1,	— org will clamped to this ratio on manual move

MIN_ORG_ON_MANUAL_MOVE = 0.1， — 组织将在手动移动时固定到此比率



INITIAL_ALLOWED_DOCKYARD_RATIO_FOR_REPAIRS = 0.25,				— initially countries will allocate this ratio of dockyards for repairs

INITIAL_ALLOWED_DOCKYARD_RATIO_FOR_REPAIRS = 0.25，— 最初各国将分配此比例的船坞进行维修



MISSION_SUPREMACY_RATIOS = { — supremacy multipliers for different mission types

MISSION_SUPREMACY_RATIOS = { — 不同任务类型的霸权乘数

0.0, — HOLD

0.0， — 保持

1.0, — PATROL

1.0， — 巡逻

1.0, — STRIKE FORCE

1.0， — 打击力

0.5, — CONVOY RAIDING

0.5， — 车队突袭

0.5, — CONVOY ESCORT

0.5， — 护航

0.3, — MINES PLANTING

0.3， — 地雷种植

0.3, — MINES SWEEPING

0.3， — 扫雷

0.0, — TRAIN

0.0， — 训练

0.0, — RESERVE_FLEET

0.0， — RESERVE_FLEET





1.0, — NAVAL_INVASION_SUPPORT


1.0， — NAVAL_INVASION_SUPPORT


},



SUPREMACY_PER_SHIP_PER_MANPOWER = 0.05,							— supremacy of a ship is calculated using its IC, manpower and a base define

SUPREMACY_PER_SHIP_PER_MANPOWER = 0.05 — 船舶的霸权是使用其 IC、人力和基本定义计算的

SUPREMACY_PER_SHIP_PER_IC = 0.005,

SUPREMACY_PER_SHIP_PER_IC = 0.005，

SUPREMACY_PER_SHIP_BASE = 0,

SUPREMACY_PER_SHIP_BASE = 0，



NAVAL_MINES_IN_REGION_MAX = 1000.0,								— Max number of mines that can be layed by the ships. The value should be hidden from the user, as we present % so it’s an abstract value that should be used for balancing.

NAVAL_MINES_IN_REGION_MAX = 1000.0， — 船只可以布设的最大水雷数量。该值应该对用户隐藏，因为我们提供了 %，因此它是一个抽象值，应该用于平衡。

NAVAL_MINES_PLANTING_SPEED_MULT = 0.01,						— Value used to overall balance of the speed of planting naval mines

NAVAL_MINES_PLANTING_SPEED_MULT = 0.01， — 用于总体平衡埋设海军水雷速度的值

NAVAL_MINES_SWEEPING_SPEED_MULT = 0.009,						— Value used to overall balance of the speed of sweeping naval mines

NAVAL_MINES_SWEEPING_SPEED_MULT = 0.009， — 用于总体平衡海军扫雷速度的值

NAVAL_MINES_DECAY_AT_PEACE_TIME = 0.25,							— How fast mines are decaying in peace time. Planting mines in peace time may be exploitable, so it’s blocked atm. That’s why after war we should decay them too.

NAVAL_MINES_DECAY_AT_PEACE_TIME = 0.25， — 地雷在和平时期的衰变速度有多快。在和平时期埋设地雷可能是可利用的，因此它被阻止了 atm。这就是为什么战后我们也应该让它们腐烂。

NAVAL_MINES_SWEEPERS_REDUCTION_ON_PENALTY_EFFECT = 3.3,			— How much is the task force’s sweeping attribute reducing the penalty effect.

NAVAL_MINES_SWEEPERS_REDUCTION_ON_PENALTY_EFFECT = 3.3， — 特遣队的 sweeping 属性减少了多少惩罚效果。

NAVAL_MINES_INTEL_DIFF_FACTOR = 0.5,							— Better our decryption over enemy encryption will reduce the penalties from the enemy mines in the region. This value is a factor to be used for balancing.

NAVAL_MINES_INTEL_DIFF_FACTOR = 0.5， — 我们对敌方加密的解密效果更好，将减少该地区敌方地雷的惩罚。此值是用于平衡的因子。

NAVAL_MINES_NAVAL_SUPREMACY_FACTOR = 1.0,						— Factor for max amount of mines increasing naval supremacy

NAVAL_MINES_NAVAL_SUPREMACY_FACTOR = 1.0， — 增加海军优势的最大水雷数量的系数



ATTRITION_WHILE_MOVING_FACTOR = 1.5,							— attrition multiplier while moving & doing missions

ATTRITION_WHILE_MOVING_FACTOR = 1.5， — 移动和执行任务时的损耗乘数

ATTRITION_DAMAGE_ORG = 0.01,					 				— damage from attrition to Organisation (relative to max org)

ATTRITION_DAMAGE_ORG = 0.01， — 组织减员造成的伤害（相对于最大组织）

ATTRITION_DAMAGE_STR = 0.03,					 				— damage from attrition to str (relative to max str)

ATTRITION_DAMAGE_STR = 0.03， — str 损耗造成的伤害（相对于最大 str）

ATTRITION_STR_DAMAGE_CHANCE = 0.2,								— chance to get damaged at highest attrition

ATTRITION_STR_DAMAGE_CHANCE = 0.2， — 在最高损耗时受到伤害的几率



NAVAL_ACCIDENT_CHANCE_REDUCTION_ON_POTF = 0.01,					— Scale of the current chance for an accident to happen, applied for the pride of the fleet.

NAVAL_ACCIDENT_CHANCE_REDUCTION_ON_POTF = 0.01， — 当前事故发生几率的比例，适用于舰队的骄傲。

NAVAL_ACCIDENT_CRITICAL_HIT_CHANCE_REDUCTION_POTF = 0.01,		— Scale of the current chance for a critical hit when an accident happens, applied for the pride of the fleet.

NAVAL_ACCIDENT_CRITICAL_HIT_CHANCE_REDUCTION_POTF = 0.01， — 事故发生时当前暴击几率的比例，适用于舰队的骄傲。



NAVAL_MINES_ACCIDENT_CRITICAL_HIT_CHANCES = 0.14,				— If an accident happens, how likely it is to be a critical hit (caused by naval mines)

NAVAL_MINES_ACCIDENT_CRITICAL_HIT_CHANCES = 0.14， — 如果发生事故，造成暴击的可能性有多大（由海军水雷引起）

NAVAL_MINES_ACCIDENT_CRITICAL_HIT_DAMAGE_SCALE = 5.0,			— Scale the value below in case of critical hit (caused by naval mines)

NAVAL_MINES_ACCIDENT_CRITICAL_HIT_DAMAGE_SCALE = 5.0， — 在出现暴击（由海军水雷引起）的情况下，缩放下面的值

NAVAL_MINES_ACCIDENT_STRENGTH_LOSS = 50.0,						— Amount of strength loss when hit by naval mine

NAVAL_MINES_ACCIDENT_STRENGTH_LOSS = 50.0， — 被海军水雷击中时的力量损失量

NAVAL_MINES_ACCIDENT_ORG_LOSS_FACTOR = 0.5,						— Amount of strength loss when hit by naval mine

NAVAL_MINES_ACCIDENT_ORG_LOSS_FACTOR = 0.5， — 被海军水雷击中时的力量损失量



TRAINING_ACCIDENT_CHANCES = 0.02,						— Chances one ship get damage each hour while on training

TRAINING_ACCIDENT_CHANCES = 0.02， — 训练期间每小时有一艘船受到伤害的几率

TRAINING_ACCIDENT_CRITICAL_HIT_CHANCES = 0.3,					— If an accident happens, how likely it is to be a critical hit

TRAINING_ACCIDENT_CRITICAL_HIT_CHANCES = 0.3， — 如果发生事故，造成暴击的可能性有多大

TRAINING_ACCIDENT_CRITICAL_HIT_DAMAGE_SCALE = 4.0,				— Scale the value below in case of critical hit

TRAINING_ACCIDENT_CRITICAL_HIT_DAMAGE_SCALE = 4.0 — 在出现暴击时缩放以下值

TRAINING_ACCIDENT_STRENGTH_LOSS = 4.0,							— Amount of strength loss in a training accident

TRAINING_ACCIDENT_STRENGTH_LOSS = 4.0， — 训练事故中的力量损失量

TRAINING_ACCIDENT_STRENGTH_LOSS_FACTOR = 0.05,						— Amount of strength loss in a training accident, propotional to the maximum strength of the ship

TRAINING_ACCIDENT_STRENGTH_LOSS_FACTOR = 0.05， — 训练事故中的力量损失量，与飞船的最大强度成正比

TRAINING_ACCIDENT_ORG_LOSS_FACTOR = 0.3,						— Amount of current organization the ship lose

TRAINING_ACCIDENT_ORG_LOSS_FACTOR = 0.3， — 飞船当前损失的组织数量



ACCIDENTS_CHANCE_BALANCE_FACTOR = 0.04,							— General chance for naval accidents for balancing the gameplay.

ACCIDENTS_CHANCE_BALANCE_FACTOR = 0.04， — 平衡游戏玩法的海军事故的一般几率。



— The Formula: Min( TRAINING_MAX_DAILY_COUNTRY_EXP Ratio, TRAINING_DAILY_COUNTRY_EXP_FACTOR ( TRAINING_DAILY_COUNTRY_EXP_SHIP_RATIO_FACTOR * TrainingShipCount / CountryShipCount

— 公式：Min（ TRAINING_MAX_DAILY_COUNTRY_EXP Ratio， TRAINING_DAILY_COUNTRY_EXP_FACTOR （ TRAINING_DAILY_COUNTRY_EXP_SHIP_RATIO_FACTOR * TrainingShipCount / CountryShipCount

— + TRAINING_DAILY_COUNTRY_EXP_MANPOWER_FACTOR * Manpower + TRAINING_DAILY_COUNTRY_EXP_MANPOWER_RATIO_FACTOR * Manpower / CountryShipCount ) )

— + TRAINING_DAILY_COUNTRY_EXP_MANPOWER_FACTOR * 人力 + TRAINING_DAILY_COUNTRY_EXP_MANPOWER_RATIO_FACTOR * 人力 / CountryShipCount ） ）

TRAINING_EXPERIENCE_FACTOR = 0.3,								— Amount of exp each ship gain every 24h while training (before modifiers)

TRAINING_EXPERIENCE_FACTOR = 0.3， — 训练时每艘船每 24 小时获得的经验量（修正前）

TRAINING_DAILY_COUNTRY_EXP_FACTOR = 0.001,						— Factor used to scale the Daily Country Navy XP gain

TRAINING_DAILY_COUNTRY_EXP_FACTOR = 0.001， — 用于调整每日国家海军 XP 增益的系数

TRAINING_DAILY_COUNTRY_EXP_MANPOWER_FACTOR = 0.006,					— Factor used to scale the sum of the training manpower for the Daily Country Navy XP gain

TRAINING_DAILY_COUNTRY_EXP_MANPOWER_FACTOR = 0.006， — 用于调整每日国家海军 XP 增益的训练人力总和的系数

TRAINING_DAILY_COUNTRY_EXP_MANPOWER_RATIO_FACTOR = 0.01,				— Factor used to scale the sum of the manpower divided by the country’s number of ship for the Daily Country Navy XP gain

TRAINING_DAILY_COUNTRY_EXP_MANPOWER_RATIO_FACTOR = 0.01， — 用于调整每日国家海军 XP 增益的人力和除以该国舰船数量的系数

TRAINING_DAILY_COUNTRY_EXP_SHIP_RATIO_FACTOR = 300.0,					— Factor used to scale the ratio of training ships for the Daily Country Navy XP gain

TRAINING_DAILY_COUNTRY_EXP_SHIP_RATIO_FACTOR = 300.0， — 用于调整每日国家海军 XP 获取的训练舰比率的系数

TRAINING_MAX_DAILY_COUNTRY_EXP = 3.5,							— Maximum navy XP daily gain

TRAINING_MAX_DAILY_COUNTRY_EXP = 3.5， — 每日最大海军经验收益

TRAINING_MIN_STRENGTH = 0.1,									— if strength is less than this, the unit will not contribute to training and cant be damaged by training

TRAINING_MIN_STRENGTH = 0.1， — 如果力量小于此值，则该单位不会对训练做出贡献，也不会因训练而受到伤害



TRAINING_ORG = 0.2,												— max organization on traiaing mission

TRAINING_ORG = 0.2， — 执行任务的最大组织数



BASE_SPOTTING = 1,												— base spotting percentage for navy

BASE_SPOTTING = 1， — 海军的基地侦查百分比

BASE_SPOTTING_FROM_RADAR = 5,									— base spotting percentage that comes from full radar coverage

BASE_SPOTTING_FROM_RADAR = 5， — 来自完全雷达覆盖的基本侦测百分比

NAVY_SPOTTER_DETECTION_FACTOR = 0.1,							— multiplier for task forces’ detection value before logistic transform

NAVY_SPOTTER_DETECTION_FACTOR = 0.1， — Logistic 转换前特遣队检测值的乘数

BASE_SPOTTING_FROM_NAVY = 10,									— base spotting percentage that comes from task forces in area

BASE_SPOTTING_FROM_NAVY = 10， — 来自区域内特遣队的基地侦查百分比

AIR_SPOTTER_NORMALIZED_AIRWING_SIZE = 100,						— each plane will contribute 1/this of the airwing’s detection stat

AIR_SPOTTER_NORMALIZED_AIRWING_SIZE = 100， — 每架飞机将贡献 1/this 的机翼探测统计数据

AIR_SPOTTER_DETECTION_FACTOR = 0.025,							— multiplier for airwings’ detection value before logistic transform

AIR_SPOTTER_DETECTION_FACTOR = 0.025， — 逻辑转换前 Airwings 检测值的乘数

BASE_SPOTTING_FROM_AIR = 20,									— base spotting percentage that comes from airwings in area

BASE_SPOTTING_FROM_AIR = 20， — 来自区域内机翼的基本定位百分比

BASE_SPOTTING_FROM_DECRYPTION = 10,								— base spotting percentage that comes from decryption, can go negative (enemy decryption is subtracted)

BASE_SPOTTING_FROM_DECRYPTION = 10， — 来自解密的基础侦查百分比，可以变为负数（减去敌人的解密）

MIN_SPOTTING_PROGRESS = 0.01,									— Minimum spotting progress (in percent) per hourly tick

MIN_SPOTTING_PROGRESS = 0.01， — 每小时刻度的最小点样进度（以百分比表示）

AIR_MISSION_SPOTTING_FACTORS = {								— Multiplier for airwings’ spotting contribution per mission type

AIR_MISSION_SPOTTING_FACTORS = { — 每个任务类型的机翼侦察贡献的乘数





0.50, — AIR_SUPERIORITY


0.50， — AIR_SUPERIORITY


0, — CAS

0， — CAS





0.25, — INTERCEPTION


0.25， — 拦截


0, — STRATEGIC_BOMBER

0， — STRATEGIC_BOMBER





0.50, — NAVAL_BOMBER


0.50， — NAVAL_BOMBER


0, — DROP_NUKE

0， — DROP_NUKE

0, — PARADROP

0， — 降落伞





0.25, — NAVAL_KAMIKAZE


0.25， — NAVAL_KAMIKAZE


0, — PORT_STRIKE

0， — PORT_STRIKE

0, — ATTACK_LOGISTICS

0， — ATTACK_LOGISTICS

0, — AIR_SUPPLY

0， — AIR_SUPPLY

0, — TRAINING

0， — 训练

0.25, — NAVAL_MINES_PLANTING

0.25， — NAVAL_MINES_PLANTING

0.50, — NAVAL_MINES_SWEEPING

0.50， — NAVAL_MINES_SWEEPING

1.00, — RECON

1.00， — 侦察





1.50, — NAVAL_PATROL


1.50， — NAVAL_PATROL


},



MIN_HOURS_TO_SHUFFLE_NEWLY_ASSIGNED_PATROLS = 7 * 24,			— if a fleet has less patrol than it needs to cover all of it areas, it will shuffle the patrols around. it will wait this much hour before shuffling a task force to new area

MIN_HOURS_TO_SHUFFLE_NEWLY_ASSIGNED_PATROLS = 7 * 24， — 如果舰队的巡逻人数少于覆盖所有区域所需的数量，它将对巡逻进行随机排序。它会等这么长时间，然后再将特遣队转移到新区域

SPOTTING_ENEMY_SPOTTING_MULTIPLIER_FOR_RUNNING_AWAY = 0.80,		— enemy spotting is multiplied by this value to simulate running away

SPOTTING_ENEMY_SPOTTING_MULTIPLIER_FOR_RUNNING_AWAY = 0.80， — 敌人侦察乘以此值以模拟逃跑

SPOTTING_MULTIPLIER_FOR_SURFACE = 1.0,							— task force surface spotting value is multiplied by this and added to spotting percentage every hour

SPOTTING_MULTIPLIER_FOR_SURFACE = 1.0 — 特遣队表面定位值乘以该值，然后每小时添加到定位百分比

SPOTTING_MULTIPLIER_FOR_SUB = 1.0,								— task force sub spotting value is multiplied by this and added to spotting percentage every hour

SPOTTING_MULTIPLIER_FOR_SUB = 1.0， — 任务组子侦测值乘以此值，然后每小时加到侦测百分比

SPOTTING_SPEED_MULT_FOR_RUNNING_AWAY = 0.5,						— task forces that does not want to engage will reduce enemy spotting rate every hour by speed diff mult this ratio

SPOTTING_SPEED_MULT_FOR_RUNNING_AWAY = 0.5， — 不想交战的特遣队每小时都会降低敌人的侦察率，速度差乘这个比率

SPOTTING_SPEED_MULT_FOR_CATCHING_UP = 0.2,						— speed diff bonus rate that is added to spotting every hour

SPOTTING_SPEED_MULT_FOR_CATCHING_UP = 0.2， — 每小时添加到点样的速度差值奖励率

SPOTTING_MISSION_DETECTION_THRESHOLD_LOW = 10.0,					— value between 0 and 100 above which to show very coarse information about the spotted task force

SPOTTING_MISSION_DETECTION_THRESHOLD_LOW = 10.0， — 介于 0 和 100 之间的值，高于该值可显示有关已发现特遣队的非常粗略的信息

SPOTTING_MISSION_DETECTION_THRESHOLD_MEDIUM = 70.0,					— value between 0 and 100 above which to show coarse information about the spotted task force. Note: accurate information are shown when spotting reach 100.

SPOTTING_MISSION_DETECTION_THRESHOLD_MEDIUM = 70.0， — 介于 0 和 100 之间的值，大于该值可显示有关已发现任务组的粗略信息。注意：当点样达到 100 时会显示准确的信息。

NAVY_VISIBILITY_BONUS_ON_RETURN_FOR_REPAIR = 0.9,				— Multiplier for the surface/sub visiblity when the heavily damaged fleet is returning to the home base for reparation. 1.0 = no bonus. 0.0 = invisible.

NAVY_VISIBILITY_BONUS_ON_RETURN_FOR_REPAIR = 0.9， — 当严重受损的舰队返回基地进行赔偿时，表面/潜艇能见度的乘数。1.0 = 无奖金。0.0 = 不可见。

VISIBILITY_MULTIPLIER_FOR_SPOTTING = 0.1,						— multiplier for visibility stat

VISIBILITY_MULTIPLIER_FOR_SPOTTING = 0.1， — 能见度统计的乘数

INTEL_LEVEL_LOW_HALF_RANGE_PERCENTAGE = 10,							— Integer representing the maximum offset of the displayed value to the original, in percentage (divided by 100 in code). For spotting level “low”.

INTEL_LEVEL_LOW_HALF_RANGE_PERCENTAGE = 10 — 整数，表示显示值与原始值的最大偏移量（以百分比表示）（在代码中除以 100）。对于“低”的点样水平。

INTEL_LEVEL_MEDIUM_HALF_RANGE_PERCENTAGE = 5,							— Same as above but for the spotting level “medium”

INTEL_LEVEL_MEDIUM_HALF_RANGE_PERCENTAGE = 5， — 与上述相同，但对于点样级别 “medium”

INTEL_LEVEL_LOW_HALF_RANGE_MIN_SHIPS = 3,							— If the percentage of the value is lower than this, use this value instead. For spotting level “low”

INTEL_LEVEL_LOW_HALF_RANGE_MIN_SHIPS = 3 – 如果值的百分比低于此值，请改用此值。对于“低”点样水平

INTEL_LEVEL_LOW_HALF_RANGE_MIN_CAPITALS = 1,							— Same as above but for capital ships

INTEL_LEVEL_LOW_HALF_RANGE_MIN_CAPITALS = 1， — 同上，但适用于主力舰

INTEL_LEVEL_MEDIUM_HALF_RANGE_MIN_SHIPS = 1,							— If the percentage of the value is lower than this, use this value instead. For spotting level “medium”

INTEL_LEVEL_MEDIUM_HALF_RANGE_MIN_SHIPS = 1， – 如果值的百分比低于此值，请改用此值。对于“中等”的定位水平

INTEL_LEVEL_MEDIUM_HALF_RANGE_MIN_CAPITALS = 1,							— Same as above but for capital ships. NOTE: overriden to 0 if the total number of ships in the task force is less than four.

INTEL_LEVEL_MEDIUM_HALF_RANGE_MIN_CAPITALS = 1， — 同上，但适用于主力舰。注意：如果特遣队中的船只总数少于四艘，则覆盖为 0。

INTEL_LEVEL_LOW_STRENGTH_ESTIMATE_HALF_RANGE_PERCENTAGE = 20,					— Integer representing the maximum offset of the estimated enemy strength to the original, in percentage (divided by 100 in code). For spotting level “low”.

INTEL_LEVEL_LOW_STRENGTH_ESTIMATE_HALF_RANGE_PERCENTAGE = 20， — 整数，表示估计的敌人兵力相对于原始兵力的最大偏移量，以百分比表示（在代码中除以 100）。对于“低”的点样水平。

INTEL_LEVEL_MEDIUM_STRENGTH_ESTIMATE_HALF_RANGE_PERCENTAGE = 10,					— Same as above for spotting level “medium”

INTEL_LEVEL_MEDIUM_STRENGTH_ESTIMATE_HALF_RANGE_PERCENTAGE = 10， — 与上述“中等”点样级别相同

BASE_SPOTTING_SPEED = 0.0,										— daily base spotting speed

BASE_SPOTTING_SPEED = 0.0， — 每日基础侦察速度

BASE_ESCAPE_SPEED = 0.045,										— daily base escape speed (gained as percentagE)

BASE_ESCAPE_SPEED = 0.045， — 每日基础逃逸速度（以 percentagE 获得）

SPEED_TO_ESCAPE_SPEED = 0.95,									— ratio to converstion from ship speed to escape speed (divided by hundred)

SPEED_TO_ESCAPE_SPEED = 0.95， — 船速与逃逸速度的转换比率（除以百）

ESCAPE_SPEED_PER_COMBAT_DAY = 0.01,								— daily increase in escape speed during combat duration

ESCAPE_SPEED_PER_COMBAT_DAY = 0.01， — 战斗期间每日逃脱速度增加

MAX_ESCAPE_SPEED_FROM_COMBAT_DURATION = 0.15,					— max escape speed that will be gained from combat duration

MAX_ESCAPE_SPEED_FROM_COMBAT_DURATION = 0.15， — 战斗持续时间内获得的最大逃脱速度

ESCAPE_SPEED_SUB_BASE = 0.08,									— subs get faster escape speed. gets replaced by hidden version below if hidden

ESCAPE_SPEED_SUB_BASE = 0.08， — 潜艇获得更快的转义速度。如果隐藏，则替换为下面的隐藏版本

ESCAPE_SPEED_HIDDEN_SUB = 0.18,									— hidden subs get faster escape speed

ESCAPE_SPEED_HIDDEN_SUB = 0.18， — 隐藏的潜艇获得更快的逃脱速度



SUB_DETECTION_CHANCE_BASE = 5,									— to start spotting a submarine, a dice is rolled and checked if it succeeds this percentage. if not, that enemy sub force won’t be spotted on this tick

SUB_DETECTION_CHANCE_BASE = 5， — 要开始侦察潜艇，需要掷骰子并检查它是否成功了这个百分比。如果没有，则不会在此刻度上发现该敌方子部队

SUB_DETECTION_CHANCE_BASE_SPOTTING_EFFECT = 0.5,				— effect of base spotting for initial spotting of pure submarine forces. this along with next value is added together and rolled against a random to start spotting

SUB_DETECTION_CHANCE_BASE_SPOTTING_EFFECT = 0.5， — 基地定位对纯潜艇部队初始定位的影响。this 与 next value 一起相加并针对随机滚动以开始发现

SUB_DETECTION_CHANCE_SPOTTING_SPEED_EFFECT = 2.0,				— effect of spotting speed for initial spotting of pure submarine forces. this along with prev value is added together and rolled against a random to start spotting

SUB_DETECTION_CHANCE_SPOTTING_SPEED_EFFECT = 2.0， — 定位速度对纯潜艇力量初始定位的影响。这与 Prev 值一起相加并针对随机滚动以开始发现

SUB_DETECTION_CHANCE_BASE_SPOTTING_POW_EFFECT = 1.5,			— effect of spotting speed will be powered by this for initial spotting of pure submarine forces. this along with prev value is added together and rolled against a random to start spotting

SUB_DETECTION_CHANCE_BASE_SPOTTING_POW_EFFECT = 1.5， — 侦察速度的效果将由此驱动，用于对纯潜艇部队的初始侦察。这与 Prev 值一起相加并针对随机滚动以开始发现



BASE_CONVOY_SPOTTING_SPEED = 0.0,								— daily base spotting speed against convoys

BASE_CONVOY_SPOTTING_SPEED = 0.0， — 每日对付车队的基础侦察速度

BASE_UNIT_TRANSFER_SPOTTING_SPEED = 0.0,						— daily base spotting speed against unit trans

BASE_UNIT_TRANSFER_SPOTTING_SPEED = 0.0， — 针对单位交易的每日基础侦察速度

BASE_NAVAL_INVASION_SPOTTING_SPEED = 0.0,						— daily base spotting speed against unit transfers

BASE_NAVAL_INVASION_SPOTTING_SPEED = 0.0， — 针对单位转移的每日基础侦察速度



CONVOY_SPOTTING_SPEED_MULT = 1.0,								— spotting speed mult against convoys

CONVOY_SPOTTING_SPEED_MULT = 1.0， — 发现针对车队的速度乘数

UNIT_TRANSFER_SPOTTING_SPEED_MULT = 5.0,						— spotting speed mult against unit transfers

UNIT_TRANSFER_SPOTTING_SPEED_MULT = 5.0， — 针对单位转移的定位速度倍增

NAVAL_INVASION_SPOTTING_SPEED_MULT = 10.0,						— spotting speed mult against naval invasion armies

NAVAL_INVASION_SPOTTING_SPEED_MULT = 10.0， — 对海军入侵军队的侦察速度乘数



CONVOY_DETECTION_CHANCE_BASE = 4.12,							— regular convoy base chance detection percentage (if this fails, no detection is done on that tick)

CONVOY_DETECTION_CHANCE_BASE = 4.12， — 常规护航队基础几率检测百分比（如果失败，则不会对该刻进行检测）

BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING = 0.05,		— effect of base convoy spotting for initial spotting of regular convoys. this along with next value is added together and rolled a random once for every convoy to check for spotting

BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING = 0.05， — 基地护航队侦察对常规护航队初始侦察的影响。这个值和 next 值相加，并为每个车队随机滚动一次以检查是否发现

SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING = 0.50,		— effect of convoy spotting speed for initial spotting of regular convoys. this along with prev value is added together and rolled a random once for every convoy to check for spotting

SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING = 0.50， — 护航队侦察速度对常规护航队初始侦察的影响。这与 prev 值相加，并为每个车队随机滚动一次以检查是否发现

SPOTTING_MOD_FOR_CONVOY_COUNT = 0.2,							— a modifier for scaling the count of convoys on a parabolic curve (counvoy_count ^ SPOTTING_MOD_FOR_CONVOY_COUNT)

SPOTTING_MOD_FOR_CONVOY_COUNT = 0.2， — 用于缩放抛物线曲线上护航队数量的修饰符 （counvoy_count ^ SPOTTING_MOD_FOR_CONVOY_COUNT）



UNIT_TRANSFER_DETECTION_CHANCE_BASE = 8.0,							— unit transfer and naval invasion base chance detection percentage (if this fails, no detection is done on that tick)

UNIT_TRANSFER_DETECTION_CHANCE_BASE = 8.0， — 单位转移和海军入侵基地的几率检测百分比（如果失败，则不会在该刻进行检测）

BASE_SPOTTING_EFFECT_FOR_INITIAL_UNIT_TRANSFER_SPOTTING = 2.4,		— same as BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING, but for naval transfer convoys

BASE_SPOTTING_EFFECT_FOR_INITIAL_UNIT_TRANSFER_SPOTTING = 2.4，— 与 BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING 相同，但用于海军转移护航

SPOTTING_SPEED_EFFECT_FOR_INITIAL_UNIT_TRANSFER_SPOTTING = 0.12,	— same as SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING, but for naval transfer convoys

SPOTTING_SPEED_EFFECT_FOR_INITIAL_UNIT_TRANSFER_SPOTTING = 0.12 — 与 SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING 相同，但用于海军转移护航

BASE_SPOTTING_EFFECT_FOR_INITIAL_NAVAL_INVASION_SPOTTING = 2.4,		— same as BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING, but for naval invasion convoys

BASE_SPOTTING_EFFECT_FOR_INITIAL_NAVAL_INVASION_SPOTTING = 2.4 — 与 BASE_SPOTTING_EFFECT_FOR_INITIAL_CONVOY_SPOTTING 相同，但适用于海军入侵护航队

SPOTTING_SPEED_EFFECT_FOR_INITIAL_NAVAL_INVASION_SPOTTING = 0.12,	— same as SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING, but for naval invasion convoys

SPOTTING_SPEED_EFFECT_FOR_INITIAL_NAVAL_INVASION_SPOTTING = 0.12 — 与 SPOTTING_SPEED_EFFECT_FOR_INITIAL_CONVOY_SPOTTING 相同，但适用于海军入侵护航队



MIN_GUN_COOLDOWN = 0.1,											— minimum cooldown for a gun

MIN_GUN_COOLDOWN = 0.1， — 枪支的最短冷却时间

BASE_GUN_COOLDOWNS = { — number of hours for a gun to be ready after shooting

BASE_GUN_COOLDOWNS = { — 枪支射击后准备好的小时数

1.0,	— big guns

1.0， — 大枪

4.0,	— torpedoes

4.0， — 鱼雷





1.0,	— small guns


1.0， — 小型枪支


},



BASE_JOIN_COMBAT_HOURS						= 2,				— the taskforces that wants to join existing combats will wait for at least this amount

BASE_JOIN_COMBAT_HOURS = 2， — 想要加入现有战斗的特遣队将至少等待此数量

LOW_ORG_FACTOR_ON_JOIN_COMBAT_DURATION		= 4.0,				— low org of the ships will be factored in when a taskforce wants to join combat

LOW_ORG_FACTOR_ON_JOIN_COMBAT_DURATION = 4.0， — 当特遣队想要加入战斗时，将考虑舰船的低组织结构



BASE_POSITIONING												= 1.0,	— base value for positioning

BASE_POSITIONING = 1.0， — 定位的基值



RELATIVE_SURFACE_DETECTION_TO_POSITIONING_FACTOR				= 0.01,	— multiples the surface detection difference between two sides. the side with higher detection will get a bonus of this value

RELATIVE_SURFACE_DETECTION_TO_POSITIONING_FACTOR = 0.01， — 将两侧之间的表面检测差值乘以此。检测率较高的一方将获得此值的加成

MAX_POSITIONING_BONUS_FROM_SURFACE_DETECTION					= 0.0, — will clamp the bonus that you get from detection

MAX_POSITIONING_BONUS_FROM_SURFACE_DETECTION = 0.0， — 将限制您从检测中获得的加成



HIGHER_SHIP_RATIO_POSITIONING_PENALTY_FACTOR					= 0.25, — if one side has more ships than the other, that side will get this penalty for each +100% ship ratio it has

HIGHER_SHIP_RATIO_POSITIONING_PENALTY_FACTOR = 0.25， — 如果一方的战舰比另一方多，则该阵营每 +100% 的战舰比率都会受到此惩罚

MAX_POSITIONING_PENALTY_FROM_HIGHER_SHIP_RATIO					= 0.75, — maximum penalty to get from larger fleets

MAX_POSITIONING_PENALTY_FROM_HIGHER_SHIP_RATIO = 0.75， — 大型机群的最大惩罚

MIN_SHIPS_FOR_HIGHER_SHIP_RATIO_PENALTY = 0, — the minimum fleet size in ships that a fleet must be before having the large fleet penalty applied to them

MIN_SHIPS_FOR_HIGHER_SHIP_RATIO_PENALTY = 0， — 在对舰队施加大型舰队惩罚之前，舰队必须达到的最小舰队规模



HIGHER_CARRIER_RATIO_POSITIONING_PENALTY_FACTOR					= 0.2; — penalty if other side has stronger carrier air force

HIGHER_CARRIER_RATIO_POSITIONING_PENALTY_FACTOR = 0.2;— 如果另一方拥有更强大的航母空军，则受到处罚

MAX_CARRIER_RATIO_POSITIONING_PENALTY_FACTOR 					= 0.2; — max penalty from stronger carrier air force

MAX_CARRIER_RATIO_POSITIONING_PENALTY_FACTOR = 0.2;— 来自更强大的航母空军的最大惩罚



POSITIONING_PENALTY_FOR_SHIPS_JOINED_COMBAT_AFTER_IT_STARTS		= 0.01, — each ship that joins the combat will have this penalty to be added into positioning

POSITIONING_PENALTY_FOR_SHIPS_JOINED_COMBAT_AFTER_IT_STARTS = 0.01， — 每艘加入战斗的船只都将有此惩罚添加到定位中

MAX_POSITIONING_PENALTY_FOR_NEWLY_JOINED_SHIPS 					= 0.25, — the accumulated penalty from new ships will be clamped to this value

MAX_POSITIONING_PENALTY_FOR_NEWLY_JOINED_SHIPS = 0.25， — 新船的累积惩罚将被限制到这个值

POSITIONING_PENALTY_HOURLY_DECAY_FOR_NEWLY_JOINED_SHIPS			= 0.05,— the accumulated penalty from new ships will decay hourly by this value

POSITIONING_PENALTY_HOURLY_DECAY_FOR_NEWLY_JOINED_SHIPS = 0.05，— 新船的累积惩罚将每小时衰减一次。



DAMAGE_PENALTY_ON_MINIMUM_POSITIONING 							= 0.5,	— damage penalty at 0% positioning

DAMAGE_PENALTY_ON_MINIMUM_POSITIONING = 0.5， — 0% 定位时的伤害惩罚

SCREENING_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING				= 0.5, — screening efficiency (screen to capital ratio) at 0% positioning

SCREENING_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING = 0.5 — 0% 定位时的筛选效率（筛选资本比率）

AA_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING					= 0.7, — AA penalty at 0% positioning

AA_EFFICIENCY_PENALTY_ON_MINIMUM_POSITIONING = 0.7， — 0% 定位时的 AA 罚分

SUBMARINE_REVEAL_ON_MINIMUM_POSITIONING = 2.0, — submarine reveal change on 0% positioning

SUBMARINE_REVEAL_ON_MINIMUM_POSITIONING = 2.0， — 0% 定位时潜艇显示变化



SHIP_TO_FLEET_ANTI_AIR_RATIO									= 0.25,	— total sum of fleet’s anti air will be multiplied with this ratio and added to calculations anti-air of individual ships while air damage reduction

SHIP_TO_FLEET_ANTI_AIR_RATIO = 0.25， — 舰队的防空总和将乘以该比率，并添加到单个船只的防空计算中，同时减少空中伤害



ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE								= 0.225,	— received air damage is calculated using following: 1 - ( (ship_anti_air + fleet_anti_air SHIP_TO_FLEET_ANTI_AIR_RATIO )^ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE ) ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE

ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE = 0.225， — 受到的空伤害使用以下公式计算： 1 - （ （ship_anti_air + fleet_anti_air SHIP_TO_FLEET_ANTI_AIR_RATIO ）^ANTI_AIR_POW_ON_INCOMING_AIR_DAMAGE ） ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE

ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE							= 0.18,

ANTI_AIR_MULT_ON_INCOMING_AIR_DAMAGE = 0.18，



MAX_ANTI_AIR_REDUCTION_EFFECT_ON_INCOMING_AIR_DAMAGE 			= 0.75,	— damage reduction for incoming air attacks is clamped to this value at maximum.

MAX_ANTI_AIR_REDUCTION_EFFECT_ON_INCOMING_AIR_DAMAGE = 0.75， — 来袭空袭的伤害减免被限制在最大值上。



CHANCE_TO_DAMAGE_PART_ON_CRITICAL_HIT							= 0.1,	— the game will roll between 0-1 and will damage a random part if below this val on naval critical hits

CHANCE_TO_DAMAGE_PART_ON_CRITICAL_HIT = 0.1， — 游戏将在 0-1 之间滚动，如果海军暴击低于此值，则会对随机部分造成伤害

CHANCE_TO_DAMAGE_PART_ON_CRITICAL_HIT_FROM_AIR					= 0.1,	— the game will roll between 0-1 and will damage a random part if below this val on air critical hits

CHANCE_TO_DAMAGE_PART_ON_CRITICAL_HIT_FROM_AIR = 0.1， — 游戏将在 0-1 之间滚动，如果低于此值，则在空中暴击时会损坏随机部分



SCREEN_RATIO_FOR_FULL_SCREENING_FOR_CAPITALS 					= 3.0,	— this screen ratio to num capital/carriers is needed for full screening beyond screen line

SCREEN_RATIO_FOR_FULL_SCREENING_FOR_CAPITALS = 3.0， — 在筛选线之外进行全面筛选时，需要此筛选比率与资本/载体数

SCREEN_RATIO_FOR_FULL_SCREENING_FOR_CONVOYS 					= 0.5,	— this screen ratio to num convoys is needed for full screening beyond screen line

SCREEN_RATIO_FOR_FULL_SCREENING_FOR_CONVOYS = 0.5 — 在筛网线之外进行全面筛选时，需要此筛选与数量

CAPITAL_RATIO_FOR_FULL_SCREENING_FOR_CARRIERS 					= 1.0, — this capital ratio to num carriers is needed for full screening beyond screen line

CAPITAL_RATIO_FOR_FULL_SCREENING_FOR_CARRIERS = 1.0 — 在筛选线之外进行全面筛选时，需要此资本与 NUM 承运商的比率

CAPITAL_RATIO_FOR_FULL_SCREENING_FOR_CONVOYS 					= 0.25, — this capital ratio to num convoys is needed for full screening beyond screen line

CAPITAL_RATIO_FOR_FULL_SCREENING_FOR_CONVOYS = 0.25 — 此资本比率与 NUM 护航队的比率是筛查线外全面筛查所必需的



TASK_FORCE_ROLE_TO_INSIGNIA = {								— define the index of the insignia to use for a task force designed for a specific role

TASK_FORCE_ROLE_TO_INSIGNIA = { — 定义用于为特定角色设计的特遣队的徽章索引

6,	— Role undefined

6， — 角色 undefined

15,	— Wolfpack

15， — 狼群

22,	— Carrier task force

22， — 航母特遣队

26,	— Surface action group

26 — Surface作组

16,	— Mine layers

16， — 地雷层

17,	— Mine sweepers

17， — 扫雷车

29,	— Patrol task force

29， — 巡逻特遣队

1,	— Convoy escort

1， — 护航护航

},



— NOTE: you can see the effect of changing the values down below by running the command tfria with a task force selected

— 注意：您可以通过在选择任务组的情况下运行命令 tfria 来查看更改下面值的效果

MIN_SHIP_COUNT_FOR_TASK_FORCE_ROLE_ASSIGNMENT = 4,					— define the minimum number of ship that should be in a task force for it to be considered a patrol or an escort task force (used to the insignia assignment, see TASK_FORCE_ROLE_TO_INSIGNIA)

MIN_SHIP_COUNT_FOR_TASK_FORCE_ROLE_ASSIGNMENT = 4， — 定义特遣队中应被视为巡逻或护航特遣队的最小船只数量（用于徽章分配，见TASK_FORCE_ROLE_TO_INSIGNIA）

SURFACE_DETECTION_STAT_FOR_SHIP_TO_BE_PATROL = 16,					— amount of surface detection required for a ship to be considered as part of a patrol task force

SURFACE_DETECTION_STAT_FOR_SHIP_TO_BE_PATROL = 16， — 船舶被视为巡逻特遣队一部分所需的表面探测量

DEPTH_CHARGE_STAT_FOR_SHIP_TO_BE_SUB_HUNTER = 15,					— amount of depth charge required for a ship to be considred a sub hunter and so good for convoy escort

DEPTH_CHARGE_STAT_FOR_SHIP_TO_BE_SUB_HUNTER = 15 — 一艘船需要一枚深水炸弹，才能成为潜艇猎人，因此非常适合护航

SUB_DETECTION_STAT_FOR_SHIP_TO_BE_SUB_HUNTER = 2,					— amount of sub detection required for a ship to be considered a sub hunter

SUB_DETECTION_STAT_FOR_SHIP_TO_BE_SUB_HUNTER = 2， — 将船舶视为潜艇猎手所需的潜艇检测量



HEAVY_GUN_ATTACK_TO_SHORE_BOMBARDMENT							= 0.1, — heavy gun attack value is divided by this value * 100 and added to shore bombardment modifier

HEAVY_GUN_ATTACK_TO_SHORE_BOMBARDMENT = 0.1， — 重炮攻击值除以此值 * 100，并添加到岸上轰炸修改器

LIGHT_GUN_ATTACK_TO_SHORE_BOMBARDMENT							= 0.05, — light gun attack value is divided by this value * 100 and added to shore bombardment modifier

LIGHT_GUN_ATTACK_TO_SHORE_BOMBARDMENT = 0.05， — 轻枪攻击值除以该值 * 100，并添加到岸上轰炸修正中



GUN_HIT_PROFILES = { — hit profiles for guns, if target ih profile is lower the gun will have lower accuracy

GUN_HIT_PROFILES = { — 枪支的命中曲线，如果目标 IH 曲线较低，则枪支的精度较低

80.0,	— big guns

80.0， — 大炮

100.0,	— torpedoes

100.0， — 鱼雷





45.0,	— small guns


45.0， — 小型枪支


},



DEPTH_CHARGES_HIT_CHANCE_MULT 									= 1.1, 		— multiplies hit chance of small guns

DEPTH_CHARGES_HIT_CHANCE_MULT = 1.1， — 乘以小型枪械的命中率

DEPTH_CHARGES_DAMAGE_MULT 										= 0.7, 		— multiplies damage of depth charges

DEPTH_CHARGES_DAMAGE_MULT = 0.7， — 深水炸弹的伤害乘以

DEPTH_CHARGES_HIT_PROFILE 										= 100.0,	— hit profile for depth charges

DEPTH_CHARGES_HIT_PROFILE = 100.0， — 深水炸弹的命中曲线



CONVOY_HIT_PROFILE												= 85.0, 	— convoys has this contant hit profile

CONVOY_HIT_PROFILE = 85.0， — 护航具有此持续命中配置文件

HIT_PROFILE_MULT 												= 100.0, 	— multiplies hit profile of every ship

HIT_PROFILE_MULT = 100.0， — 乘以每艘船的命中曲线

HIT_PROFILE_SPEED_FACTOR										= 0.5,		— factors speed value when determining it profile (Vis HIT_PROFILE_MULT Ship Hit Profile Mult)

HIT_PROFILE_SPEED_FACTOR = 0.5 — 在确定其配置文件时考虑速度值（Vis HIT_PROFILE_MULT Ship Hit Profile Mult）

HIT_PROFILE_SPEED_BASE											= 20,		— Base value added to hitprofile speed calulation

HIT_PROFILE_SPEED_BASE = 20 — 添加到 hitprofile 速度计算的基础值



CONVOY_RAID_MAX_REGION_TO_TASKFORCE_RATIO						= 1.5,		— each taskforce in convoy raid mission can at most cover this many regions without losing efficiency

CONVOY_RAID_MAX_REGION_TO_TASKFORCE_RATIO = 1.5， — 护航突袭任务中的每个特遣队最多可以覆盖这么多区域而不会降低效率

CONVOY_DEFENSE_MAX_CONVOY_TO_SHIP_RATIO							= 12.0,		— each ship in convoy defense mission can at most cover this many convoys without losing efficiency

CONVOY_DEFENSE_MAX_CONVOY_TO_SHIP_RATIO = 12.0， — 护航防御任务中的每艘船最多可以覆盖这么多护航船队而不会降低效率

CONVOY_DEFENSE_MAX_REGION_TO_TASKFORCE_RATIO					= 5.0,		— each taskforce in convoy defense mission can at most cover this many regions without losing efficiency

CONVOY_DEFENSE_MAX_REGION_TO_TASKFORCE_RATIO = 5.0， — 护航防御任务中的每个特遣队最多可以覆盖这么多区域而不会降低效率



MINE_SWEEPING_SUPREMACY_EFFICIENCY_MAX_REGION_TO_TASKFORCE_RATIO = 1.0,		— mine missions will get lower supremacies if they are assigned more regions than this

MINE_SWEEPING_SUPREMACY_EFFICIENCY_MAX_REGION_TO_TASKFORCE_RATIO = 1.0， — 如果为采矿任务分配的区域超过此数量，则采矿任务将获得较低的霸权

MINE_PLANTING_SUPREMACY_EFFICIENCY_MAX_REGION_TO_TASKFORCE_RATIO = 1.0,		— mine missions will get lower supremacies if they are assigned more regions than this

MINE_PLANTING_SUPREMACY_EFFICIENCY_MAX_REGION_TO_TASKFORCE_RATIO = 1.0， — 如果为采矿任务分配的区域超过此数量，则采矿任务将获得较低的霸权



EFFICIENCY_TO_JOIN_COMBAT_RATIO_PENALTY							= 1.0,		— at lower efficiencies less ships will be able to join combat

EFFICIENCY_TO_JOIN_COMBAT_RATIO_PENALTY = 1.0， — 效率较低时，能够加入战斗的船只更少

EFFICIENCY_TO_TIME_TO_JOIN_COMBAT_PENALTY 						= 100.0,	— at lower efficiencies less time to join combat hour will be increased

EFFICIENCY_TO_TIME_TO_JOIN_COMBAT_PENALTY = 100.0， — 效率较低时，加入战斗时间将增加



COORDINATION_EFFECT_ON_CONVOY_RAID_EFFICIENCY					= 1.5,		— coordination will increase the number of areas you can cover in convoy raid

COORDINATION_EFFECT_ON_CONVOY_RAID_EFFICIENCY = 1.5， — 协调将增加您在护航突袭中可以覆盖的区域数量

COORDINATION_EFFECT_ON_CONVOY_DEFENSE_EFFICIENCY				= 1.5,		— coordination will increase the number of convoys you can cover in convoy defense

COORDINATION_EFFECT_ON_CONVOY_DEFENSE_EFFICIENCY = 1.5， — 协调将增加您在车队防御中可以覆盖的车队数量



COORDINATION_EFFECT_ON_TIME_TO_JOIN_COMBAT						= 1.0,		— coordination will reduce the time to join combat penalties

COORDINATION_EFFECT_ON_TIME_TO_JOIN_COMBAT = 1.0， — 协调将减少加入 COMBAT PENALTIES 的时间

COORDINATION_EFFECT_ON_MINE_LAYING_SPEED 						= 0.5, — affect of coordination modifier in mine laying speed

COORDINATION_EFFECT_ON_MINE_LAYING_SPEED = 0.5， — 配位修饰符对布雷速度的影响

COORDINATION_EFFECT_ON_MINE_SWEEPING_SPEED 						= 0.5, — affect of coordination modifier in mine sweeping speed

COORDINATION_EFFECT_ON_MINE_SWEEPING_SPEED = 0.5， — 配位修饰符对扫雷速度的影响

COORDINATION_EFFECT_ON_PATROL_SPOTTING 							= 1.0,		— affect of coordination modifier in spotting speed

COORDINATION_EFFECT_ON_PATROL_SPOTTING = 1.0， — 配位修饰符对定位速度的影响



COORDINATION_EFFECT_ON_MINE_SWEEPING_SUPREMACY_EFFICIENCY		= 1.0, — mine missions supremacy can be buffed by coordination

COORDINATION_EFFECT_ON_MINE_SWEEPING_SUPREMACY_EFFICIENCY = 1.0， — 地雷任务霸权可以通过协调来增强

COORDINATION_EFFECT_ON_MINE_PLANTING_SUPREMACY_EFFICIENCY		= 1.0, — mine missions supremacy can be buffed by coordination

COORDINATION_EFFECT_ON_MINE_PLANTING_SUPREMACY_EFFICIENCY = 1.0， — 地雷任务霸权可以通过协调来增强



MISSION_EFFICIENCY_POW_FACTOR									= 1.7,		— mission efficiencies will be powered up by this to further penalize low efficiencies

MISSION_EFFICIENCY_POW_FACTOR = 1.7， — 任务效率将因此而提高，以进一步惩罚低效率



NAVAL_COMBAT_SUB_DETECTION_FACTOR = 1.0, — balance value for sub detection in combat by ships

NAVAL_COMBAT_SUB_DETECTION_FACTOR = 1.0， — 舰船在战斗中子探测的平衡值

SUBMARINE_HIDE_TIMEOUT 											= 20,		— Amount of in-game-hours that takes the submarine (with position unrevealed), to hide.

SUBMARINE_HIDE_TIMEOUT = 20， — 潜艇（位置未显示）隐藏的游戏内小时数。

SUBMARINE_REVEALED_TIMEOUT 										= 16,		— Amount of in-game-hours that makes the submarine visible if it is on the defender side.

SUBMARINE_REVEALED_TIMEOUT = 16， — 如果潜艇在防守方，则使潜艇可见的游戏内小时数。

SUBMARINE_REVEAL_BASE_CHANCE 									= 11,		— Base factor for submarine detection. It’s modified by the difference of a spotter’s submarines detection vs submarine visibility. Use this variable for game balancing. setting this too low will cause bad spotting issues.

SUBMARINE_REVEAL_BASE_CHANCE = 11 — 潜艇探测的基本因子。它是由观察员的潜艇探测与潜艇能见度的不同而修改的。使用此变量进行游戏平衡。将此值设置得太低将导致 Bad Spotting 问题。

SUBMARINE_REVEAL_POW 											= 3.0,		— A scaling factor that is applied to the reveal chance in order to make large differences in detection vs visibility more pronounced

SUBMARINE_REVEAL_POW = 3.0 — 应用于显示几率的比例因子，以便使检测与可见性的巨大差异更加明显

SUBMARINE_BASE_TORPEDO_REVEAL_CHANCE 							= 0.035,		— Chance of a submarine being revealed when it fires. 1.0 is 100%. this chance is then multiplied with modifier created by comparing firer’s visibiility and target’s detection

SUBMARINE_BASE_TORPEDO_REVEAL_CHANCE = 0.035， — 潜艇开火时暴露的几率。1.0 为 100%。然后，这个几率乘以通过比较 Firer 的可见度和目标的检测而创建的修饰符



MAX_NUM_HOURS_TO_WAIT_AT_ALLY_DOCKYARDS_FOR_REPAIRS 			= 48,		— taskforces will wait at most this amount of hours in ally bases for repairs before switching to another base for repairs

MAX_NUM_HOURS_TO_WAIT_AT_ALLY_DOCKYARDS_FOR_REPAIRS = 48， — 特遣队在切换到另一个基地进行维修之前，最多会在盟友基地等待这个小时进行维修



COMBAT_RESULT_PRIORITY_THRESHOLDS = { 										— the game will use this thresholds to define importance of a naval combat result. it will use the highest level that has higher threshold than the amount of production lost in combat

COMBAT_RESULT_PRIORITY_THRESHOLDS = { — 游戏将使用此阈值来定义海战结果的重要性。它将使用阈值高于战斗中产量损失的最高级别

0, 		— low (keep at zero)

0， — 低 （保持为零）

4000, — medium

4000， — 中等

20000, — high

20000， — 高

},

COMBAT_RESULT_PRIORITY_DAY_TO_LIVE = { 										— the game will delete the combat results after some duration depending on its importance

COMBAT_RESULT_PRIORITY_DAY_TO_LIVE = { — 游戏将在一段时间后删除战斗结果，具体取决于其重要性

7,

30,

120,

},

NAVAL_ACCIDENTS_DAYS_TO_LIVE = 120,

NAVAL_ACCIDENTS_DAYS_TO_LIVE = 120，



NAVAL_MINE_DANGER_RATIOS = {

NAVAL_MINE_DANGER_RATIOS = {

0.1,		— not owned

0.1， — 未拥有

0.5,		— near controlled

0.5， — 近控

1.0,		— near owned

1.0， — 接近拥有

1.0,		— controlled

1.0， — 受控





3.0,		— owned


3.0， — 拥有


},

NAVAL_MINE_DANGER_TRIGGER_MIN = 0.0,

NAVAL_MINE_DANGER_TRIGGER_MIN = 0.0，

NAVAL_MINE_DANGER_TRIGGER_MAX = 2.0,

NAVAL_MINE_DANGER_TRIGGER_MAX = 2.0，



NAVAL_CONVOY_DANGER_RATIOS = {

NAVAL_CONVOY_DANGER_RATIOS = {

0.10,		— not owned

0.10， — 无所有权

0.10,		— near controlled

0.10， — 近控

0.10,		— near owned

0.10， — 接近拥有

0.15,		— controlled

0.15， — 受控





0.15,		— owned


0.15， — 拥有


},

NAVAL_CONVOY_DANGER_TRIGGER_MIN = 0.0,

NAVAL_CONVOY_DANGER_TRIGGER_MIN = 0.0，

NAVAL_CONVOY_DANGER_TRIGGER_MAX = 100.0,

NAVAL_CONVOY_DANGER_TRIGGER_MAX = 100.0，



— those two work together in the formula f(x) = Y(x/(x+X)) where Y is MAX and X is SLOPE

— 这两者在公式 f（x） = Y（x/（x+X）） 中一起工作，其中 Y 是 MAX，X 是 SLOPE

NAVAL_COMBAT_AIR_SUB_DETECTION_MAX = 10.0,

NAVAL_COMBAT_AIR_SUB_DETECTION_MAX = 10.0，

NAVAL_COMBAT_AIR_SUB_DETECTION_SLOPE = 10.0,						— lower means sharper curve (ramps up very fast, then flatten out very fast). Must be >0

NAVAL_COMBAT_AIR_SUB_DETECTION_SLOPE = 10.0 — 越低意味着曲线越陡峭（上升得非常快，然后很快变平）。必须为 >0



NAVAL_COMBAT_AIR_SUB_DETECTION_EXTERNAL_FACTOR = 1.0,					— Factor applied to the stats of external air planes

NAVAL_COMBAT_AIR_SUB_DETECTION_EXTERNAL_FACTOR = 1.0 — 应用于外部飞机统计数据的系数

NAVAL_COMBAT_AIR_SUB_DETECTION_INTERNAL_EFFICIENCY_FACTOR = 1.0,			— Factor of Carrier’s sortie efficiency on the stats bellow

NAVAL_COMBAT_AIR_SUB_DETECTION_INTERNAL_EFFICIENCY_FACTOR = 1.0， — 航母出击效率的系数

NAVAL_COMBAT_AIR_AGILITY_TO_SUB_DETECTION = 0.0,					— Factor to apply to the agility of air planes active in a naval combat to deduce their contibution to sub detection

NAVAL_COMBAT_AIR_AGILITY_TO_SUB_DETECTION = 0.0， — 应用于海战中活跃的飞机的敏捷性的系数，以推断它们对潜艇检测的贡献

NAVAL_COMBAT_AIR_STRIKE_ATTACK_TO_SUB_DETECTION = 0.0,					— Same, but for strike attack (aka naval attack)

NAVAL_COMBAT_AIR_STRIKE_ATTACK_TO_SUB_DETECTION = 0.0， — 相同，但用于打击攻击（又名海军攻击）

NAVAL_COMBAT_AIR_STRIKE_TARGETING_TO_SUB_DETECTION = 0.0,				— Same, but for strike targeting (aka naval targeting)

NAVAL_COMBAT_AIR_STRIKE_TARGETING_TO_SUB_DETECTION = 0.0， — 相同，但用于打击目标（又名海军目标）

NAVAL_COMBAT_AIR_MAX_SPEED_TO_SUB_DETECTION = 0.0,					— Same, but for Max Speed

NAVAL_COMBAT_AIR_MAX_SPEED_TO_SUB_DETECTION = 0.0， — 相同，但对于最大速度

NAVAL_COMBAT_AIR_PLANE_COUNT_TO_SUB_DETECTION = 1.0,					— Factor applied to the number of active plane in a naval combat to deduce their contribution to sub detection

NAVAL_COMBAT_AIR_PLANE_COUNT_TO_SUB_DETECTION = 1.0， — 应用于海战中活动飞机数量的系数，用于推断它们对潜艇检测的贡献

NAVAL_COMBAT_AIR_SUB_DETECTION_DECAY_RATE = 1.0,					— Factor to decay the value of sub detection contributed by planes on the last hour. Note: the maximum value between the decayed value and the newly computed one is taken into account. A decay rate of 1 means that nothing is carried over, the previous value is zerod out. A decay rate of 0 means that the previous value is carried over as is.

NAVAL_COMBAT_AIR_SUB_DETECTION_DECAY_RATE = 1.0， — 衰减飞机在过去一小时内贡献的子检测值的因子。注意：考虑衰减值和新计算值之间的最大值。衰减率为 1 表示没有结转任何内容，前一个值被归零。衰减率为 0 表示前一个值按原样保留。

NAVAL_COMBAT_AIR_SUB_DETECTION_FACTOR = 0.0,						— A global factor that applies after all others, right before the sub detection contributed by plane is added to the global sub detection of a combatant

NAVAL_COMBAT_AIR_SUB_DETECTION_FACTOR = 0.0， — 在飞机提供的潜艇检测被添加到战斗员的全局潜艇检测之前，在所有其他因子之后应用



NAVAL_COMBAT_AIR_SUB_TARGET_SCORE = 10, — scoring for target picking for planes inside naval combat, one define per ship typ

NAVAL_COMBAT_AIR_SUB_TARGET_SCORE = 10， — 海战中飞机的目标选择评分，每种舰船类型一个定义

NAVAL_COMBAT_AIR_CAPITAL_TARGET_SCORE = 50,

NAVAL_COMBAT_AIR_CAPITAL_TARGET_SCORE = 50，

NAVAL_COMBAT_AIR_CARRIER_TARGET_SCORE = 200,

NAVAL_COMBAT_AIR_CARRIER_TARGET_SCORE = 200，

NAVAL_COMBAT_AIR_CONVOY_TARGET_SCORE = 1.0,

NAVAL_COMBAT_AIR_CONVOY_TARGET_SCORE = 1.0，

NAVAL_COMBAT_AIR_STRENGTH_TARGET_SCORE = 5, — how much score factor from low health (scales between 0->this number)

NAVAL_COMBAT_AIR_STRENGTH_TARGET_SCORE = 5， — 低生命值的分数系数（介于 0->此数字之间）

NAVAL_COMBAT_AIR_LOW_AA_TARGET_SCORE = 5, — how much score factor from low AA guns (scales between 0->this number)

NAVAL_COMBAT_AIR_LOW_AA_TARGET_SCORE = 5， — 低射炮的得分系数（范围在 0->这个数字之间）



NEW_NAVY_LEADER_LEVEL_CHANCES = {									— chances for new navy leaders to start at a given level

NEW_NAVY_LEADER_LEVEL_CHANCES = { — 新海军领导人从给定级别开始的机会

0.95, — 95% for level one

0.95， — 1 级为 95%

0.05 — 5% for level two

0.05 — 2 级为 5%

— 0% for level three to ten

— 3 至 10 级为 0%

},



NAVY_PIERCING_THRESHOLDS = {					— Our piercing / their armor must be this value to deal damage fraction equal to the index in the array below [higher number = higher penetration]. If armor is 0, 1.00 will be returned.

NAVY_PIERCING_THRESHOLDS = { — 我们的穿甲 / 他们的装甲必须是这个值，才能造成等于下面数组中索引的伤害分数 [更高的数字 = 更高的穿透力]。如果 armor 为 0，则返回 1.00。

2.00,

1.00,

0.75,

0.50,





0.10,


0.00 —there isn’t much point setting this higher than 0

0.00 — 没有太多点将其设置为高于 0

},



NAVY_PIERCING_THRESHOLD_CRITICAL_VALUES = {	— 0 armor will always receive maximum damage (so add overmatching at your own peril). the system expects at least 2 values, with no upper limit.

NAVY_PIERCING_THRESHOLD_CRITICAL_VALUES = { — 0 护甲总是会受到最大伤害（所以加上过度匹配，风险自负）。系统至少需要 2 个值，没有上限。

2.00,

1.00,

0.75,

0.50,





0.10,


0.00 — For criticals, you could reduce crit chance unlike damage in army combat, but we do not for now.

0.00 — 对于暴击，你可以降低暴击率，这与军队战斗中的伤害不同，但我们目前不支持。

},



NAVY_PIERCING_THRESHOLD_DAMAGE_VALUES = {	— 0 armor will always receive maximum damage (so add overmatching at your own peril). the system expects at least 2 values, with no upper limit.

NAVY_PIERCING_THRESHOLD_DAMAGE_VALUES = { — 0 护甲总是会受到最大伤害（所以加上过度匹配，风险自负）。系统至少需要 2 个值，没有上限。

1.00,

1.00,

0.70,

0.40,

0.30,





0.10 —


},



— all of these NEED to be the same size!!!!

— 所有这些都需要具有相同的大小!!!



},



NRailwayGun = {

NRailwayGun = {

RAILWAY_GUN_POSSIBLE_RANGES = { 30, 15, 45 },	— Possible values for railway gun range in pixel.

RAILWAY_GUN_POSSIBLE_RANGES = { 30， 15， 45 }， — 铁路炮射程的可能值（以像素为单位）。

— For optimization reasons, they are listed here and equipment DB must use one of those.

— 出于优化原因，它们在此处列出，设备 DB 必须使用其中之一。

— when writing railway gun in equipment, use the index in this array

— 在 Equipment 中写入 railway gun 时，使用此数组中的索引

— the first value in array is the default value

— 数组中的第一个值是默认值

ATTACK_TO_FORTS_MODIFIER_FACTOR = 1.333,		— Forts modifier is calculated by multiplying railway gun attack value with this and dividing by 100

ATTACK_TO_FORTS_MODIFIER_FACTOR = 1.333， — 要塞修正的计算方法是将铁路炮的攻击值乘以此值并除以 100

ATTACK_TO_ENTRENCHMENT_MODIFIER_FACTOR = 0.8,		— Entrenchment modifier is calculated by multiplying railway gun attack value with this and dividing by 100

ATTACK_TO_ENTRENCHMENT_MODIFIER_FACTOR = 0.8， — 堑壕修正的计算方法是将铁路炮的攻击值乘以此值，然后除以 100

ATTACK_TO_BOMBARDMENT_MODIFIER_FACTOR = 0.4,	— Bombardment modifier is calculated by multiplying railway gun attack value with this and dividing by 100

ATTACK_TO_BOMBARDMENT_MODIFIER_FACTOR = 0.4， — 轰炸修正的计算方法是将铁路炮的攻击值乘以此值，然后除以 100

DAILY_MANPOWER_GAIN_RATIO = 0.05,				— Railway Guns will be able to gain this ratio of their max manpower daily

DAILY_MANPOWER_GAIN_RATIO = 0.05， — 铁路炮每天将能够获得其最大人力的这个比例

DISBAND_MANPOWER_LOSS = 0.0,					— The ration of manpower lost on disbanding railway guns

DISBAND_MANPOWER_LOSS = 0.0， — 拆除铁路炮时损失的人力比例

ENCIRCLED_DISBAND_MANPOWER_FACTOR = 0.2,		— The percentage of manpower returned when an encircled unit is disbanded

ENCIRCLED_DISBAND_MANPOWER_FACTOR = 0.2， — 解散被包围的单位时返回的人力百分比

OUT_OF_SUPPLY_SPEED = -0.8,						— Max speed reduction from supply for railway guns

OUT_OF_SUPPLY_SPEED = -0.8， — 铁路炮的补给最大速度降低

BASE_CAPTURE_CHANCE = 0.2,						— The base chance of railway guns being captured during an overrrun. Will be further modified by the equipment capture chance of the capturing unit.

BASE_CAPTURE_CHANCE = 0.2， — 在超载期间缴获铁路炮的基本几率。将由捕获单位的装备捕获几率进一步修改。

DISTRIBUTION_RAILWAY_GUN_PRESENCE_SCORE = -100,					— Score for Railway Guns in nearby provs. x3 if on that province. x2 if adjacent. x1 if 2 away.

DISTRIBUTION_RAILWAY_GUN_PRESENCE_SCORE = -100， — 附近省份的铁路炮得分。x3 如果在该省份上。x2 （如果相邻）。x1 如果距离 2。

DISTRIBUTION_OUR_UNITS_PRESENCE_SCORE = 1,	 					— Score for our units in province when distributing Railway Guns

DISTRIBUTION_OUR_UNITS_PRESENCE_SCORE = 1， — 我省单位在分配铁路枪时的分数

DISTRIBUTION_FRIENDLY_UNITS_PRESENCE_SCORE = 0,					— Score for friendly units in province when distributing Railway Guns

DISTRIBUTION_FRIENDLY_UNITS_PRESENCE_SCORE = 0， — 省内友方单位在分配铁路枪时的分数

DISTRIBUTION_HOSTILE_UNITS_PRESENCE_SCORE = -45,				— Score for hostile units in province when distributing Railway Guns

DISTRIBUTION_HOSTILE_UNITS_PRESENCE_SCORE = -45， — 省内敌方单位在分配铁路枪时的分数

DISTRIBUTION_COMBATS_PRESENCE_SCORE = -30,						— Score for combats in province when distributing Railway Guns

DISTRIBUTION_COMBATS_PRESENCE_SCORE = -30， — 分配铁路炮时省内的战斗得分

DISTRIBUTION_COMBATS_INRANGE_SCORE = 15,						— Score for combats in range when distributing Railway Guns

DISTRIBUTION_COMBATS_INRANGE_SCORE = 15， — 分配铁路炮时范围内的战斗得分

DISTRIBUTION_OUR_UNITS_INRANGE_SCORE = 2.5,						— Score for our units in range when distributing Railway Guns

DISTRIBUTION_OUR_UNITS_INRANGE_SCORE = 2.5， — 分配铁路炮时我们射程内的单位的分数

DISTRIBUTION_FRIENDLY_UNITS_INRANGE_SCORE = 1.5,				— Score for friendly units in range when distributing Railway Guns

DISTRIBUTION_FRIENDLY_UNITS_INRANGE_SCORE = 1.5， — 分配铁路炮时范围内友方单位的分数

DISTRIBUTION_HOSTILE_UNITS_INRANGE_SCORE = 6,					— Score for hostile units in range when distributing Railway Guns

DISTRIBUTION_HOSTILE_UNITS_INRANGE_SCORE = 6， — 分配铁路炮时范围内敌方单位的分数

DISTRIBUTION_DISTANCE_SCORE = -0.08,							— Score for distance to province when distributing Railway Guns

DISTRIBUTION_DISTANCE_SCORE = -0.08， — 分配铁路炮时到省份的距离分数

DISTRIBUTION_PROVINCE_CONTROLLED_BY_ENEMY_SCORE = -3,			— Score for staying in province controlled by enemy

DISTRIBUTION_PROVINCE_CONTROLLED_BY_ENEMY_SCORE = -3， — 留在敌人控制的省份的分数

DISTRIBUTION_PROVINCES_CONTROLLED_BY_ENEMY_INRANGE_SCORE = 15,	— Score for provinces controlled by enemy in range when distributing Railway Guns

DISTRIBUTION_PROVINCES_CONTROLLED_BY_ENEMY_INRANGE_SCORE = 15， — 分配铁路炮时，范围内敌人控制的省份的分数

DISTRIBUTION_HOLD_POSITION_SCORE = 30,							— Score for staying in the same province when distributing Railway Guns

DISTRIBUTION_HOLD_POSITION_SCORE = 30， — 分发铁路枪时停留在同一省份的分数

DISTRIBUTION_NO_RAILWAY_SCORE = -500,							— Score for provinces with no railways (need to be low, but we allow RG to enter port provinces without railways)

DISTRIBUTION_NO_RAILWAY_SCORE = -500， — 没有铁路的省份的分数（需要低，但我们允许 RG 进入没有铁路的港口省份）

DISTRIBUTION_SUPPLY_DEFICIT_SCORE = -100,						— Score for provinces without sufficient supply cap

DISTRIBUTION_SUPPLY_DEFICIT_SCORE = -100， — 没有足够供应上限的省份得分

},



NTrade = {

NTrade = {

DISTANCE_TRADE_FACTOR = -0.02,				— Trade factor is modified by distance times this

DISTANCE_TRADE_FACTOR = -0.02， — 交易因子由距离乘以此

RELATION_TRADE_FACTOR = 1,					— Trade factor is modified by Opinion value times this

RELATION_TRADE_FACTOR = 1， — 交易因子由 Opinion 值乘以此值修改

ALLOW_TRADE_CUT_OFF = 0,					— If trade factor is less than this, no trade will be allowed

ALLOW_TRADE_CUT_OFF = 0， — 如果交易因子小于此值，则不允许交易

MONTH_TRADE_FACTOR = 2,						— Each month a trade gets this much boost to it’s trade factor

MONTH_TRADE_FACTOR = 2， — 交易的每个月都会获得如此多的交易因子提升

MAX_MONTH_TRADE_FACTOR = 50,				— This is the maximum bonus that can be gained from time

MAX_MONTH_TRADE_FACTOR = 50， — 这是可以从时间中获得的最大奖金

BASE_TRADE_FACTOR = 150,					— This is the base trade factor

BASE_TRADE_FACTOR = 150， — 这是基本交易系数

PUPPET_MASTER_TRADE_FACTOR = 400,			— This is priority for puppet master

PUPPET_MASTER_TRADE_FACTOR = 400 — 这是 puppet master 的优先级

PUPPET_TRADE_FACTOR = 0,					— This is unpriority for puppets

PUPPET_TRADE_FACTOR = 0 — 这是 Puppet 的非优先级

BASE_LAND_TRADE_RANGE = 1000,

BASE_LAND_TRADE_RANGE = 1000，

PARTY_SUPPORT_TRADE_FACTOR = 50,			— Trade factor bonus at the other side having 100 % party popularity for my party

PARTY_SUPPORT_TRADE_FACTOR = 50， — 另一方的交易因子奖金对我的队伍有 100% 的派对人气

ANTI_MONOPOLY_TRADE_FACTOR_THRESHOLD = 0.5,	— What percentage of resources has to be sold to the buyer for the anti-monopoly factor to take effect

ANTI_MONOPOLY_TRADE_FACTOR_THRESHOLD = 0.5， — 必须向买方出售多少百分比的资源才能使反垄断因素生效

ANTI_MONOPOLY_TRADE_FACTOR = -100,			— This is added to the factor value when anti-monopoly threshold is exceeded

ANTI_MONOPOLY_TRADE_FACTOR = -100， — 当超过反垄断阈值时，将其添加到因子值中

NAVAL_ROUTE_ACCESS_AVOID_COST_MULT = 1,	— Naval pathfinding should avoid certain regions that you mark. High “cost multiplier” will make it less willingly go through a specific region.

NAVAL_ROUTE_ACCESS_AVOID_COST_MULT = 1， — 海军寻路应避开您标记的某些区域。高“成本乘数”将使它不太愿意通过特定区域。

},



NAI = {

NAI = {

GARRISON_FRACTION = 0.0, 					— How large part of a front should always be holding the line rather than advancing at the enemy

GARRISON_FRACTION = 0.0， — 前线的大部分应该始终守住防线而不是向敌人推进

THEORIST_SCALING_WEIGHT_FACTOR_PER_NON_POLITICAL_ADVISORS = 0.15, —Scale theorist weight by this * num non political advisors

THEORIST_SCALING_WEIGHT_FACTOR_PER_NON_POLITICAL_ADVISORS = 0.15， —按此 * 非政治顾问数量对理论家权重进行秤

DIPLOMATIC_ACTION_GOOD_BAD_RATIO_THRESHOLD = 1,

DIPLOMATIC_ACTION_GOOD_BAD_RATIO_THRESHOLD = 1，

BASE_RELUCTANCE = 20, 						— Base reluctance applied to all diplomatic offers

BASE_RELUCTANCE = 20， — 适用于所有外交提议的基本不情愿

DIPLOMATIC_ACTION_RANDOM_FACTOR = 0.5, 		— How much of the AI diplomatic action scoring is randomly determined (1.0 = half random, 2.0 = 2/3rd random, etc)

DIPLOMATIC_ACTION_RANDOM_FACTOR = 0.5， — 有多少 AI 外交行动得分是随机确定的（1.0 = 半随机，2.0 = 2/3 随机，依此类推）

DIPLOMATIC_ACTION_PROPOSE_SCORE = 50, 		— AI must score a diplomatic action at least this highly to propose it themselves

DIPLOMATIC_ACTION_PROPOSE_SCORE = 50， — AI 必须至少对外交行动进行如此高的评分才能自己提出

DILPOMATIC_ACTION_DECLARE_WAR_WARGOAL_BASE = 50, — Base diplomatic action score bonus to go to war per wargoal

DILPOMATIC_ACTION_DECLARE_WAR_WARGOAL_BASE = 50， — 每个战争目标上的基础外交行动分数加成

DIPLOMATIC_ACTION_BREAK_SCORE = -10, 		— AI must score a diplomatic action less than this to break it off

DIPLOMATIC_ACTION_BREAK_SCORE = -10， — AI 必须对低于此的外交行动进行评分才能中断

DIPLOMACY_CREATE_FACTION_FACTOR = 0.75,		— Factor for AI desire to create a new faction. Val < 1.0 makes it less likely to create than to join.

DIPLOMACY_CREATE_FACTION_FACTOR = 0.75， — AI 渴望创建新派系的因素。Val < 1.0 使创建的可能性低于联接的可能性。

DIPLOMACY_FACTION_WRONG_IDEOLOGY_PENALTY = 60, — AI penalty for diplomatic faction acitons between nations of different ideologies

DIPLOMACY_FACTION_WRONG_IDEOLOGY_PENALTY = 60， — 不同意识形态国家之间外交派系冲突的 AI 惩罚

DIPLOMACY_FACTION_SAME_IDEOLOGY_MAJOR = 10, — AI bonus acceptance when being asked about faction is a major of the same ideology

DIPLOMACY_FACTION_SAME_IDEOLOGY_MAJOR = 10， — 当被问及派系时接受 AI 加成是同一意识形态的主要

DIPLOMACY_FACTION_NEUTRALITY_PENALTY = 50,	— Neutral nations have a separate penalty, not wanting to get involved at all, rather than caring much about the difference in ideology

DIPLOMACY_FACTION_NEUTRALITY_PENALTY = 50， — 中立国家有一个单独的惩罚，他们根本不想卷入其中，而不是太在乎意识形态的差异

DIPLOMACY_FACTION_GLOBAL_TENSION_FACTOR = 0.2,— How much the AI takes global tension into account when considering faction actions

DIPLOMACY_FACTION_GLOBAL_TENSION_FACTOR = 0.2，— AI 在考虑派系行动时考虑全局紧张局势的程度

DIPLOMACY_FACTION_WAR_RELUCTANCE = -50,		— Penalty to desire to enter a faction with a country that we are not fighting wars together with.

DIPLOMACY_FACTION_WAR_RELUCTANCE = -50， — 希望加入与我们没有一起打仗的国家的派系的惩罚。

DIPLOMACY_FACTION_TAKE_OVER_RELUCTANCE_VERSUS_HUMAN = 2.0,	— Multiplier penalty for how much stronger than a human faction member an AI country must be to choose to assume faction leadership.

DIPLOMACY_FACTION_TAKE_OVER_RELUCTANCE_VERSUS_HUMAN = 2.0， — 乘数惩罚，表示 AI 国家必须比人类派系成员强大多少才能选择担任派系领导。

DIPLOMACY_SCARED_MINOR_EXTRA_RELUCTANCE = -50, — extra reluctance to join stuff as scared minor

DIPLOMACY_SCARED_MINOR_EXTRA_RELUCTANCE = -50， — 作为害怕的未成年人特别不愿意加入

DIPLOMACY_FACTION_PLAYER_JOIN = 20,			— Bonus for human players asking to join a faction.

DIPLOMACY_FACTION_PLAYER_JOIN = 20， — 要求加入派系的人类玩家的奖励。

DIPLOMACY_BOOST_PARTY_COST_FACTOR = 100.0,	— Desire to boost party popularity subtracts the daily cost multiplied by this

DIPLOMACY_BOOST_PARTY_COST_FACTOR = 100.0， — 希望提高派对人气减去每日费用乘以此金额

DIPLOMACY_IMPROVE_RELATION_COST_FACTOR = 5.0,— Desire to boost relations subtracts the cost multiplied by this

DIPLOMACY_IMPROVE_RELATION_COST_FACTOR = 5.0，— 希望促进关系减去成本乘以此

DIPLOMACY_IMPROVE_RELATION_PP_FACTOR = 0.1,	— Desire to boost relations adds total PP multiplied by this

DIPLOMACY_IMPROVE_RELATION_PP_FACTOR = 0.1， — 希望提升关系加上总 PP 乘以此

DIPLOMACY_SEND_ATTACHE_COST_FACTOR = 5.0,	— Desire to send attache substracts the cost multiplied by this

DIPLOMACY_SEND_ATTACHE_COST_FACTOR = 5.0， — 希望发送公文减去费用乘以此金额

DIPLOMACY_SEND_ATTACHE_PP_FACTOR = 0.1,	— Desire to send attache adds total PP multiplied by this

DIPLOMACY_SEND_ATTACHE_PP_FACTOR = 0.1， — 希望发送公文会将总 PP 乘以此

DIPLOMACY_REJECTED_WAIT_MONTHS_BASE = 4,	— AI will not repeat offers until at least this time has passed, and at most the double

DIPLOMACY_REJECTED_WAIT_MONTHS_BASE = 4， — AI 不会重复选件，至少在此时间过去之前，最多是双倍

DIPLOMACY_LEND_LEASE_MONTHS_TO_CANCEL = 1,	— AI will not cancel a lend lease offer until this time has passed

DIPLOMACY_LEND_LEASE_MONTHS_TO_CANCEL = 1， — 在此时间过去之前，AI 不会取消借出租赁报价

DIPLOMACY_CALL_ALLY_VALIDITY_DURATION = 1,	— Overwrite above value for CallAlly and JoinAlly diplo action. This is however fixed, and is not subject to randomness. Also, this is the time the AI will keep the action in its incoming queue without declining it.

DIPLOMACY_CALL_ALLY_VALIDITY_DURATION = 1， — 覆盖 CallAlly 和 JoinAlly diplo作的上述值。然而，这是固定的，不受随机性的影响。此外，这是 AI 将作保留在其传入队列中而不拒绝它的时间。

DIPLOMACY_PURCHASE_EQUIPMENT_MONTHS = 2, — AI will not ask to purchase equipment more often than this

DIPLOMACY_PURCHASE_EQUIPMENT_MONTHS = 2， — AI 不会要求购买设备的频率超过此频率

DIPLOMACY_SEND_MAX_FACTION = 0.75,			— Country should not send away more units than this as expeditionaries

DIPLOMACY_SEND_MAX_FACTION = 0.75， — 国家不应派出比这更多的单位作为远征军

DIPLOMACY_ACCEPT_VOLUNTEERS_BASE = 50,		— Base value of volunteer acceptance (help is welcome)

DIPLOMACY_ACCEPT_VOLUNTEERS_BASE = 50， — 志愿者接受度的基值（欢迎帮助）

DIPLOMACY_ACCEPT_ATTACHE_BASE = 50,			— Base value of attache acceptance (help is welcome)

DIPLOMACY_ACCEPT_ATTACHE_BASE = 50， — 公文员接受的基本值（欢迎帮助）

DIPLOMACY_ACCEPT_ATTACHE_OPINION_TRASHHOLD = 20, — Value of opinion that will remove accepting penalty for receiveing the attache

DIPLOMACY_ACCEPT_ATTACHE_OPINION_TRASHHOLD = 20， — 将消除因接受公文而接受处罚的意见价值

DIPLOMACY_ACCEPT_ATTACHE_OPINION_PENALTY = -100, — Value of acceptance penalty if the opinion too low

DIPLOMACY_ACCEPT_ATTACHE_OPINION_PENALTY = -100， — 如果意见过低，则接受罚金的值

DIPLOMACY_FACTION_MAJOR_AT_WAR = 1000.0,	— Factor that will be multiplied with the surrender level in the desire to offer to the other ai to join a faction

DIPLOMACY_FACTION_MAJOR_AT_WAR = 1000.0， — 希望向另一个 AI 提供加入派系的愿望中乘以投降等级的系数

DIPLOMACY_FACTION_SURRENDER_LEVEL = 20, 	— How much the recipient nation losing matters for joining a faction

DIPLOMACY_FACTION_SURRENDER_LEVEL = 20， — 接收国损失多少对于加入派系很重要

DIPLO_PREFER_OTHER_FACTION = -200,			— The country has yet to ask some other faction it would prefer to be a part of.

DIPLO_PREFER_OTHER_FACTION = -200， — 该国尚未询问它更愿意加入的其他派系。

DIPLO_DISTANCE_BETWEEN_CAPITALS = -340,		— Max scaled malus from distance between capitals

DIPLO_DISTANCE_BETWEEN_CAPITALS = -340， — 从大写字母之间的距离开始的最大缩放 malus

DIPLO_ACCEPTABLE_DISTANCE_BETWEEN_CAPITALS = 1000.0, —When scaled distance malus begins to kick in. At double this value, max penalty (above) is achieved

DIPLO_ACCEPTABLE_DISTANCE_BETWEEN_CAPITALS = 1000.0， - 当缩放距离 malus 开始启动时。如果该值是此值的两倍，则达到最大惩罚（上述）

DIPLO_SHOW_FACTION_JOIN_WARNING_THRESHOLD = -20,	— Show warning if declare-war target is this close to accepting or being sent a faction invitiation

DIPLO_SHOW_FACTION_JOIN_WARNING_THRESHOLD = -20， — 如果宣战目标接近接受或被发送派系邀请，则显示警告

DIPLO_MAX_CONTAINMENT_ACCEPTANCE = 100,		— Max value for ‘wants to contain’ diplo acceptance

DIPLO_MAX_CONTAINMENT_ACCEPTANCE = 100 — “想要包含”diplo 接受度的最大值



RESEARCH_DAYS_BETWEEN_WEIGHT_UPDATE = 7, 	— Refreshes need scores based on country situation.

RESEARCH_DAYS_BETWEEN_WEIGHT_UPDATE = 7， — 刷新需要根据国家/地区情况进行评分。

RESEARCH_WEIGHT_TRUNCATION_THRESHOLD = 0.75, — When choosing a tech to research, use this truncation selection threshold. (for example, if the top score is 10, a threshold of 0.75 will pick randomly from anything above 7.5 score)

RESEARCH_WEIGHT_TRUNCATION_THRESHOLD = 0.75 — 选择要研究的技术时，请使用此截断选择阈值。（例如，如果最高分是 10，则阈值 0.75 将从 7.5 分以上的任何分数中随机选择）

RESEARCH_LAND_DOCTRINE_NEED_GAIN_FACTOR = 0.15, — Multiplies value based on relative military industry size / country size.

RESEARCH_LAND_DOCTRINE_NEED_GAIN_FACTOR = 0.15 — 根据相对军事工业规模/国家/地区规模乘以值。

RESEARCH_NAVAL_DOCTRINE_NEED_GAIN_FACTOR = 0.05, — Multiplies value based on relative naval industry size / country size.

RESEARCH_NAVAL_DOCTRINE_NEED_GAIN_FACTOR = 0.05 — 根据相对海军工业规模/国家/地区规模乘以值。

RESEARCH_AIR_DOCTRINE_NEED_GAIN_FACTOR = 0.07, — Multiplies value based on relative number of air base / country size.

RESEARCH_AIR_DOCTRINE_NEED_GAIN_FACTOR = 0.07 — 根据空军基地/国家/地区规模的相对数量乘以值。

RESEARCH_NEW_DOCTRINE_RANDOM_FACTOR = 0.05,	— How much randomness is allowed to contribute to do new research expressed as a factor of total tech weights. Higher means more random exploration.

RESEARCH_NEW_DOCTRINE_RANDOM_FACTOR = 0.05， — 允许多少随机性对进行新研究做出贡献，以技术总权重的因子表示。越高意味着更多的随机探索。

RESEARCH_AHEAD_BONUS_FACTOR = 4.0, — To which extent AI should care about ahead of time bonuses to research

RESEARCH_AHEAD_BONUS_FACTOR = 4.0， — AI 应该在多大程度上关心提前研究的奖金

RESEARCH_BONUS_FACTOR = 5.0, — To which extent AI should care about research speed bonuses

RESEARCH_BONUS_FACTOR = 5.0， — AI 应该在多大程度上关心研究速度加成

RESEARCH_YEARS_BEHIND_FACTOR = 0.2, — To which extent AI should care about not falling behind (i.e. increase weight for old tech)

RESEARCH_YEARS_BEHIND_FACTOR = 0.2， — AI 应该在多大程度上关心不落后（即增加旧技术的权重）

RESEARCH_NEEDS_FACTOR = 0.01, — To which extent AI should care about its research needs (research needs are matched against the tech category)

RESEARCH_NEEDS_FACTOR = 0.01， — AI 应该在多大程度上关心其研究需求（研究需求与技术类别相匹配）

RESEARCH_LENGTH_FACTOR = 3, — To which extent AI should care about how long it takes to research something (it prefers short research times)

RESEARCH_LENGTH_FACTOR = 3， — AI 应该在多大程度上关心研究某物需要多长时间（它更喜欢较短的研究时间）

MAX_AHEAD_RESEARCH_PENALTY = 3, — Max ahead of time penalty AI will ever consider (this also includes BASE_YEAR_AHEAD_PENALTY_FACTOR, so not the raw time)

MAX_AHEAD_RESEARCH_PENALTY = 3， — AI 将考虑的最大提前惩罚（这也包括BASE_YEAR_AHEAD_PENALTY_FACTOR，因此不包括原始时间）

RESEARCH_AHEAD_OF_TIME_FACTOR = 4.0, 		— To which extent AI should care about ahead of time penalties to research

RESEARCH_AHEAD_OF_TIME_FACTOR = 4.0， — AI 应该在多大程度上提前关心研究的惩罚

RESEARCH_BASE_DAYS = 60,					— AI adds a base number of days when weighting completion time for techs to ensure it doesn’t only research quick techs

RESEARCH_BASE_DAYS = 60， — AI 在为技术人员加权完成时间时增加一个基本天数，以确保它不仅研究快速技术人员

DECLARE_WAR_RELATIVE_FORCE_FACTOR = 0.5,	— Weight of relative force between nations that consider going to war

DECLARE_WAR_RELATIVE_FORCE_FACTOR = 0.5， — 考虑开战的国家之间的相对力量权重

TRADEABLE_FACTORIES_FRACTION = 0.8,			— Will at most trade away this fraction of factories.

TRADEABLE_FACTORIES_FRACTION = 0.8， — 最多交易掉这部分工厂。

MIN_DELIVERED_TRADE_FRACTION = 0.8,			— AI will cancel trade deals that are not able to deliver more than this fraction of the agreed amount

MIN_DELIVERED_TRADE_FRACTION = 0.8， — AI 将取消无法交付超过商定金额部分的交易

SEA_PATH_LENGTH_SCORE_BASE = -30, — scoring reduction from naval paths for AI when picking trade partners

SEA_PATH_LENGTH_SCORE_BASE = -30， — 选择贸易伙伴时 AI 的海军路径得分降低

MINIMUM_GOOD_TRADE_RATIO_PER_CIV = 0.005, — for each civ factory we have mul with this we are allowed to trade under % of resource on a trade

MINIMUM_GOOD_TRADE_RATIO_PER_CIV = 0.005， — 对于我们拥有的多个 Civ 工厂，我们被允许在交易中进行低于 % 资源的交易

NAVAL_DOCKYARDS_SHIP_FACTOR = 1.5,			— The extent to which number of dockyards play into amount of sips a nation wants

NAVAL_DOCKYARDS_SHIP_FACTOR = 1.5， — 船坞数量对一个国家想要的啜饮量的影响程度

PRODUCTION_EQUIPMENT_SURPLUS_FACTOR = 0.8,	— Base value for how much of currently used equipment the AI will at least strive to have in stock

PRODUCTION_EQUIPMENT_SURPLUS_FACTOR = 0.8， — AI 至少会努力拥有多少当前使用设备的基值

PRODUCTION_EQUIPMENT_SURPLUS_FACTOR_GARRISON = 0.3,	— Base value for how much of currently used equipment the AI will at least strive to have in stock for garrison forces

PRODUCTION_EQUIPMENT_SURPLUS_FACTOR_GARRISON = 0.3， — AI 至少会努力为驻军储备多少当前使用的装备的基础值

AIR_SUPERIORITY_FACTOR = 2.5,				— Factor for air superiority score

AIR_SUPERIORITY_FACTOR = 2.5， — 空中优势得分的因子

ROCKET_MIN_ASSIGN_SCORE = 10,				— Minimum total score for region to be considered for rocket air missions

ROCKET_MIN_ASSIGN_SCORE = 10， — 火箭飞行任务考虑的地区的最低总分

ROCKET_MIN_PRIO_ASSIGN_SCORE = 50,			— Minimum total score for region to be considered for critical rocket air missions

ROCKET_MIN_PRIO_ASSIGN_SCORE = 50， — 关键火箭空军任务考虑的地区的最低总分

ROCKET_PRIORITIZE_BARRAGE = false,			— Prioritize rocket barrage or strategic bombing mission. false = prioritize strategic bombing, true = prioritize barrage

ROCKET_PRIORITIZE_BARRAGE = false， — 优先考虑火箭弹幕或战略轰炸任务。false = 优先进行战略轰炸，true = 优先进行弹幕

ROCKET_ASSIGN_SCORE_REDUCTION_PER_ASSIGNMENT = 0.5, — each assigned rocket reduces the score of a region by this amount

ROCKET_ASSIGN_SCORE_REDUCTION_PER_ASSIGNMENT = 0.5， — 每分配一枚火箭弹，一个地区的分数就会降低这个数量

GUN_EMPLACEMENT_MIN_ASSIGN_SCORE = 1, — Minimum total score for region to be considered for gun emplacement air missions

GUN_EMPLACEMENT_MIN_ASSIGN_SCORE = 1， — 考虑执行炮位空中任务的地区的最低总分

GUN_EMPLACEMENT_MIN_PRIO_ASSIGN_SCORE = 50, — Minimum total score for region to be considered for critical gun emplacement air missions

GUN_EMPLACEMENT_MIN_PRIO_ASSIGN_SCORE = 50， — 考虑执行关键炮位空中任务的地区的最低总分

GUN_EMPLACEMENT_ASSIGN_SCORE_REDUCTION_PER_ASSIGNMENT = 0.5, — each assigned gun emplacement reduces the score of a region by this amount

GUN_EMPLACEMENT_ASSIGN_SCORE_REDUCTION_PER_ASSIGNMENT = 0.5， — 每个分配的炮位都会将一个区域的分数降低此量

MAX_VOLUNTEER_ARMY_FRACTION = 0.25,			— Countries will not send more than their forces time this number to aid another country

MAX_VOLUNTEER_ARMY_FRACTION = 0.25， — 各国派遣的援助人数不会超过本国的兵力时间

DEPLOY_MIN_TRAINING_SURRENDER_FACTOR = 0.5, — Required percentage of training (1.0 = 100%) for AI to deploy unit in wartime while surrender progress is higher than 0

DEPLOY_MIN_TRAINING_SURRENDER_FACTOR = 0.5， — 当投降进度高于 0 时，AI 在战时部署单位所需的训练百分比 （1.0 = 100%）

DEPLOY_MIN_EQUIPMENT_SURRENDER_FACTOR = 0.90, — Required percentage of equipment (1.0 = 100%) for AI to deploy unit in wartime while surrender progress is higher than 0

DEPLOY_MIN_EQUIPMENT_SURRENDER_FACTOR = 0.90， — 当投降进度高于 0 时，AI 在战时部署单位所需的装备百分比 （1.0 = 100%）

DEPLOY_MIN_TRAINING_PEACE_FACTOR = 0.98, — Required percentage of training (1.0 = 100%) for AI to deploy unit in peacetime

DEPLOY_MIN_TRAINING_PEACE_FACTOR = 0.98， — AI 在和平时期部署单位所需的训练百分比 （1.0 = 100%）

DEPLOY_MIN_EQUIPMENT_PEACE_FACTOR = 0.98, — Required percentage of equipment (1.0 = 100%) for AI to deploy unit in peacetime

DEPLOY_MIN_EQUIPMENT_PEACE_FACTOR = 0.98， — AI 在和平时期部署单位所需的装备百分比 （1.0 = 100%）

DEPLOY_MIN_TRAINING_WAR_FACTOR = 0.95, — Required percentage of training (1.0 = 100%) for AI to deploy unit in wartime

DEPLOY_MIN_TRAINING_WAR_FACTOR = 0.95， — AI 在战时部署单位所需的训练百分比 （1.0 = 100%）

DEPLOY_MIN_EQUIPMENT_WAR_FACTOR = 0.95, — Required percentage of equipment (1.0 = 100%) for AI to deploy unit in wartime

DEPLOY_MIN_EQUIPMENT_WAR_FACTOR = 0.95， — AI 在战时部署单位所需的装备百分比 （1.0 = 100%）

DEPLOY_MIN_EQUIPMENT_CAP_DEPLOY_FACTOR = 0.85, — If training is capped by equipment deficit and we have reached that cap, deploy unit anyway if percentage is above this (reinforce in field instead).

DEPLOY_MIN_EQUIPMENT_CAP_DEPLOY_FACTOR = 0.85， — 如果训练以设备不足为上限，而我们已经达到了该上限，如果百分比高于此上限，则无论如何都部署单位（改为在战场增援）。

DYNAMIC_STRATEGIES_THREAT_FACTOR = 4.0,		— How much threat generated by other countries effects generated strategies

DYNAMIC_STRATEGIES_THREAT_FACTOR = 4.0， — 其他国家产生的威胁对生成的策略的影响程度

LOCATION_BALANCE_TO_ADVANCE = 0.0,			— Limit on location strength balance between country and enemy for unit to dare to move forward.

LOCATION_BALANCE_TO_ADVANCE = 0.0， — 限制国家和敌人之间的位置强度平衡，以便单位敢于前进。



EQUIPMENT_MARKET_UPDATE_FREQUENCY_DAYS = 11, — How often the AI runs its market logic

EQUIPMENT_MARKET_UPDATE_FREQUENCY_DAYS = 11， — AI 运行其市场逻辑的频率

EQUIPMENT_MARKET_MAX_CIVS_FOR_PURCHASES_RATIO = 0.1, — Ratio of available civilian factories to max use for equipment purchases (0.2 = 20 %, so 50 available civs would mean max ca 10 civs to spend on purchases at any one time). Gets modified by equipment_market_spend_factories AI strategy.

EQUIPMENT_MARKET_MAX_CIVS_FOR_PURCHASES_RATIO = 0.1， — 可用民用工厂与购买设备的最大使用量之比（0.2 = 20 %，因此 50 个可用文明意味着任何时候最多花费约 10 个文明购买）。被 AI 策略修改equipment_market_spend_factories。

EQUIPMENT_MARKET_BASE_MARKET_RATIO = 0.2, — The AI tries to keep ca this ratio of equipment surplus for sale on the market. Gets modified by equipment_market_for_sale_factor AI strategy.

EQUIPMENT_MARKET_BASE_MARKET_RATIO = 0.2， — AI 试图保持市场上待售设备剩余比例的这一比例。由 AI 策略修改equipment_market_for_sale_factor。

EQUIPMENT_MARKET_DEFAULT_CIC_CHUNK_FOR_SALE = 150.0, — When putting things up for sale on the market, this determines the default “chunk” size of equipment the AI puts up. Gets overridden by equipment_market_min_for_sale AI strategy. (If one equipment is worth 5 CIC, a value of 150 would result in chunk sizes of 150/5 = 30 units)

EQUIPMENT_MARKET_DEFAULT_CIC_CHUNK_FOR_SALE = 150.0， — 当商品在市场上出售时，这决定了 AI 放置的设备的默认“块”大小。被 AI 策略覆盖equipment_market_min_for_sale。（如果一个设备价值 5 CIC，则值为 150 将导致区块大小为 150/5 = 30 个单位）

EQUIPMENT_MARKET_NR_DELIVERIES_SOFT_MAX = 10, — AI tries to adjust assigned factories and amount of equipment to keep nr deliveries at max this

EQUIPMENT_MARKET_NR_DELIVERIES_SOFT_MAX = 10， — AI 尝试调整分配的工厂和设备数量，以保持 NR 交付量达到最大值

EQUIPMENT_MARKET_EXTRA_CONVOYS_OVERRIDE = 2, — Makes the AI able to buy convoys even if they are lacking free convoys. 0 will make them stop this behavior, anything > 0 will allow overriding the perceived nr of free convoys. Only if convoy equipment has a non-zero weight does the actual value matter.

EQUIPMENT_MARKET_EXTRA_CONVOYS_OVERRIDE = 2， — 使 AI 能够购买护航，即使它们缺少免费的护航。0 将使它们停止此行为，任何> 0 的值都将允许覆盖感知到的自由护航的 NR。只有当护航设备的重量不为零时，实际值才有意义。

EQUIPMENT_MARKET_WANTED_CONVOY_USAGE_RATIO = 0.3, — If the AI’s available/free/unused convoys is reduced to this ratio (0.3 = 30 %), start buying convoys.

EQUIPMENT_MARKET_WANTED_CONVOY_USAGE_RATIO = 0.3， — 如果 AI 的可用/免费/未使用的护航船队减少到这个比率 （0.3 = 30 %），则开始购买护航船队。

EQUIPMENT_MARKET_CONTRACT_DURATION_ACCEPTANCE = -10, — If expected contract duration is longer than EQUIPMENT_MARKET_NR_DELIVERIES_SOFT_MAX deliveries, then add this to the PurchaseContract AI acceptance score per nr overdue deliveries

EQUIPMENT_MARKET_CONTRACT_DURATION_ACCEPTANCE = -10， — 如果预期合同持续时间超过 EQUIPMENT_MARKET_NR_DELIVERIES_SOFT_MAX 次交付，则将其添加到每个 nr 逾期交付的 PurchaseContract AI 验收分数中

EQUIPMENT_MARKET_CONTRACT_EFFICIENCY_TO_CANCEL = 0.1, — If contract efficiency stays below this, the AI will cancel the contract

EQUIPMENT_MARKET_CONTRACT_EFFICIENCY_TO_CANCEL = 0.1， — 如果合约效率低于此值，AI 将取消合约

EQUIPMENT_MARKET_EQUIPMENT_SUNK_TO_CANCEL = 0.5, — If more equipment is sunk then the given percentage, the AI will cancel the contract

EQUIPMENT_MARKET_EQUIPMENT_SUNK_TO_CANCEL = 0.5， — 如果沉没的设备数量超过给定的百分比，则 AI 将取消合同

EQUIPMENT_MARKET_SHORTAGE_DAYS_TO_CANCEL = 30, — If equipment deficit will take more than these many days to fix, the AI will cancel the contract

EQUIPMENT_MARKET_SHORTAGE_DAYS_TO_CANCEL = 30， — 如果设备短缺需要超过这些天才能修复，AI 将取消合同

EQUIPMENT_MARKET_MAX_CONVOY_RATIO_FOR_MARKET_PEACE = 0.5, — Max ratio of total convoys to use for equipment trade while at peace

EQUIPMENT_MARKET_MAX_CONVOY_RATIO_FOR_MARKET_PEACE = 0.5， — 和平时期用于设备贸易的车队总数的最大比率

EQUIPMENT_MARKET_MAX_CONVOY_RATIO_FOR_MARKET_WAR = 0.25, — Max ratio of total convoys to use for equipment trade while at war

EQUIPMENT_MARKET_MAX_CONVOY_RATIO_FOR_MARKET_WAR = 0.25， — 战争时用于设备贸易的车队总数的最大比率

EQUIPMENT_MARKET_SCORE_FACTOR_VARIANT_SCORE = 5.0, — Score coefficient for VariantScore (high is good)

EQUIPMENT_MARKET_SCORE_FACTOR_VARIANT_SCORE = 5.0， — VariantScore 的分数系数（高表示好）

EQUIPMENT_MARKET_SCORE_FACTOR_CIC_VALUE_NEEDED = 8.0, — Score coefficient for CicValueNeeded (high is prio)

EQUIPMENT_MARKET_SCORE_FACTOR_CIC_VALUE_NEEDED = 8.0， — CicValueNeeded 的分数系数（高为 prio）

EQUIPMENT_MARKET_SCORE_FACTOR_SUBSIDY_VALUE = 2.0, — Score coefficient for SubsidyValue (high is good)

EQUIPMENT_MARKET_SCORE_FACTOR_SUBSIDY_VALUE = 2.0， — SubsidyValue 的分数系数（高表示好）

EQUIPMENT_MARKET_SCORE_FACTOR_COST_PER_UNIT = -5.0, — Score coefficient for SubsidizedCostPerUnit (low is good)

EQUIPMENT_MARKET_SCORE_FACTOR_COST_PER_UNIT = -5.0， — SubsidizedCostPerUnit 的分数系数（低表示好）

EQUIPMENT_MARKET_SCORE_FACTOR_AI_STRAT_WEIGHT = 50.0, — Score coefficient for AiStratWeight (high is prio)

EQUIPMENT_MARKET_SCORE_FACTOR_AI_STRAT_WEIGHT = 50.0， — AiStratWeight 的分值系数（高为 prio）

EQUIPMENT_MARKET_SCORE_FACTOR_DIPLO_OPINION = 1.0, — Score coefficient for DiploOpinion, mainly used as tie breaker (high is good)

EQUIPMENT_MARKET_SCORE_FACTOR_DIPLO_OPINION = 1.0， — DiploOpinion 的分数系数，主要用作决胜局（高是好的）



DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_MANPOWER_IN_FIELD = -20,	— Scale multiplied by difference in manpower in field

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_MANPOWER_IN_FIELD = -20， — 规模乘以现场人力差异

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_GLOBAL_TENSION = -10,	— Multiplied by WT

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_GLOBAL_TENSION = -10， — 乘以 WT

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_WAR_SUPPORT = -10,		— Multiplied by recipient WS

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_WAR_SUPPORT = -10 — 乘以收件人 WS

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_EMBARGO = 2,				— Multiplied by num embargo, max 5 embargo

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_EMBARGO = 2， — 乘以 num embargo，最多 5 个 bargo

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_OWN_SURRENDER_LIMIT = 20, — Multiplied by recipient nation’s surrender level

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_OWN_SURRENDER_LIMIT = 20， — 乘以接受国的投降水平

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_MINOR_WAR = 10,			— Applied if recipient is a minor nation (and therefore there are no majors in this war)

DIPLOMACY_ACCEPT_CONDITIONAL_SURRENDER_MINOR_WAR = 10， — 如果接收方是小国（因此这场战争中没有大国），则适用



MIN_POLITICAL_POWER_MONTHLY_GAIN_FOR_IMPROVE_RELATIONS = 0.50,	— If country makes less than this PP per month, they won’t improve relations

MIN_POLITICAL_POWER_MONTHLY_GAIN_FOR_IMPROVE_RELATIONS = 0.50， — 如果国家每月的收入低于这个 PP，他们不会改善关系



NUM_RESOURCES_TO_ALLOW_MINOR_EMBARGO = 69,	—If we or any of our puppets have more total resources of a single category that this, we will consider embargoing countries

NUM_RESOURCES_TO_ALLOW_MINOR_EMBARGO = 69， —如果我们或我们的任何傀儡在某一类别中拥有更多的总资源，我们将考虑禁运国家

EMBARGO_WORLD_TENSION_THREAT_DIVISOR = 2.5,		—A divisor to generated world tension when applying how much we care about it in AI desire

EMBARGO_WORLD_TENSION_THREAT_DIVISOR = 2.5， — 在 AI 欲望中应用我们对世界紧张感的关心程度时，产生的世界紧张感的除数



OPINION_CUTOFF_FOR_IMPROVE_RELATIONS = 80,	— AI will never consider improving relations if above this opinion with target.

OPINION_CUTOFF_FOR_IMPROVE_RELATIONS = 80， — 如果高于目标的这个观点，AI 永远不会考虑改善关系。



DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_LAND = 35,	— Army XP needed before attempting to create a variant of a type that uses the tank designer (the tank designer DLC feature must be active).

DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_LAND = 35， — 在尝试创建使用 tank designer 的类型变体之前需要陆军 XP（tank designer DLC 功能必须处于活动状态）。

DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_NAVY = 50,	— Same as above but for the ship designer.

DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_NAVY = 50， — 同上，但适用于船舶设计师。

DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_AIR = 25,		— Same as above but for the plane designer.

DEFAULT_MODULE_VARIANT_CREATION_XP_CUTOFF_AIR = 25， — 与上述相同，但适用于平面设计器。

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_LAND = 35,	— Army XP needed before attempting to create a variant of a type that uses the legacy upgrades system. ai_strategy supports land_xp_spend_priority upgrade_xp_cutoff. If none is set, this define is used instead.

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_LAND = 35， — 在尝试创建使用旧版升级系统的类型的变体之前需要陆军 XP。ai_strategy 支持 land_xp_spend_priority upgrade_xp_cutoff。如果未设置，则改用此定义。

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_NAVY = 25,	— Same as above but for navy XP and navy_xp_spend_priority.

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_NAVY = 25， — 同上，但适用于海军 XP 和 navy_xp_spend_priority。

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_AIR = 25,	— Same as above but for air XP and air_xp_spend_priority.

DEFAULT_LEGACY_VARIANT_CREATION_XP_CUTOFF_AIR = 25， — 同上，但适用于 air XP 和 air_xp_spend_priority。

VARIANT_CREATION_XP_RESERVE_LAND = 50,					— If the AI lacks army XP to create a variant it will reserve this much XP for variant creation so that it will eventually be able to create a variant.

VARIANT_CREATION_XP_RESERVE_LAND = 50， — 如果 AI 缺少军队 XP 来创建变体，它将保留这么多 XP 用于创建变体，以便最终能够创建变体。

VARIANT_CREATION_XP_RESERVE_NAVY = 50,					— Same as above but for navy XP.

VARIANT_CREATION_XP_RESERVE_NAVY = 50， — 同上，但适用于海军 XP。

VARIANT_CREATION_XP_RESERVE_AIR = 50,					— Same as above but for air XP.

VARIANT_CREATION_XP_RESERVE_AIR = 50， — 同上，但适用于空气 XP。



— The AI uses the below values when selecting which design to make among the types that use the tank designer

- AI 在使用坦克设计器的类型中选择要进行的设计时，使用以下值

— (the tank designer DLC feature must be active). For each role, the highest priority AI design that can be

（tank designer DLC 功能必须处于活动状态）。对于每个角色，最高优先级的 AI 设计可以是

— created, if any, is assigned a weight. Any design with a weight of zero or a weight that falls below the

— created （如果有）被分配一个权重。权重为零或权重低于

— cutoff is dropped. A random design is then picked from the remaining.

— 删除 Cutoff。然后从其余设计中选择一个随机设计。

— Weight is calculated as AlternativeFactor * DemandFactor.

— 权重的计算公式为 AlternativeFactor * DemandFactor。

— An “alternative” is a producible design of the same archetype (each specialized type is its own archetype).

— “替代方案”是同一原型的可生产设计（每个专用类型都是它自己的原型）。

LAND_DESIGN_ALTERNATIVE_ABSENT = 30000,

LAND_DESIGN_ALTERNATIVE_ABSENT = 30000，

LAND_DESIGN_ALTERNATIVE_OF_LESSER_TECH = 10000,

LAND_DESIGN_ALTERNATIVE_OF_LESSER_TECH = 10000，

LAND_DESIGN_ALTERNATIVE_OF_EQUAL_TECH = 100,

LAND_DESIGN_ALTERNATIVE_OF_EQUAL_TECH = 100，

LAND_DESIGN_ALTERNATIVE_OF_GREATER_TECH = 1,

LAND_DESIGN_ALTERNATIVE_OF_GREATER_TECH = 1，

— If a template may be reinforced with the archetype it’s considered to be “demanded”. If multiple conditions

— 如果一个模板可以用原型来加固，那么它就被认为是 “被要求” 的。如果有多个条件

— are met, e.g. it’s both in the field and in training, the largest value is used.

— ，例如，在现场和训练中，都使用最大值。

LAND_DESIGN_DEMAND_FIELD_DIVISION = 20,

LAND_DESIGN_DEMAND_FIELD_DIVISION = 20，

LAND_DESIGN_DEMAND_TRAINING_DIVISION = 15,

LAND_DESIGN_DEMAND_TRAINING_DIVISION = 15，

LAND_DESIGN_DEMAND_GARRISON_DIVISION = 10,

LAND_DESIGN_DEMAND_GARRISON_DIVISION = 10，

LAND_DESIGN_DEMAND_UNUSED_TEMPLATE = 1,

LAND_DESIGN_DEMAND_UNUSED_TEMPLATE = 1，

LAND_DESIGN_DEMAND_ABSENT = 1,

LAND_DESIGN_DEMAND_ABSENT = 1，

— If a design with a weight when divided by the largest weight falls below this value it’s excluded from the

- 如果具有权重的设计除以最大权重时小于此值，则会将其从

— selection. Valid values are in the range [0, 1] inclusive.

— 选择。有效值在 [0， 1] 范围内（包括 [0， 1]）。

LAND_DESIGN_CUTOFF_AS_PERCENTAGE_OF_MAX = 0.25,

LAND_DESIGN_CUTOFF_AS_PERCENTAGE_OF_MAX = 0.25，



— See above documentation.

— 请参阅上述文档。

AIR_DESIGN_ALTERNATIVE_ABSENT = 1000000,

AIR_DESIGN_ALTERNATIVE_ABSENT = 10000，

AIR_DESIGN_ALTERNATIVE_OF_LESSER_TECH = 10000,

AIR_DESIGN_ALTERNATIVE_OF_LESSER_TECH = 10000，

AIR_DESIGN_ALTERNATIVE_OF_EQUAL_TECH = 100,

AIR_DESIGN_ALTERNATIVE_OF_EQUAL_TECH = 100，

AIR_DESIGN_ALTERNATIVE_OF_GREATER_TECH = 1,

AIR_DESIGN_ALTERNATIVE_OF_GREATER_TECH = 1，

— The AI desires to produce equipment at a certain rate per archetype, and demand is determined per archetype

— AI 希望以每个原型的一定速度生产设备，而需求则根据原型决定

— relative to the least and most desired counts.

— 相对于最少和最需要的计数。

AIR_DESIGN_DEMAND_MAX = 33,

AIR_DESIGN_DEMAND_MAX = 33，

AIR_DESIGN_DEMAND_MIN = 1,

AIR_DESIGN_DEMAND_MIN = 1，

AIR_DESIGN_DEMAND_ABSENT = 0,

AIR_DESIGN_DEMAND_ABSENT = 0，

AIR_DESIGN_CUTOFF_AS_PERCENTAGE_OF_MAX = 0.34,

AIR_DESIGN_CUTOFF_AS_PERCENTAGE_OF_MAX = 0.34，



— The AI “desires” to spend XP on doctrines, templates, and equipment.

— AI “渴望” 将 XP 花在教条、模板和设备上。

— The desire is built up over time and when XP is available it spends it on the action that has the highest accumulated desire. After spending XP the desire is reset, in effect balancing the desires.

— 欲望是随着时间的推移而建立的，当 XP 可用时，它会将其花在具有最高累积欲望的行动上。花费 XP 后，欲望被重置，实际上是平衡欲望。

— Below is the daily desire gain for each action.

— 以下是每个行动的每日欲望增益。

DESIRE_USE_XP_TO_UNLOCK_LAND_DOCTRINE = 0.5, — How quickly is desire to unlock land doctrines accumulated?

DESIRE_USE_XP_TO_UNLOCK_LAND_DOCTRINE = 0.5， — 解锁土地学说的欲望积累起来的速度有多快？

DESIRE_USE_XP_TO_UNLOCK_NAVAL_DOCTRINE = 0.5, — How quickly is desire to unlock naval doctrines accumulated?

DESIRE_USE_XP_TO_UNLOCK_NAVAL_DOCTRINE = 0.5， — 解开海军学说的愿望积累得有多快？

DESIRE_USE_XP_TO_UNLOCK_AIR_DOCTRINE = 0.5, — How quickly is desire to unlock air doctrines accumulated?

DESIRE_USE_XP_TO_UNLOCK_AIR_DOCTRINE = 0.5， — 解开空气学说的欲望积累的速度有多快？

DESIRE_USE_XP_TO_UPDATE_LAND_TEMPLATE = 2.0, — How quickly is desire to update/create templates accumulated?

DESIRE_USE_XP_TO_UPDATE_LAND_TEMPLATE = 2.0 — 更新/创建模板的愿望累积的速度有多快？

DESIRE_USE_XP_TO_UPGRADE_LAND_EQUIPMENT = 1.0, — How quickly is desire to update/create land equipment variants accumulated?

DESIRE_USE_XP_TO_UPGRADE_LAND_EQUIPMENT = 1.0， — 更新/创建陆地装备变体的愿望累积的速度有多快？

DESIRE_USE_XP_TO_UPGRADE_NAVAL_EQUIPMENT = 1.0, — How quickly is desire to update/create naval equipment variants accumulated?

DESIRE_USE_XP_TO_UPGRADE_NAVAL_EQUIPMENT = 1.0， — 更新/创建海军装备变体的愿望累积起来的速度有多快？

DESIRE_USE_XP_TO_UPGRADE_AIR_EQUIPMENT = 1.0, — How quickly is desire to update/create air equipment variants accumulated?

DESIRE_USE_XP_TO_UPGRADE_AIR_EQUIPMENT = 1.0， — 更新/创建空中设备变体的愿望累积的速度有多快？

DESIRE_USE_XP_TO_UNLOCK_ARMY_SPIRIT = 0.35, — How quickly is desire to unlock army spirits accumulated?

DESIRE_USE_XP_TO_UNLOCK_ARMY_SPIRIT = 0.35， — 解锁军魂的欲望积累有多快？

DESIRE_USE_XP_TO_UNLOCK_NAVY_SPIRIT = 0.35, — How quickly is desire to unlock naval spirits accumulated?

DESIRE_USE_XP_TO_UNLOCK_NAVY_SPIRIT = 0.35， — 解锁海军精神的欲望积累的速度有多快？

DESIRE_USE_XP_TO_UNLOCK_AIR_SPIRIT = 0.35, — How quickly is desire to unlock air spirits accumulated?

DESIRE_USE_XP_TO_UNLOCK_AIR_SPIRIT = 0.35， — 解锁空气精灵的欲望积累有多快？



DAYS_BETWEEN_CHECK_BEST_DOCTRINE = 7; — Recalculate desired best doctrine to unlock with this many days inbetween.

DAYS_BETWEEN_CHECK_BEST_DOCTRINE = 7;— 重新计算所需的最佳教义，以便在这几天之间解锁。

DAYS_BETWEEN_CHECK_BEST_TEMPLATE = 7; — Recalculate desired best template to upgrade with this many days inbetween.

DAYS_BETWEEN_CHECK_BEST_TEMPLATE = 7;— 重新计算所需的最佳模板以在这之间进行升级。

DAYS_BETWEEN_CHECK_BEST_EQUIPMENT = 7; — Recalculate desired best equipment to upgrade with this many days inbetween.

DAYS_BETWEEN_CHECK_BEST_EQUIPMENT = 7;— 重新计算所需的最佳设备以升级这中间的天数。



UNLOCK_SPIRIT_AI_WILL_DO_FACTOR = 20, — Factor for scripted ai_will_do value

UNLOCK_SPIRIT_AI_WILL_DO_FACTOR = 20， — 脚本化ai_will_do值的因子

UNLOCK_SPIRIT_MODIFIER_FACTOR = 0.05, — Factor for AI’s evaluated value of the modifiers connected to the spirit

UNLOCK_SPIRIT_MODIFIER_FACTOR = 0.05， — AI 对与灵魂相关的修饰符的评估值的因子

UNLOCK_SPIRIT_USE_TRUNCATION_SELECT = false, — Whether to use truncation select or roulette-wheel select. Set threshold for truncation select below.

UNLOCK_SPIRIT_USE_TRUNCATION_SELECT = false， — 是使用截断选择还是轮盘选择。设置截断阈值，请在下方选择。

UNLOCK_SPIRIT_TRUNCATION_SELECT_THRESHOLD = 0.80, — Valid between [0.0, 1.0]. When unlocking spirits, select randomly from all spirits with AI score >= VALUE * HighestSpiritScore. To always select the best, set this value to 1.0. To select fully randomly, set this value to 0.0.

UNLOCK_SPIRIT_TRUNCATION_SELECT_THRESHOLD = 0.80， — 在 [0.0， 1.0] 之间有效。解锁灵魂时，从 AI 分数 >= VALUE * HighestSpiritScore 的所有灵魂中随机选择。要始终选择最佳值，请将此值设置为 1.0。要完全随机选择，请将此值设置为 0.0。



FOCUS_TREE_CONTINUE_FACTOR = 1.5,			— Factor for score of how likely the AI is to keep going down a focus tree rather than starting a new path.

FOCUS_TREE_CONTINUE_FACTOR = 1.5 — 表示 AI 继续沿着焦点树前进而不是开始新路径的可能性的分数因子。

PLAN_VALUE_TO_EXECUTE = -0.5,				— AI will typically avoid carrying out a plan it below this value (0.0 is considered balanced).

PLAN_VALUE_TO_EXECUTE = -0.5， — AI 通常会避免在低于此值（0.0 被视为平衡）时执行计划。

DECLARE_WAR_NOT_NEIGHBOR_FACTOR = 0.25,		— Multiplier applied before force factor if country is not neighbor with the one it is considering going to war

DECLARE_WAR_NOT_NEIGHBOR_FACTOR = 0.25， — 如果国家不是其考虑参战的国家的邻国，则在力系数之前应用的乘数

CALL_ALLY_BASE_DESIRE = 20,					— exactly what it says

CALL_ALLY_BASE_DESIRE = 20 — 正是它所说的

CALL_ALLY_DEMOCRATIC_DESIRE = 50,			— Desire to call ally added for democratic AI

CALL_ALLY_DEMOCRATIC_DESIRE = 50， — 为民主 AI 添加呼叫盟友的愿望

CALL_ALLY_NEUTRAL_DESIRE = 25,				— Desire to call ally added for neutral AI

CALL_ALLY_NEUTRAL_DESIRE = 25， — 为中立 AI 添加呼叫盟友的愿望

CALL_ALLY_FASCIST_DESIRE = -10,				— Desire to call ally added for fascist AI

CALL_ALLY_FASCIST_DESIRE = -10， — 为法西斯 AI 添加呼叫盟友的愿望

CALL_ALLY_COMMUNIST_DESIRE = 75,			— Desire to call ally added for communist AI

CALL_ALLY_COMMUNIST_DESIRE = 75， — 为共产主义 AI 添加呼叫盟友的愿望

CALL_ALLY_PUPPET_INVITE_OVERLORD = 1000, — Desire for a puppet to call its overlord into the war

CALL_ALLY_PUPPET_INVITE_OVERLORD = 1000， — 希望傀儡号召其霸主参战

CALL_ALLY_OVERLORD_INVITE_PUPPET = 20, — Desire for an overlord to call its puppet into the war

CALL_ALLY_OVERLORD_INVITE_PUPPET = 20， — 希望霸主号召其傀儡参战

CALL_ALLY_RELATIVE_INDUSTRY_STRENGTH_THRESHOLD = 1.5, — If our relative industry strength ratio is less than this (compared to all enemies), increase desire to call allies

CALL_ALLY_RELATIVE_INDUSTRY_STRENGTH_THRESHOLD = 1.5， — 如果我们的相对工业实力比率小于此比率（与所有敌人相比），则增加召唤盟友的欲望

CALL_ALLY_RELATIVE_ARMY_STRENGTH_THRESHOLD = 1.5, — If our relative army strength ratio is less than this (compared to all enemies), increase desire to call allies

CALL_ALLY_RELATIVE_ARMY_STRENGTH_THRESHOLD = 1.5， — 如果我们的相对军队实力比率小于此比率（与所有敌人相比），则增加呼叫盟友的欲望

CALL_ALLY_RELATIVE_INDUSTRY_STRENGTH_MAX = 50.0, — Max desire value for relative industry strength (lerping between zero and this based on the threshold)

CALL_ALLY_RELATIVE_INDUSTRY_STRENGTH_MAX = 50.0， — 相对行业实力的最大期望值（根据阈值在 0 和 this 之间）

CALL_ALLY_RELATIVE_ARMY_STRENGTH_MAX = 100.0, — Max desire value for relative army strength (lerping between zero and this based on the threshold)

CALL_ALLY_RELATIVE_ARMY_STRENGTH_MAX = 100.0， — 相对军队实力的最大期望值（根据阈值在 0 和 this 之间）

CALL_ALLY_LOSING_WAR_THRESHOLD = 0.45, — If our war progress is less than this, increase desire to call allies (0.5 is stalemate)

CALL_ALLY_LOSING_WAR_THRESHOLD = 0.45， — 如果我们的战争进度小于此进度，则增加召唤盟友的欲望（0.5 为僵局）

CALL_ALLY_LOSING_WAR_MAX = 100.0, — Max desire value for losing war (lerping between zero and this based on the threshold)

CALL_ALLY_LOSING_WAR_MAX = 100.0， — 输掉战争的最大欲望值（根据阈值在 0 和 this 之间）

CALL_ALLY_WAR_LENGTH_NR_MONTHS = 2, — For every month the war has gone on, increase desire this much

CALL_ALLY_WAR_LENGTH_NR_MONTHS = 2， — 战争每持续一个月，欲望就会增加这么多

CALL_ALLY_JOINER_HAS_ENEMY_NEIGHBOR = 100, — If the joining country is neighbor to at least one of the enemies, increase desire this much

CALL_ALLY_JOINER_HAS_ENEMY_NEIGHBOR = 100， — 如果加入的国家是至少一个敌人的邻国，则提高欲望



AI_CHAIN_CALLS_ALLIES = true,				— with this enabled the AI will automatically call AI allies when called into a war (which in turn generates a single popup, this circumvents some potential modfiable scripts with the call ally diplo action, which might be a cause to disable it in some mods

AI_CHAIN_CALLS_ALLIES = true， — 启用此功能后，AI 将在被召唤进入战争时自动呼叫 AI 盟友（这反过来又会生成一个弹出窗口，这可以通过呼叫盟友 diplo作来规避一些潜在的可修改脚本，这可能是在某些 Mod 中禁用它的原因



MIN_AI_UNITS_PER_TILE_FOR_STANDARD_COHESION = 1.5,	— How many units should we have for each tile along a front in order to switch to standard cohesion (less moving around)

MIN_AI_UNITS_PER_TILE_FOR_STANDARD_COHESION = 1.5， — 我们应该为前面的每个图块有多少个单位才能切换到标准内聚（减少移动）

MIN_FRONT_SIZE_TO_CONSIDER_STANDARD_COHESION = 12,	— How long should fronts be before we consider switching to standard cohesion (under this, standard cohesion fronts will switch back to relaxed)

MIN_FRONT_SIZE_TO_CONSIDER_STANDARD_COHESION = 12， — 在我们考虑切换到标准内聚之前，锋面应该持续多长时间（在这种情况下，标准内聚锋将切换回松弛）



JOIN_ALLY_BASE_DESIRE = 20,					— exactly what it says

JOIN_ALLY_BASE_DESIRE = 20，— 正是它所说的

JOIN_ALLY_DEMOCRATIC_DESIRE = 50,			— Desire to join ally added for democratic AI

JOIN_ALLY_DEMOCRATIC_DESIRE = 50， — 添加加入民主 AI 盟友的愿望

JOIN_ALLY_NEUTRAL_DESIRE = 25,				— Desire to join ally added for neutral AI

JOIN_ALLY_NEUTRAL_DESIRE = 25， — 为中立 AI 添加加入盟友的愿望

JOIN_ALLY_FASCIST_DESIRE = -10,				— Desire to join ally added for fascist AI

JOIN_ALLY_FASCIST_DESIRE = -10， — 为法西斯 AI 添加加入盟友的愿望

JOIN_ALLY_COMMUNIST_DESIRE = 75,			— Desire to join ally added for communist AI

JOIN_ALLY_COMMUNIST_DESIRE = 75， — 为共产主义 AI 添加加入盟友的愿望

JOIN_FACTION_BOTH_LOSING = -300,			— Desire to be in a faction when both we and htey are in losing wars

JOIN_FACTION_BOTH_LOSING = -300， — 当我们和他们都处于失败的战争中时，渴望加入一个阵营

LENDLEASE_FRACTION_OF_PRODUCTION = 0.5,		— Base fraction AI would send as lendlease

LENDLEASE_FRACTION_OF_PRODUCTION = 0.5， — 碱基分数 AI 将作为 lendlease 发送

LENDLEASE_FRACTION_OF_STOCKPILE = 0.25,		— Base fraction AI would send as lendlease

LENDLEASE_FRACTION_OF_STOCKPILE = 0.25， — 碱基分数 AI 将作为 lendlease 发送

MINIMUM_EQUIPMENT_TO_ASK_LEND_LEASE = -100,	— AI will accept to lend lease this equipment only if our stockpile is less than that.

MINIMUM_EQUIPMENT_TO_ASK_LEND_LEASE = -100， — 只有当我们的库存少于此数量时，AI 才会接受借出租赁此设备。

MINIMUM_CONVOY_TO_ASK_LEND_LEASE = 30,		— AI will accept to lend lease convoys only if our stockpile is less than that (special case because convoy stockpile can’t be negative).

MINIMUM_CONVOY_TO_ASK_LEND_LEASE = 30， — 仅当我们的库存量小于该值时，AI 才会接受借出租赁护航队（特殊情况，因为护航队库存不能为负数）。

MINIMUM_FUEL_DAYS_TO_ASK_LEND_LEASE = 2,	— AI will accept to lend lease fuel only if the player have less fuel than this number multiply by his max daily consumption.

MINIMUM_FUEL_DAYS_TO_ASK_LEND_LEASE = 2， — 只有当玩家的燃料少于此数字乘以其最大每日消耗量时，AI 才会接受借出租赁燃料。

MINIMUM_FUEL_DAYS_TO_ACCEPT_LEND_LEASE = 10, — AI will accept to lend lease fuel only if they have more fuel than this number multiply by their max daily consumption. Note that for a GiE asking to its host, we divide this number by 2.

MINIMUM_FUEL_DAYS_TO_ACCEPT_LEND_LEASE = 10， — 只有当 AI 的燃料数量超过此数字乘以最大每日消耗量时，AI 才会接受借出租赁燃料。请注意，对于向其主机请求的 GiE，我们将此数字除以 2。



DEFAULT_SUPPLY_TRUCK_BUFFER_RATIO = 1.5,	— ai will set to truck buffer ratio to this. can be modified by wanted_supply_trucks min_wanted_supply_trucks ai strats

DEFAULT_SUPPLY_TRUCK_BUFFER_RATIO = 1.5， — AI 将设置为 Truck Buffer Ratio。可以通过 wanted_supply_trucks min_wanted_supply_trucks AI Strats 进行修改

DEFAULT_SUPPLY_TRAIN_NEED_FACTOR = 1.2, — AI multiplies current train usage by this to determine desired nr of wanted trains. Can be modified by wanted_supply_train min_wanted_supply_trains ai strats.

DEFAULT_SUPPLY_TRAIN_NEED_FACTOR = 1.2， — AI 将当前列车使用情况乘以此来确定所需列车的所需 NR。可以通过 wanted_supply_train min_wanted_supply_trains AI 策略进行修改。



POLITICAL_IDEA_MIN_SCORE = 0.1,				— Only replace or add an idea if score is above this score.

POLITICAL_IDEA_MIN_SCORE = 0.1， — 仅当分数高于此分数时，才替换或添加概念。

HIGH_COMMAND_ADDED_WEIGHT_FACTOR = 1.10,	— Weight multiplier for high_command advisors over other chosen advisor or idea types

HIGH_COMMAND_ADDED_WEIGHT_FACTOR = 1.10 — high_command 个顾问相对于其他所选顾问或概念类型的权重乘数

CHIEF_ADDED_WEIGHT_FACTOR = 2.4,			— Weight multiplier for chief roles over other advisor or idea types

CHIEF_ADDED_WEIGHT_FACTOR = 2.4， — 主要角色相对于其他顾问或想法类型的权重乘数



GARRISON_TEMPLATE_SCORE_IC_FACTOR = 1.0,		— ai uses these defines while calculating garrison template score of a template.

GARRISON_TEMPLATE_SCORE_IC_FACTOR = 1.0， — AI 在计算模板的驻军模板分数时使用这些定义。

GARRISON_TEMPLATE_SCORE_MANPOWER_FACTOR = 0.05, — formula is (template_ic * ic_factor + template_manpower * manpower_factor ) / template_supression (lower is better)

GARRISON_TEMPLATE_SCORE_MANPOWER_FACTOR = 0.05， — 公式为 （template_ic * ic_factor + template_manpower * manpower_factor ） / template_supression （越低越好）



ADVISOR_SCORE_TRAIT_MODIFIER_FACTOR = 0.2, — When scoring advisors, factor the score contribution from the advisor’s trait modifiers by this value

ADVISOR_SCORE_TRAIT_MODIFIER_FACTOR = 0.2， — 对顾问进行评分时，将顾问特征修饰符的分数贡献考虑此值

ADVISOR_SCORE_CHEAPER_IS_BETTER_FACTOR = 0.1, — When scoring advisors, this define scales how much the AI prefers cheaper advisors over more expensive ones. 0.0 means no effect, 0.15 means a cost difference of 100 PP modifies the score by 15 %.

ADVISOR_SCORE_CHEAPER_IS_BETTER_FACTOR = 0.1， — 在对顾问进行评分时，此定义会缩放 AI 对更便宜的顾问的偏好程度，而不是更昂贵的顾问。0.0 表示没有效果，0.15 表示 100 PP 的成本差异会改变 15 % 的分数。

ADVISOR_SCORE_CHEAPER_IS_BETTER_MIN = 0.5, — Clamps the above scoring factor to at minimum this value

ADVISOR_SCORE_CHEAPER_IS_BETTER_MIN = 0.5， — 将上述评分因子限制为最小值



— stuff related to how the AI evaluates/scores how useful modifiers are

— 与 AI 如何评估/评分有关的修饰符有多有用

EVAL_MODIFIER_NON_PERCENT_FACTOR = 0.1, — Multiply non-percent-based modifiers with this to put the values in the approximately same range so they can be compared. (Why we are using 0.1 and not 0.01? No idea…)

EVAL_MODIFIER_NON_PERCENT_FACTOR = 0.1， — 将非基于百分比的修饰符与此相乘，以将值置于大致相同的范围内，以便进行比较。（为什么我们使用的是 0.1 而不是 0.01？不知道......

EVAL_MODIFIER_UNSPECIFIED_CATEGORY_FACTOR = 0.75, — Arbitrary scoring factor for modifiers the AI doesn’t know how to categorize

EVAL_MODIFIER_UNSPECIFIED_CATEGORY_FACTOR = 0.75， — AI 不知道如何分类的修饰符的任意计分因子

EVAL_MODIFIER_MAX_COMMAND_POWER_FACTOR = 0.01, — Increasing CP cap with x is maybe 100 times less useful than e.g. gaining x more XP per day

EVAL_MODIFIER_MAX_COMMAND_POWER_FACTOR = 0.01， — 用 x 增加 CP 上限可能比每天获得 x XP 有用 100 倍



— for positive values of following defines, ai weights will take over of hardcoded ai scoring system

— 对于以下定义的正值，AI 权重将接管硬编码的 AI 评分系统

MIN_AI_SCORE_TO_MOBILIZATION_LAW_OVERRIDE_HARD_CODED_SCORE = 0.0,

MIN_AI_SCORE_TO_MOBILIZATION_LAW_OVERRIDE_HARD_CODED_SCORE = 0.0，

MIN_AI_SCORE_TO_ECONOMY_LAW_OVERRIDE_HARD_CODED_SCORE = 0.0,

MIN_AI_SCORE_TO_ECONOMY_LAW_OVERRIDE_HARD_CODED_SCORE = 0.0，

MIN_AI_SCORE_TO_TRADE_LAW_OVERRIDE_HARD_CODED_SCORE = 1000.0,

MIN_AI_SCORE_TO_TRADE_LAW_OVERRIDE_HARD_CODED_SCORE = 1000.0，

MIN_AI_SCORE_TO_ALL_LAWS_OVERRIDE_HARD_CODED_SCORE = 0.0,

MIN_AI_SCORE_TO_ALL_LAWS_OVERRIDE_HARD_CODED_SCORE = 0.0，



AT_WAR_THREAT_FACTOR = 2.0,					— How much increase in threat does AI feel for being in war against someone

AT_WAR_THREAT_FACTOR = 2.0， — AI 在与某人开战时感觉到的威胁增加了多少

NEIGHBOUR_WAR_THREAT_FACTOR = 1.10, 		— How much increase in threat does AI feel against neighbours who are at war

NEIGHBOUR_WAR_THREAT_FACTOR = 1.10， — AI 对处于战争状态的邻居的威胁增加了多少

POTENTIAL_ALLY_JOIN_WAR_FACTOR = 100, 		— How much increase in threat does AI feel against neighbours who are allied against one of our enemies

POTENTIAL_ALLY_JOIN_WAR_FACTOR = 100， — AI 对盟友对抗我们的敌人之一的邻居的威胁增加了多少

POTENTIAL_FUTURE_ENEMY_FACTOR = 100, 		— How much increase in threat does AI feel against neighbours who at war with our allies

POTENTIAL_FUTURE_ENEMY_FACTOR = 100， — AI 对与我们的盟友交战的邻国的威胁增加了多少

NEUTRAL_THREAT_PARANOIA = 10,				— How scared neutrals are of everyone

NEUTRAL_THREAT_PARANOIA = 10， — 中立者对每个人的恐惧程度

DIFFERENT_FACTION_THREAT = 30,				— Threat caused by not being in the same faction

DIFFERENT_FACTION_THREAT = 30， — 不属于同一派系造成的威胁

MAX_THREAT_FOR_FIRST_YEAR_CIVILIAN_MODE = 60, — above this threshold, ai will leave first year civilian factory mode which bumps it civilian factory scores while building

MAX_THREAT_FOR_FIRST_YEAR_CIVILIAN_MODE = 60， — 超过此阈值，AI 将离开第一年的民用工厂模式，该模式在建造时会提高其民用工厂分数

PLAN_ATTACK_MIN_ORG_FACTOR_LOW = 0.85,		— Minimum org % for a unit to actively attack an enemy unit when executing a plan

PLAN_ATTACK_MIN_ORG_FACTOR_LOW = 0.85， — 单位在执行计划时主动攻击敌方单位的最小组织百分比

PLAN_ATTACK_MIN_STRENGTH_FACTOR_LOW = 0.60,	— Minimum strength for a unit to actively attack an enemy unit when executing a plan

PLAN_ATTACK_MIN_STRENGTH_FACTOR_LOW = 0.60， — 单位在执行计划时主动攻击敌方单位的最小强度

PLAN_ATTACK_MIN_ORG_FACTOR_MED = 0.7,		— (LOW,MED,HIGH) corresponds to the plan execution agressiveness level.

PLAN_ATTACK_MIN_ORG_FACTOR_MED = 0.7， — （LOW，MED，HIGH） 对应于计划执行的侵略性级别。

PLAN_ATTACK_MIN_STRENGTH_FACTOR_MED = 0.50,

PLAN_ATTACK_MIN_STRENGTH_FACTOR_MED = 0.50，

PLAN_ATTACK_MIN_ORG_FACTOR_HIGH = 0.45,

PLAN_ATTACK_MIN_ORG_FACTOR_HIGH = 0.45，

PLAN_ATTACK_MIN_STRENGTH_FACTOR_HIGH = 0.30,

PLAN_ATTACK_MIN_STRENGTH_FACTOR_HIGH = 0.30，

PLAN_FRONTUNIT_DISTANCE_FACTOR = 10.0,		— Factor for candidate units distance to front positions.

PLAN_FRONTUNIT_DISTANCE_FACTOR = 10.0， — 候选单位到前位置的距离系数。

PLAN_ATTACK_DEPTH_FACTOR = 0.5,				— Factor applied to size or enemy being attacked.

PLAN_ATTACK_DEPTH_FACTOR = 0.5， — 应用于大小或被攻击敌人的系数。

PLAN_STEP_COST_LIMIT = 9,					— When stepping to draw a plan this cost makes it break if it hits hard terrain (multiplied by number of desired steps)

PLAN_STEP_COST_LIMIT = 9， — 在逐步绘制计划时，如果计划撞到坚硬的地形，此成本会中断（乘以所需步骤数）

PLAN_STEP_COST_LIMIT_REDUCTION = 3,			— Cost limit is reduced per iteration, making hard terrain less likely to be crossed the further into enemy territory it is

PLAN_STEP_COST_LIMIT_REDUCTION = 3， — 每次迭代的消耗限制会降低，越深入敌方领土越不可能越难穿越坚硬地形

PLAN_MIN_SIZE_FOR_FALLBACK = 50,			— A country with less provinces than this will not draw fallback plans, but rather station their troops along the front

PLAN_MIN_SIZE_FOR_FALLBACK = 50， — 省份少于这个省份的国家不会制定后备计划，而是将他们的部队驻扎在前线

SEND_VOLUNTEER_EVAL_BASE_DISTANCE = 175.0, — How far away it will evaluate sending volunteers if not a major power

SEND_VOLUNTEER_EVAL_BASE_DISTANCE = 175.0， — 如果不是大国，它将评估派遣志愿者的距离

SEND_VOLUNTEER_EVAL_MAJOER_POWER = 1.0, 	— How willing major powers are to send volunteers.

SEND_VOLUNTEER_EVAL_MAJOER_POWER = 1.0， — 大国派遣志愿者的意愿。

SEND_VOLUNTEER_EVAL_CONTAINMENT_FACTOR = 0.1, — How much AI containment factors into its evaluation of sending volunteers.

SEND_VOLUNTEER_EVAL_CONTAINMENT_FACTOR = 0.1， — 评估派遣志愿者时有多少 AI 遏制因素。

GIVE_STATE_CONTROL_MIN_CONTROLLED = 1,		— AI needs to control more than this number of states before considering giving any away

GIVE_STATE_CONTROL_MIN_CONTROLLED = 1， — AI 需要控制超过此数量的状态，然后才能考虑泄露任何状态

GIVE_STATE_CONTROL_MIN_CONTROL_DIFF = 2,	— The difference in number of controlled states compared to war participation needs to be bigger than this for the AI to consider giving a state to a country

GIVE_STATE_CONTROL_MIN_CONTROL_DIFF = 2， — 与参战相比，受控国家的数量差异需要大于此差异，AI 才会考虑将国家分配给一个国家

RELATIVE_STRENGTH_TO_INVADE = 0.08,			— Compares the estimated strength of the country/faction compared to it’s enemies to see if it should invade or stay at home to defend.

RELATIVE_STRENGTH_TO_INVADE = 0.08， — 比较国家/派系与敌人的估计实力，看看是应该入侵还是留在家中防御。

RELATIVE_STRENGTH_TO_INVADE_DEFENSIVE = 0.4,— Compares the estimated strength of the country/faction compared to it’s enemies to see if it should invade or stay at home to defend, but while being a defensive country.

RELATIVE_STRENGTH_TO_INVADE_DEFENSIVE = 0.4，— 将国家/派系的估计实力与敌人进行比较，看看它是否应该入侵或留在国内进行防御，但同时又是一个防御性国家。

GIVE_STATE_CONTROL_BASE_SCORE = 50,			— Base diplo score for giving away control of states

GIVE_STATE_CONTROL_BASE_SCORE = 50， — 放弃状态控制权的基本 diplo 分数

GIVE_STATE_CONTROL_DIFF_FACTOR = 2.0,		— Diplo score multiplier for state control compared to war participation difference

GIVE_STATE_CONTROL_DIFF_FACTOR = 2.0， — 国家控制的 Diplo 分数乘数与战争参与差异的比较

GIVE_STATE_CONTROL_NEIGHBOR_SCORE = 20,		— Diplo score for each neighboring state controlled by the target

GIVE_STATE_CONTROL_NEIGHBOR_SCORE = 20， — 目标控制的每个相邻状态的 Diplo 分数

GIVE_STATE_CONTROL_NEIGHBOR_ACTOR_SCORE = -5, — Diplo score for each neighboring state that is controlled by the sender

GIVE_STATE_CONTROL_NEIGHBOR_ACTOR_SCORE = -5， — 由发送方控制的每个相邻状态的 Diplo 分数

GIVE_STATE_CONTROL_NEIGHBOR_OTHER_SCORE = 5, — Diplo score for each neighboring state controlled by someone else

GIVE_STATE_CONTROL_NEIGHBOR_OTHER_SCORE = 5， — 由其他人控制的每个相邻状态的 Diplo 分数

GIVE_STATE_CONTROL_MAX_SCORE_DIST = 600,	— A State that is closer to the recipient capital than this gets a score bonus based on the below value

GIVE_STATE_CONTROL_MAX_SCORE_DIST = 600 — 比此值更接近接收国首都的州将根据以下值获得分数加成

GIVE_STATE_CONTROL_DIST_SCORE_MULT = 0.2,	— Multiplier for the score gained from distance ( GIVE_STATE_CONTROL_MAX_SCORE_DIST - distance ) * this

GIVE_STATE_CONTROL_DIST_SCORE_MULT = 0.2， — 从距离获得的分数的乘数 （ GIVE_STATE_CONTROL_MAX_SCORE_DIST - 距离 ） * 此

IRRATIONALITY_LAMBDA = 200,					— Lambda given to Poisson Random function determining if a leader should act a bit irrational

IRRATIONALITY_LAMBDA = 200， — 给予泊松随机函数的 lambda，确定领导者是否应该表现得有点不合理

— Value of 200 should give 0.3% chance of Stalin going for instance crazy and conquering all of America

— 数值 200 应该有 0.3% 的几率斯大林发疯并征服整个美国

GENERATE_WARGOAL_THREAT_BASELINE = 1.0,	 — The baseline for what the AI considers the world is getting dangerous and we want to generate wargoals with no antagonize value

GENERATE_WARGOAL_THREAT_BASELINE = 1.0， — AI 认为世界正在变得危险的基线，我们希望生成没有对抗值的战争目标

GENERATE_WARGOAL_ANTAGONIZE_SCALE = 0.35, — works to scale the AIs antagonize value vs the threat baseline for when it should act on existing claims: threat used for baseline is min_threat - antagonize * scale

GENERATE_WARGOAL_ANTAGONIZE_SCALE = 0.35， — 用于调整 AI 的拮抗值与威胁基线，以确定何时应对现有声明采取行动：用于基线的威胁是 min_threat - 拮抗 * 规模

RESERVE_TO_COMMITTED_BALANCE = 0.3,			— How many reserves compared to number of committed divisions in a combat (1.0 = as many as reserves as committed)

RESERVE_TO_COMMITTED_BALANCE = 0.3， — 与战斗中已投入的师数量相比，储备数量（1.0 = 已投入的储备数量）

DIPLOMACY_COMMUNIST_NOT_NEIGHBOUR = -10,	— Communists want to stay consolidated with their influence

DIPLOMACY_COMMUNIST_NOT_NEIGHBOUR = -10， — 共产党人希望巩固他们的影响力

MAIN_ENEMY_FRONT_IMPORTANCE = 4.0,			— How much extra focus the AI should put on who it considers to be its current main enemy.

MAIN_ENEMY_FRONT_IMPORTANCE = 4.0， — AI 应该对它认为当前的主要敌人的人给予多少额外关注。

EASY_TARGET_FRONT_IMPORTANCE = 7.5,			— How much extra focus the AI should put on who it considers to be the easiest target.

EASY_TARGET_FRONT_IMPORTANCE = 7.5， — AI 应该对它认为最容易的目标给予多少额外关注。

AI_FRONT_MOVEMENT_FACTOR_FOR_READY = 0.25,	— If less than this fraction of units on a front is moving, AI sees it as ready for action

AI_FRONT_MOVEMENT_FACTOR_FOR_READY = 0.25， — 如果正面移动的单位少于这一比例，则 AI 会认为它已准备好采取行动

MICRO_POCKET_SIZE = 4,						— Pockets with a size equal to or lower than this will be mocroed by the AI, for efficiency.

MICRO_POCKET_SIZE = 4， — 为了提高效率，AI 将对大小等于或小于此值的口袋进行 mocro。

DECLARE_WAR_MIN_FRONT_SIZE_TO_CONSIDER_FOR_NOT_READY = 0.04, — fronts with less armies than this ratio compared to total number of armies are ignored when ai checks if it is ready for war

DECLARE_WAR_MIN_FRONT_SIZE_TO_CONSIDER_FOR_NOT_READY = 0.04， — 当 AI 检查是否准备好开战时，与军队总数相比，军队数量少于此比率的前线将被忽略

POCKET_DISTANCE_MAX = 40000,				— shortest square distance we bother about chasing pockets

POCKET_DISTANCE_MAX = 40000， — 我们费心追逐口袋的最短平方距离

VP_MAX_PROVINCE_WORTH = 500,				— Max worth a province can have to a defensive order

VP_MAX_PROVINCE_WORTH = 500， — 一个省份可以拥有的最大防御令价值

VP_LEVEL_IMPORTANCE_MEDIUM = 10,			— Victory points with values higher than or equal to this are considered to be of medium importance.

VP_LEVEL_IMPORTANCE_MEDIUM = 10 — 值大于或等于此值的胜利点被视为中等重要性。



— these are all 3 numbers for min, desired, max unit need weights for area defense

— 这些都是区域防御的最小、所需、最大单位需求权重的 3 个数字

AREA_DEFENSE_CAPITAL_PEACE_VP_WEIGHT = { 1.0, 1.0, 1.0 },

AREA_DEFENSE_CAPITAL_PEACE_VP_WEIGHT = { 1.0， 1.0， 1.0 }，

AREA_DEFENSE_CAPITAL_VP_WEIGHT = { 0.0, 1.0, 2.0 },

AREA_DEFENSE_CAPITAL_VP_WEIGHT = { 0.0， 1.0， 2.0 }，

AREA_DEFENSE_HOME_VP_WEIGHT = { 0.0, 0.5, 1.0 },

AREA_DEFENSE_HOME_VP_WEIGHT = { 0.0， 0.5， 1.0 }，

AREA_DEFENSE_OTHER_VP_WEIGHT = { 0.0, 0.0, 1.0 },

AREA_DEFENSE_OTHER_VP_WEIGHT = { 0.0， 0.0， 1.0 }，



AREA_DEFENSE_CAPITAL_PEACE_COAST_WEIGHT = { 0.0, 0.0, 0.0 },

AREA_DEFENSE_CAPITAL_PEACE_COAST_WEIGHT = { 0.0， 0.0， 0.0 }，

AREA_DEFENSE_CAPITAL_COAST_WEIGHT = { 0.0, 0.2, 0.7 },

AREA_DEFENSE_CAPITAL_COAST_WEIGHT = { 0.0， 0.2， 0.7 }，

AREA_DEFENSE_HOME_COAST_WEIGHT = { 0.0, 0.1, 0.5 },

AREA_DEFENSE_HOME_COAST_WEIGHT = { 0.0， 0.1， 0.5 }，

AREA_DEFENSE_OTHER_COAST_WEIGHT = { 0.0, 0.0, 0.0 },

AREA_DEFENSE_OTHER_COAST_WEIGHT = { 0.0， 0.0， 0.0 }，



AREA_DEFENSE_CAPITAL_PEACE_BASE_WEIGHT = { 0.0, 0.0, 0.0 },

AREA_DEFENSE_CAPITAL_PEACE_BASE_WEIGHT = { 0.0， 0.0， 0.0 }，

AREA_DEFENSE_CAPITAL_BASE_WEIGHT = { 0.5, 1.0, 1.5 },

AREA_DEFENSE_CAPITAL_BASE_WEIGHT = { 0.5， 1.0， 1.5 }，

AREA_DEFENSE_HOME_BASE_WEIGHT = { 0.5, 1.0, 1.0 },

AREA_DEFENSE_HOME_BASE_WEIGHT = { 0.5， 1.0， 1.0 }，

AREA_DEFENSE_OTHER_BASE_WEIGHT = { 0.5, 0.5, 1.0 },

AREA_DEFENSE_OTHER_BASE_WEIGHT = { 0.5， 0.5， 1.0 }，



ESTIMATED_CONVOYS_PER_DIVISION = 6,			— Not always correct, but mainly used to make sure AI does not go crazy

ESTIMATED_CONVOYS_PER_DIVISION = 6， — 并不总是正确的，但主要用于确保 AI 不会发疯

ENTRENCHMENT_WEIGHT = 2.0,					— AI should favour units with less entrenchment when assigning units around.

ENTRENCHMENT_WEIGHT = 2.0， — 在分配单位时，AI 应该偏爱壕沟较少的单位。

FRONT_TERRAIN_DEFENSE_FACTOR = 3.75, — Multiplier applied to unit defense modifier for terrain on front province multiplied by terrain importance

FRONT_TERRAIN_DEFENSE_FACTOR = 3.75， — 应用于前省地形的单位防御修正的乘数乘以地形重要性

FRONT_TERRAIN_ATTACK_FACTOR = 5.0,			— Multiplier applied to unit attack modifier for terrain on enemy front province multiplied by terrain importance

FRONT_TERRAIN_ATTACK_FACTOR = 5.0， — 应用于敌方前线省份地形的单位攻击修正乘以地形重要性的乘数



BASE_DISTANCE_TO_CARE = 600.0,				— Countries that are too far away are less interesting in diplomacy

BASE_DISTANCE_TO_CARE = 600.0， — 距离太远的国家对外交的兴趣较小

MIN_FORCE_RATIO_TO_PROTECT = 0.5,			— Tiny countries should not feel protective or really large ones

MIN_FORCE_RATIO_TO_PROTECT = 0.5， — 小国不应该感到保护或真正的大国



ORG_UNIT_STRONG = 0.75,						— Organization % for unit to be considered strong

ORG_UNIT_STRONG = 0.75， — 被视为强单位的组织百分比

STR_UNIT_STRONG = 0.70,						— Strength (equipment) % for unit to be considered strong

STR_UNIT_STRONG = 0.70， — 强度（装备）% 表示单位被视为强



ORG_UNIT_WEAK = 0.25,						— Organization % for unit to be considered weak

ORG_UNIT_WEAK = 0.25， — 被视为弱单位的组织百分比

STR_UNIT_WEAK = 0.30,						— Strength (equipment) % for unit to be considered weak

STR_UNIT_WEAK = 0.30， — 强度（装备）% 表示单位被视为弱



ORG_UNIT_NORMAL = 0.35,						— Organization % for unit to be considered normal

ORG_UNIT_NORMAL = 0.35， — 将单位视为正态的单位 %

STR_UNIT_NORMAL = 0.4,						— Strength (equipment) % for unit to be considered normal

STR_UNIT_NORMAL = 0.4， — 单位被视为正常的强度（装备）%



PLAN_FACTION_STRONG_TO_EXECUTE = 0.50,		— % or more of units in an order to consider executing the plan

PLAN_FACTION_STRONG_TO_EXECUTE = 0.50， — 考虑执行计划的顺序中单位的百分比或更多

PLAN_FACTION_NORMAL_TO_EXECUTE = 0.65,		— % or more of units in an order to consider executing the plan

PLAN_FACTION_NORMAL_TO_EXECUTE = 0.65， — % 或更多单位，以考虑执行计划

PLAN_FACTION_WEAK_TO_ABORT = 0.65,			— % or more of units in an order to consider executing the plan

PLAN_FACTION_WEAK_TO_ABORT = 0.65， — 考虑执行计划的顺序中单位的百分比或更多

PLAN_AVG_PREPARATION_TO_EXECUTE = 0.5,		— % or more average plan preparation before executing

PLAN_AVG_PREPARATION_TO_EXECUTE = 0.5， — 执行前的平均计划准备百分比或更多



REDEPLOY_DISTANCE_VS_ORDER_SIZE = 1.0,		— Factor applied to the path length of a unit compared to length of an order to determine if it should use strategic redeployment

REDEPLOY_DISTANCE_VS_ORDER_SIZE = 1.0， — 应用于单元路径长度与订单长度的比较的系数，以确定其是否应使用战略重新部署



FORT_LEVEL_TO_CONSIDER_HIGHLY_FORTIFIED = 1,	— Provinces above this level of fortification will be considered highly fortified by plan evaluation

FORT_LEVEL_TO_CONSIDER_HIGHLY_FORTIFIED = 1， — 高于此设防级别的省份将通过计划评估被视为高度设防

PLAN_VALUE_FORTIFICATION_LEVEL_MAX_PENALTY = -0.5,	—Max plan value penalty from fortification. This is scaled by number of provinces along a frontline, over the number which exceed the fort value value above

PLAN_VALUE_FORTIFICATION_LEVEL_MAX_PENALTY = -0.5， —设防的最大计划值惩罚。这是根据前线的省份数量，超过上述要塞值的数量来缩放的。



MAX_ALLOWED_NAVAL_DANGER = 80,				— AI will ignore naval paths that has danger value of above this threshold while assigning units

MAX_ALLOWED_NAVAL_DANGER = 80， — 在分配单位时，AI 将忽略危险值高于此阈值的海军路径

TRANSFER_DANGER_HOSTILE_SHIPS = 50, 		— max danger from complete enemy naval supriority over ai in an area

TRANSFER_DANGER_HOSTILE_SHIPS = 50， — 在一个区域内，敌方海军完全优先于 AI 的最大危险



EXPORT_RESOURCE_TRADE_NEED_IMPORTANCE = 0.5, — how important is each lost resource to overexport for trade law selection

EXPORT_RESOURCE_TRADE_NEED_IMPORTANCE = 0.5， — 对于贸易法选择来说，每种资源损失对超额出口的重要性



OPERATION_EQUIPMENT_NEED_PRODUCTION_MULT = 1.0, — equipment requests for operations will be added the equipment needs that ai considers while assigning factories to production

OPERATION_EQUIPMENT_NEED_PRODUCTION_MULT = 1.0， — 在将工厂分配到生产环境时，AI 会考虑的设备需求中加入作的设备请求



MIN_FUEL_RATIO_TO_NOT_IGNORE_STRIKE_FORCE_COST = 0.0, — ai will still assign strike forces unless fuel ratio drops below this one

MIN_FUEL_RATIO_TO_NOT_IGNORE_STRIKE_FORCE_COST = 0.0， — 除非燃料比率低于此比率，否则 AI 仍会分配打击部队

MIN_FUEL_RATIO_TO_NOT_IGNORE_INVASION_SUPPORT_COST = 0.0, — ai will still naval invasion support forces unless fuel ratio drops below this one

MIN_FUEL_RATIO_TO_NOT_IGNORE_INVASION_SUPPORT_COST = 0.0， — AI 仍将提供海军入侵支援部队，除非燃料比率降至此比率以下



ENEMY_HOME_AREA_RATIO_TO_DISABLE_INVASIONS = 0.3, — if we are fighting against an enemy home area from our home area and if the enemy area is larger than this ratio, non strategy invasions are disabled

ENEMY_HOME_AREA_RATIO_TO_DISABLE_INVASIONS = 0.3， — 如果我们从主区域与敌方主区域作战，并且敌方区域大于此比率，则禁用非策略入侵



HOURS_BETWEEN_ENCIRCLEMENT_DISCOVERY = 72,	— Per army, interval in hours between refresh of which provinces it considers make up potential encirclement points

HOURS_BETWEEN_ENCIRCLEMENT_DISCOVERY = 72， — 每支军队，它认为构成潜在包围点的省份刷新之间的间隔（以小时为单位）



FASCISTS_BEFRIEND_FASCISTS = 10,

FASCISTS_BEFRIEND_FASCISTS = 10，

FASCISTS_BEFRIEND_DEMOCRACIES = -25,

FASCISTS_BEFRIEND_DEMOCRACIES = -25，

FASCISTS_BEFRIEND_COMMUNISTS = -25,

FASCISTS_BEFRIEND_COMMUNISTS = -25，

FASCISTS_ALLY_FASCISTS = 0,

FASCISTS_ALLY_FASCISTS = 0，

FASCISTS_ALLY_DEMOCRACIES = -100,

FASCISTS_ALLY_DEMOCRACIES = -100，

FASCISTS_ALLY_COMMUNISTS = -100,

FASCISTS_ALLY_COMMUNISTS = -100，

FASCISTS_ANTAGONIZE_FASCISTS = -10,

FASCISTS_ANTAGONIZE_FASCISTS = -10，

FASCISTS_ANTAGONIZE_DEMOCRACIES = 100,

FASCISTS_ANTAGONIZE_DEMOCRACIES = 100，

FASCISTS_ANTAGONIZE_COMMUNISTS = 100,

FASCISTS_ANTAGONIZE_COMMUNISTS = 100，

DEMOCRACIES_BEFRIEND_FASCISTS = -25,

DEMOCRACIES_BEFRIEND_FASCISTS = -25，

DEMOCRACIES_BEFRIEND_DEMOCRACIES = 0,

DEMOCRACIES_BEFRIEND_DEMOCRACIES = 0，

DEMOCRACIES_BEFRIEND_COMMUNISTS = -25,

DEMOCRACIES_BEFRIEND_COMMUNISTS = -25，

DEMOCRACIES_ALLY_FASCISTS = -50,

DEMOCRACIES_ALLY_FASCISTS = -50，

DEMOCRACIES_ALLY_DEMOCRACIES = 0,

DEMOCRACIES_ALLY_DEMOCRACIES = 0，

DEMOCRACIES_ALLY_COMMUNISTS = -50,

DEMOCRACIES_ALLY_COMMUNISTS = -50，

DEMOCRACIES_ANTAGONIZE_FASCISTS = 0,

DEMOCRACIES_ANTAGONIZE_FASCISTS = 0，

DEMOCRACIES_ANTAGONIZE_DEMOCRACIES = -25,

DEMOCRACIES_ANTAGONIZE_DEMOCRACIES = -25，

DEMOCRACIES_ANTAGONIZE_COMMUNISTS = 0,

DEMOCRACIES_ANTAGONIZE_COMMUNISTS = 0，

COMMUNISTS_BEFRIEND_FASCISTS = -25,

COMMUNISTS_BEFRIEND_FASCISTS = -25，

COMMUNISTS_BEFRIEND_DEMOCRACIES = -25,

COMMUNISTS_BEFRIEND_DEMOCRACIES = -25，

COMMUNISTS_BEFRIEND_COMMUNISTS = 25,

COMMUNISTS_BEFRIEND_COMMUNISTS = 25，

COMMUNISTS_ALLY_FASCISTS = -100,

COMMUNISTS_ALLY_FASCISTS = -100，

COMMUNISTS_ALLY_DEMOCRACIES = -50,

COMMUNISTS_ALLY_DEMOCRACIES = -50，

COMMUNISTS_ALLY_COMMUNISTS = 0,

COMMUNISTS_ALLY_COMMUNISTS = 0，

COMMUNISTS_ANTAGONIZE_FASCISTS = 100,

COMMUNISTS_ANTAGONIZE_FASCISTS = 100，

COMMUNISTS_ANTAGONIZE_DEMOCRACIES = 10,

COMMUNISTS_ANTAGONIZE_DEMOCRACIES = 10，

COMMUNISTS_ANTAGONIZE_COMMUNISTS = -10,

COMMUNISTS_ANTAGONIZE_COMMUNISTS = -10，



TENSION_MIN_FOR_GUARANTEE_VS_MINOR = 10, — for non faction people AI will not consider you worth guaranteeing below this

TENSION_MIN_FOR_GUARANTEE_VS_MINOR = 10， — 对于非派系的人，AI 不会认为你值得低于这个



NUM_AI_MESSAGES = 10,				— Set to whatever category has the highest number of messages

NUM_AI_MESSAGES = 10 — 设置为消息数量最多的任何类别



DIPLOMACY_FACTION_WAR_WANTS_HELP = 50,	— Desire to send to nations to join a faction if you are at war

DIPLOMACY_FACTION_WAR_WANTS_HELP = 50， — 如果你处于战争状态，渴望派遣到各国加入一个派系

DIPLOMACY_FACTION_CIVILWAR_WANTS_HELP = -50,

DIPLOMACY_FACTION_CIVILWAR_WANTS_HELP = -50，

FACTION_UNSTABLE_ACCEPTANCE = -100,

FACTION_UNSTABLE_ACCEPTANCE = -100，

DIPLOMACY_AT_WAR_WITH_ALLY_RELUCTANCE = -1000,

DIPLOMACY_AT_WAR_WITH_ALLY_RELUCTANCE = -1000，

DIPLOMACY_FACTION_JOIN_COUP_INITIATOR_BONUS = 70,	— If a country initiated coup on an another country, civil war revolter is more likely to join initiator’s faction

DIPLOMACY_FACTION_JOIN_COUP_INITIATOR_BONUS = 70， — 如果一个国家对另一个国家发动政变，内战叛乱者更有可能加入发起者的派系



SHIPS_PRODUCTION_BASE_COST = 10000,					— Used by the AI to normalize IC values when picking what ship to build.

SHIPS_PRODUCTION_BASE_COST = 10000， — AI 在选择要建造的飞船时使用它来标准化 IC 值。

NEEDED_NAVAL_FACTORIES_EXPENSIVE_SHIP_BONUS = 12, — Amount of naval yards you need to get a bonus to building really expensive ships

NEEDED_NAVAL_FACTORIES_EXPENSIVE_SHIP_BONUS = 12， — 建造非常昂贵的船只所需的海军造船厂数量



FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.5, — ai will consider a front fortified if this ratio of provinces has fort

FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.5， — 如果这个省份比例有堡垒，AI 会认为前线是设防的

HEAVILY_FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.5, — ai will consider a front super fortified if this ratio of provinces has lots of forts

HEAVILY_FORTIFIED_RATIO_TO_CONSIDER_A_FRONT_FORTIFIED = 0.5， — 如果这个省份比例有很多要塞，AI 会认为前线是超级设防的

FORTIFIED_MIN_ORG_FACTOR_TO_CONSIDER_A_FRONT_FORTIFIED = 0.2, — ai will treat fortified provinces as unfortified if no unit in that province has an organization factor at least this high

FORTIFIED_MIN_ORG_FACTOR_TO_CONSIDER_A_FRONT_FORTIFIED = 0.2， — 如果该省份中没有单位的组织系数至少达到这个高，则 AI 会将该省份视为未设防



DESPERATE_AI_MIN_UNIT_ASSIGN_TO_ESCAPE = 0,			— AI will assign at least this amount of units to break from desperate situations

DESPERATE_AI_MIN_UNIT_ASSIGN_TO_ESCAPE = 0， — AI 将至少分配此数量的单位以摆脱绝望的情况



DESPERATE_AI_WEAK_UNIT_STR_LIMIT = 0.35,					— ai will increase number of units assigned to break from desperate situations when units are start falling lower than this str limit

DESPERATE_AI_WEAK_UNIT_STR_LIMIT = 0.35， — 当单位开始低于此 str 限制时，AI 将增加分配给从绝望情况下突破的单位数量

DESPERATE_AI_MIN_ORG_BEFORE_ATTACK = 0.3,					— ai will wait for this much org to attack an enemy prov in desperate situations

DESPERATE_AI_MIN_ORG_BEFORE_ATTACK = 0.3， — AI 将在绝望的情况下等待这么多组织攻击敌方省份

DESPERATE_AI_MIN_ORG_BEFORE_MOVE = 0.06,					— ai will wait for this much org to move in desperate situations

DESPERATE_AI_MIN_ORG_BEFORE_MOVE = 0.06， — AI 将在绝望的情况下等待这么多组织移动

DESPERATE_ATTACK_WITHOUT_ORG_WHEN_NO_ORG_GAIN = 120,		— if ai can’t regain enough org to attack in this many hours, it will go truly desperate and attack anyway (still has to wait for move org)

DESPERATE_ATTACK_WITHOUT_ORG_WHEN_NO_ORG_GAIN = 120， — 如果 AI 在这几个小时内无法重新获得足够的组织来攻击，它将真正绝望地无论如何都会攻击（仍然必须等待移动组织）



MAX_REQUEST_EXPEDITIONARIES_ARMY_RATIO = 0.3,				— AI will not accept expeditionary requests if its expeditions are above this ratio

MAX_REQUEST_EXPEDITIONARIES_ARMY_RATIO = 0.3， — 如果 AI 的探险高于此比率，则 AI 将不会接受远征请求

CASUALTY_RATIO_TO_PULL_EXPEDITIONARIES_BACK = 0.1,			— AI will pull expeditioniries back if its casualties is aboce this ratio compared to their total deployed manpower

CASUALTY_RATIO_TO_PULL_EXPEDITIONARIES_BACK = 0.1， — 如果 AI 的伤亡人数超过其部署的总人力的比率，则 AI 会将远征军撤退

CASUALTY_RATIO_TO_NOT_SEND_EXPEDITIONARIES = 0.05,			— AI will not send expeditioniries if its casualties is aboce this ratio compared to their total deployed manpower

CASUALTY_RATIO_TO_NOT_SEND_EXPEDITIONARIES = 0.05， — 如果 AI 的伤亡人数与其部署的总人力相比超过这个比例，则 AI 不会派遣远征队



SURRENDER_LEVEL_TO_PULL_EXPEDITIONARIES_BACK = 0.3,			— AI will pull expeditioniries back if its surrender level is above this ratio

SURRENDER_LEVEL_TO_PULL_EXPEDITIONARIES_BACK = 0.3， — 如果 AI 的投降等级高于此比率，AI 将撤回远征

SURRENDER_LEVEL_TO_NOT_SEND_EXPEDITIONARIES = 0.15,			— AI will not send expeditioniries if its surrender level is above this ratio

SURRENDER_LEVEL_TO_NOT_SEND_EXPEDITIONARIES = 0.15， — 如果 AI 的投降等级高于此比率，则不会派遣远征军



EXPEDITIONARY_CASUALTY_DECAY_RATIO = 0.3333,				— expeditionary manpower lost will decay by thousands daily by this ratio (compared to deployed manpower)

EXPEDITIONARY_CASUALTY_DECAY_RATIO = 0.3333， — 按这个比例，远征队人力的损失每天会衰减数千人（与部署的人力相比）

NUM_DAYS_TO_PULL_EXPEDITIONARIES_BACK = 14,					— AI will pull units back from non-ai players after waiting this days if things are not going well for its units

NUM_DAYS_TO_PULL_EXPEDITIONARIES_BACK = 14， — 如果 AI 的单位情况不顺利，AI 会在等待这几天后从非 AI 玩家那里撤出单位



ACCESS_SCORE_FOR_DEMOCRATIC_COUNTRIES = 500,				— democracies gives each other access if they have a common enemy

ACCESS_SCORE_FOR_DEMOCRATIC_COUNTRIES = 500，— 如果民主国家有共同的敌人，它们就会相互访问



AI_AIR_MISSION_COVERAGE_TO_STAY_PUT = 0.5,					— AI will not rebase air wings on missions if their new mission target exceeds this percentage of region coverage

AI_AIR_MISSION_COVERAGE_TO_STAY_PUT = 0.5， — 如果 AI 的新任务目标超过此区域覆盖率百分比，AI 不会在任务中重新定位空军联队



ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS_AT_WAR = 250,		— each access reduces the desire of next access

ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS_AT_WAR = 250，— 每次访问都会减少下次访问的愿望

ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS = 500,				— each access reduces the desire of next access

ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS = 500， — 每次访问都会减少下次访问的愿望

NAVAL_ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS_AT_WAR = 150,

NAVAL_ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS_AT_WAR = 150，

NAVAL_ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS = 250,

NAVAL_ACCESS_SCORE_PENALTY_PER_EXISTING_ACCESS = 250，



NAVAL_SUPREMACY_WEIGHT_PER_DIVISION_ON_INVASION_ORDER = 6,	— adds to supremacy requests for regions with active or pending naval invasions

NAVAL_SUPREMACY_WEIGHT_PER_DIVISION_ON_INVASION_ORDER = 6， — 为正在进行或即将进行的海军入侵的地区增加至高无上的请求



TOO_INSIGNIFICANT_ARMY_RATIO_BEGIN = 0.75,					— if army ratio is of a country is larger than this threshold, it will be less reluctant to accept certain diplo actions

TOO_INSIGNIFICANT_ARMY_RATIO_BEGIN = 0.75， — 如果一个国家的军队比率大于此阈值，则它不会那么不愿意接受某些 diplo 行动

TOO_INSIGNIFICANT_MAX_PENALTY = 350,						— max penalty that will be applied for thinking a country is too insignificant

TOO_INSIGNIFICANT_MAX_PENALTY = 350， — 认为一个国家太微不足道时将适用的最高处罚



— Calculating wanted nr of divisions

— 计算所需的除法 nr

WANTED_UNITS_INDUSTRY_FACTOR = 1.60, — How many units a country wants is partially based on how much military industry that is available

WANTED_UNITS_INDUSTRY_FACTOR = 1.60， — 一个国家想要多少单位部分取决于可用的军事工业数量

WANTED_UNITS_THREAT_BASE = 0.7, — If no threat, multiply min wanted units by this

WANTED_UNITS_THREAT_BASE = 0.7， — 如果没有威胁，则将最小想要的单位数乘以此

WANTED_UNITS_THREAT_MAX = 6.0, — Normalized threat is clamped to this

WANTED_UNITS_THREAT_MAX = 6.0， — 标准化威胁受此限制

WANTED_UNITS_WAR_THREAT_FACTOR = 1.15, — Factor threat with this if country is at war. this value is overriden by the value in ideology database if that value exceedes this.

WANTED_UNITS_WAR_THREAT_FACTOR = 1.15， — 如果国家处于战争状态，则用这个系数计算威胁。如果该值超过此值，则该值将被 Ideology 数据库中的值覆盖。

WANTED_UNITS_DANGEROUS_NEIGHBOR_FACTOR = 1.15, — Factor if has dangerous neighbor

WANTED_UNITS_DANGEROUS_NEIGHBOR_FACTOR = 1.15， — 如果存在危险邻居的因子

WANTED_UNITS_MANPOWER_DIVISOR = 21000, — Normalizing divisor for AI manpower. (for each x max available manpower, they want one division)

WANTED_UNITS_MANPOWER_DIVISOR = 21000， — 为 AI 人力标准化除数。（每 x 个最大可用人力，他们需要一个师）

WANTED_UNITS_WEIGHT_FRONTS_WANT = 0.35, — Weight of front needs when computing final nr wanted units

WANTED_UNITS_WEIGHT_FRONTS_WANT = 0.35， — 计算最终 nr 所需单位时前端需求的权重

WANTED_UNITS_WEIGHT_FACTORIES = 0.45, — Weight of military factories when computing final nr wanted units

WANTED_UNITS_WEIGHT_FACTORIES = 0.45， — 计算最终 nr 所需单位时军工厂的权重

WANTED_UNITS_WEIGHT_MANPOWER = 0.3, — Weight of manpower availability when computing final nr wanted units

WANTED_UNITS_WEIGHT_MANPOWER = 0.3， — 计算最终 nr 所需单位时人力可用性的权重

WANTED_UNITS_MIN_DEFENCE_FACTOR = 0.4,						— Factor on units required for min defence

WANTED_UNITS_MIN_DEFENCE_FACTOR = 0.4， — 最小防御所需的单位系数

— End of calculating wanted nr of divisions

— 结束计算分区的通缉 nr



WANTED_UNITS_MAX_WANTED_CAP = 500,	— Maximum wanted divisions for a country. This can be exceeded by certain hardcoded multipliers, but not by base calculation logic.

WANTED_UNITS_MAX_WANTED_CAP = 500 — 一个国家/地区的最大所需分区数。某些硬编码乘数可以超过此值，但不能由基本计算逻辑超过。



WANTED_LAND_PLANES_PER_BASE_CAPACITY_FACTOR = 1,	— Scales how many land-based planes the AI want per air base space (excluding carriers).

WANTED_LAND_PLANES_PER_BASE_CAPACITY_FACTOR = 1， — 缩放 AI 在每个空军基地空间（不包括航母）所需的陆基飞机数量。

WANTED_LAND_PLANES_PER_DIVISION = 20,				— How many land-based planes the AI want for each division it wants.

WANTED_LAND_PLANES_PER_DIVISION = 20， — AI 想要的每个师有多少架陆基飞机。

WANTED_LAND_PLANES_TOTAL_MAX_PER_DIVISION = 100,	— The max total number of land-based planes the AI want.

WANTED_LAND_PLANES_TOTAL_MAX_PER_DIVISION = 100 — AI 所需的陆基飞机的最大总数。



WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_FACTOR = 1.5,					— Scales how many carrier planes the AI want per carrier deck space.

WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_FACTOR = 1.5 — 扩展 AI 希望每个航母甲板空间的航母飞机数量。

WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_IN_PRODUCTION_FACTOR = 1,	— Scales how many carrier planes the AI want per deck space of carriers in production.

WANTED_CARRIER_PLANES_PER_CARRIER_CAPACITY_IN_PRODUCTION_FACTOR = 1， — 扩展 AI 在生产中每个航母甲板空间所需的航母飞机数量。

CARRIER_CAPACITY_IN_PRODUCTION_MAX_DAYS_LEFT_TO_INCLUDE_FACTOR = 365,	— Carriers in production that will take more days to complete than this value will be ignored when calculating the above.

CARRIER_CAPACITY_IN_PRODUCTION_MAX_DAYS_LEFT_TO_INCLUDE_FACTOR = 365 — 在计算上述值时，将忽略生产中需要比此值多天数的承运商。



START_TRAINING_EQUIPMENT_LEVEL = 0.40, — ai will not start to train if equipment drops below this level

START_TRAINING_EQUIPMENT_LEVEL = 0.40， — 如果设备低于此水平，AI 将不会开始训练

STOP_TRAINING_EQUIPMENT_LEVEL = 0.30, — ai will not train if equipment drops below this level

STOP_TRAINING_EQUIPMENT_LEVEL = 0.30， — 如果设备低于此水平，AI 将不会进行训练

START_TRAINING_SUPPLY_LEVEL = 0.40, — ai will not start to train if supply ratio drops below this level

START_TRAINING_SUPPLY_LEVEL = 0.40， — 如果供应比率低于此水平，AI 将不会开始训练

STOP_TRAINING_SUPPLY_LEVEL = 0.30, — ai will not train if supply ratio drops below this level

STOP_TRAINING_SUPPLY_LEVEL = 0.30， — 如果供应比率低于此水平，AI 将不会进行训练

STOP_TRAINING_FULLY_TRAINED_FACTOR = 0.95, — ai will not train if at least this ratio of divisions in the army are fully trained

STOP_TRAINING_FULLY_TRAINED_FACTOR = 0.95， — 如果军队中至少这个比例的师接受过充分训练，AI 就不会训练



BUILD_REFINERY_LACK_OF_RESOURCE_MODIFIER = 0.003,	— How much lack of resources are worth when evaluating what to build.

BUILD_REFINERY_LACK_OF_RESOURCE_MODIFIER = 0.003， — 在评估要构建的内容时，资源不足的价值。



DIVISION_DESIGN_MAX_FAILED_DAYS = 60,					— max days we keep track of since failure of a template design update

DIVISION_DESIGN_MAX_FAILED_DAYS = 60， — 自模板设计更新失败以来我们跟踪的最大天数



DIVISION_MATCH_ROLE_BOOST_FACTOR = 1.2, — When finding closest matching existing template to a target template, boost the score by this much if the template also has the correct role

DIVISION_MATCH_ROLE_BOOST_FACTOR = 1.2， — 在找到与目标模板最匹配的现有模板时，如果模板也具有正确的角色，则将分数提高这么多



EQUIPMENT_DESIGN_MAX_FAILED_DAYS = 60,					— max days we keep track of since failure of an equipment design update

EQUIPMENT_DESIGN_MAX_FAILED_DAYS = 60， — 自设备设计更新失败以来我们跟踪的最大天数



UPGRADE_DIVISION_RELUCTANCE = 7,					— How often to consider upgrading to new templates for units in the field

UPGRADE_DIVISION_RELUCTANCE = 7， — 考虑为外业设备升级到新模板的频率

UPGRADE_PERCENTAGE_OF_FORCES = 0.03,				— How big part of the army that should be considered for upgrading

UPGRADE_PERCENTAGE_OF_FORCES = 0.03， — 应该考虑升级的军队的很大一部分

REMOVE_OBSOLETE_TEMPLATE_DAYS = 180, — Remove obsolete and unused templates if they have been marked as obsolete for x days. Non-positive value means “never remove”.

REMOVE_OBSOLETE_TEMPLATE_DAYS = 180， — 如果过时和未使用的模板已标记为过时 x 天，请将其删除。非正值表示 “never remove”。



REFIT_SHIP_RELUCTANCE = 28,							— How often to consider refitting to new equipment variants for ships in the field

REFIT_SHIP_RELUCTANCE = 28， — 考虑为现场船舶改装新设备变体的频率

REFIT_SHIP_PERCENTAGE_OF_FORCES = 0.1,				— How big part of the navy that should be considered for refitting

REFIT_SHIP_PERCENTAGE_OF_FORCES = 0.1， — 应该考虑改装海军的多大部分



NAVY_PREFERED_MAX_SIZE = 25,						— AI will generally attempt to merge fleets into this size, but as a soft limit.

NAVY_PREFERED_MAX_SIZE = 25，— AI 通常会尝试将队列合并到此大小，但作为软限制。

INVASION_COASTAL_PROVS_PER_ORDER = 24,				— AI will consider one extra invasion per number of provinces stated here (num orders = total coast / this)

INVASION_COASTAL_PROVS_PER_ORDER = 24， — AI 将考虑此处所述的每个省份数量进行一次额外入侵（订单数量 = 总海岸数 / 此）

MIN_INVASION_AREA_SIZE_FOR_FLOATING_HARBORS = 15, — AI will consider using floating harbors for naval invasion if invasion area is larger than this many provinces

MIN_INVASION_AREA_SIZE_FOR_FLOATING_HARBORS = 15， — 如果入侵区域大于这么多省份，AI 将考虑使用浮动港口进行海军入侵



CONVOY_NEED_SAFETY_BUFFER = 1.30,					— AI will try and keep 15% more convoys than what it needs.

CONVOY_NEED_SAFETY_BUFFER = 1.30， — AI 将尝试保留比它需要的多 15% 的护航队。

REGION_THREAT_PER_SUNK_CONVOY = 25,					— Threat value per convoy sunk in a region. Decays over time.

REGION_THREAT_PER_SUNK_CONVOY = 25 — 在一个区域中沉没的每个车队的威胁值。随着时间的推移而衰减。

REGION_THREAT_LEVEL_TO_AVOID_REGION = 25 * 10,		— How much threat must be generated in region ( by REGION_THREAT_PER_SUNK_CONVOY ) so the AI will decide to mark the region as avoid

REGION_THREAT_LEVEL_TO_AVOID_REGION = 25 * 10， — 区域中必须产生多少威胁 （ REGION_THREAT_PER_SUNK_CONVOY ） ，以便 AI 决定将区域标记为 avoid

REGION_THREAT_LEVEL_TO_BLOCK_REGION = 25 * 100,		— How much threat must be generated in region ( by REGION_THREAT_PER_SUNK_CONVOY ) so the AI will decide to mark the region as avoid

REGION_THREAT_LEVEL_TO_BLOCK_REGION = 25 * 100， — 区域中必须生成多少威胁 （ REGION_THREAT_PER_SUNK_CONVOY ），以便 AI 决定将区域标记为 avoid

REGION_CONVOY_DANGER_DAILY_DECAY = 1,				— When convoys are sunk it generates threat in the region which the AI uses to prio nalval missions

REGION_CONVOY_DANGER_DAILY_DECAY = 1， — 当护航队被击沉时，它会在 AI 用于执行 nalval 任务的区域产生威胁



PRODUCTION_LINE_SWITCH_SURPLUS_NEEDED_MODIFIER = 0.2,	— Is modified by efficency modifiers.

PRODUCTION_LINE_SWITCH_SURPLUS_NEEDED_MODIFIER = 0.2， — 由效率修饰符修饰。

PLAN_ACTIVATION_MAJOR_WEIGHT_FACTOR = 1.5,			— AI countries will hold on activating plans if stronger countries have plans in the same location. Majors count extra (value of 1 will negate this)

PLAN_ACTIVATION_MAJOR_WEIGHT_FACTOR = 1.5， — 如果较强的国家在同一地点有计划，AI 国家将保留启动计划。Majors count extra （值为 1 将否定此）

PLAN_ACTIVATION_PLAYER_WEIGHT_FACTOR = 50.0,		— AI countries will hold on activating plans if player controlled countries have plans in the same location.

PLAN_ACTIVATION_PLAYER_WEIGHT_FACTOR = 50.0， — 如果玩家控制的国家在同一地点有计划，则 AI 国家/地区将暂停激活计划。

AREA_DEFENSE_BASE_IMPORTANCE = 30, — Area defense order base importance value (used for determining order of troop selections)

AREA_DEFENSE_BASE_IMPORTANCE = 30， — 区域防御顺序基础重要性值（用于确定部队选择的顺序）

AREA_DEFENSE_CIVIL_WAR_IMPORTANCE = 30, — Area defense order importance value when a country is in a civil war as target or revolter.

AREA_DEFENSE_CIVIL_WAR_IMPORTANCE = 30， — 当一个国家作为目标或叛乱者处于内战中时，区域防御命令重要性值。

AREA_DEFENSE_IMPORTANCE_FACTOR = 1.0, — used to balance defensive area importance vs other fronts

AREA_DEFENSE_IMPORTANCE_FACTOR = 1.0， — 用于平衡防守区域与其他前线的重要性



MAX_DISTANCE_NAVAL_INVASION = 200.0,				— AI is extremely unwilling to plan naval invasions above this naval distance limit.

MAX_DISTANCE_NAVAL_INVASION = 200.0， — AI 极不愿意计划超过此海军距离限制的海军入侵。

ENEMY_NAVY_STRENGTH_DONT_BOTHER = 2.5,				— If the enemy has a navy at least these many times stronger that the own, don’t bother invading

ENEMY_NAVY_STRENGTH_DONT_BOTHER = 2.5， — 如果敌人的海军至少比自己的海军强大很多倍，就不要费心去入侵

MIN_SUPPLY_USE_SANITY_CAP = 100,					— Ignore supply cap if below this value when deciding on how many divisions to produce.

MIN_SUPPLY_USE_SANITY_CAP = 100 — 在决定要生产多少个分区时，如果低于此值，则忽略供应上限。

MAX_SUPPLY_DIVISOR = 1.75,							— To make sure the AI does not overdeploy divisions. Higher number means more supply per unit.

MAX_SUPPLY_DIVISOR = 1.75， — 确保 AI 不会过度部署分区。数字越高，意味着每单位的供应量越多。

MISSING_CONVOYS_BOOST_FACTOR = 50.0,				— The more convoys a country is missing, the more resources it diverts to cover this.

MISSING_CONVOYS_BOOST_FACTOR = 50.0， — 一个国家缺少的车队越多，它为弥补这一需求而转移的资源就越多。

TRANSPORTS_PER_PARATROOPER = 20,					— Currently unused.

TRANSPORTS_PER_PARATROOPER = 20， — 当前未使用。

MAX_MICRO_ATTACKS_PER_ORDER = 3,					— AI goes through its orders and checks if there are situations to take advantage of

MAX_MICRO_ATTACKS_PER_ORDER = 3， — AI 检查其订单并检查是否有可利用的情况

FALLBACK_LOSING_FACTOR = 1.0,						— The lower this number, the longer the AI will hold the line before sending them to the fallback line

FALLBACK_LOSING_FACTOR = 1.0， — 此数字越小，AI 在将其发送到回退线之前保持线的时间就越长

PRODUCTION_MAX_PROGRESS_TO_SWITCH_NAVAL = 0.1,		— AI will not replace ships being built by newer types if progress is above this

PRODUCTION_MAX_PROGRESS_TO_SWITCH_NAVAL = 0.1， — 如果进度高于此水平，AI 不会取代由新型建造的船只

PRODUCTION_WAIT_TO_FINISH_IF_EXPENSIVE = 0.25, — If produced item is expensive (producing less than one/week), wait to finish item if progress is above this

PRODUCTION_WAIT_TO_FINISH_IF_EXPENSIVE = 0.25， — 如果生产的物品很昂贵（每周生产少于一个），如果进度高于此进度，则等待完成项目

PRODUCTION_WAIT_TO_FINISH_IF_CHEAP = 0.75, — If produced item is cheap (producing more than one/week), wait to finish item if progress is above this

PRODUCTION_WAIT_TO_FINISH_IF_CHEAP = 0.75， — 如果生产的物品很便宜（每周生产超过一个），如果进度高于此进度，则等待完成项目

STATE_CONTROL_FOR_AREA_DEFENSE = 0.4,				— To avoid AI sending area defense to area with very little foothold

STATE_CONTROL_FOR_AREA_DEFENSE = 0.4， — 避免 AI 将区域防御发送到立足点非常小的区域

FORCE_FACTOR_AGAINST_EXTRA_MINOR = 0.15,			— AI considers generating wargoals against minors below this % of force compared to themselves to get at a bigger enemy.

FORCE_FACTOR_AGAINST_EXTRA_MINOR = 0.15， — AI 会考虑对低于此兵力百分比的未成年人生成战争目标，以对付更大的敌人。

MAX_EXTRA_WARGOAL_GENERATION = 2,					— AI may want to generate wargoals against weak minors to get at larger enemy, but never more that this at any given time.

MAX_EXTRA_WARGOAL_GENERATION = 2， — AI 可能希望针对弱小的未成年人生成战争目标以对付更大的敌人，但在任何给定时间都不会超过这个目标。

NAVAL_MISSION_DISTANCE_BASE = 3500,					— Base value when AI is evaluating distance score to places

NAVAL_MISSION_DISTANCE_BASE = 3500 — AI 评估到地点的距离分数时的基值

NAVAL_MISSION_INVASION_BASE = 1000,					— Base score for region with naval invasion (modified dynamically by prioritizing orders)

NAVAL_MISSION_INVASION_BASE = 1000， — 海军入侵区域的基本分数（通过确定顺序的优先级动态修改）

NAVAL_MISSION_AGGRESSIVE_PATROL_DIVISOR = 1,		— Divides patrol score when not defending

NAVAL_MISSION_AGGRESSIVE_PATROL_DIVISOR = 1， — 不防守时除以巡逻分数

NAVAL_MISSION_AGGRESSIVE_ESCORT_DIVISOR = 2,		— Divides escort score when not defending

NAVAL_MISSION_AGGRESSIVE_ESCORT_DIVISOR = 2， — 不防守时除以护卫分数

NAVAL_MISSION_PATROL_NEAR_OWNED = 500,			— Extra patrol mission score near owned provinces

NAVAL_MISSION_PATROL_NEAR_OWNED = 500， — 在拥有的省份附近完成额外的巡逻任务得分

NAVAL_MISSION_ESCORT_NEAR_OWNED = 300,			— Extra escort mission score near owned provinces

NAVAL_MISSION_ESCORT_NEAR_OWNED = 300， — 在拥有的省份附近额外护送任务得分

NAVAL_MISSION_PATROL_NEAR_CONTROLLED = 120,		— Extra patrol mission score near controlled provinces

NAVAL_MISSION_PATROL_NEAR_CONTROLLED = 120， — 在受控省份附近额外完成巡逻任务得分

NAVAL_MISSION_ESCORT_NEAR_CONTROLLED = 200,		— Extra escort mission score near controlled provinces

NAVAL_MISSION_ESCORT_NEAR_CONTROLLED = 200， — 在受控省份附近额外护航任务得分

NAVAL_MISSION_MINES_PLANTING_NEAR_OWNED = 40000,

NAVAL_MISSION_MINES_PLANTING_NEAR_OWNED = 40000，

NAVAL_MISSION_MINES_PLANTING_NEAR_CONTROLLED = 30000,

NAVAL_MISSION_MINES_PLANTING_NEAR_CONTROLLED = 30000，

NAVAL_MISSION_MINES_SWEEPING_NEAR_OWNED = 60000,	 — How likely the AI will do the sweeping missions. The value is scaled by the amount of mines to sweep.

NAVAL_MISSION_MINES_SWEEPING_NEAR_OWNED = 60000， — AI 执行清扫任务的可能性。该值按要扫荡的地雷数量进行缩放。

NAVAL_MISSION_MINES_SWEEPING_NEAR_CONTROLLED = 50000,— Same as above, but nearby the controlled territory.

NAVAL_MISSION_MINES_SWEEPING_NEAR_CONTROLLED = 50000，— 同上，但靠近受控区域。

NEW_LEADER_EXTRA_CP_FACTOR = 2.0,					— Country must have at least this many times extra command power to get new admirals or army leaders

NEW_LEADER_EXTRA_CP_FACTOR = 2.0， — 国家必须至少拥有这么多倍的额外指挥权才能获得新的海军上将或陆军领导人

SCARY_LEVEL_AVERAGE_DEFENSE = -0.7, — average front defense modifier to make it consider it as a PITA to go for

SCARY_LEVEL_AVERAGE_DEFENSE = -0.7， — 平均前防修正，使其被视为 PITA

ATTACK_HEAVILY_DEFENDED_LIMIT = 0.5,				— AI will not launch attacks against heavily defended fronts unless they consider to have this level of advantage (1.0 = 100%)

ATTACK_HEAVILY_DEFENDED_LIMIT = 0.5， — AI 不会对重兵把守的前线发动攻击，除非他们认为拥有这种水平的优势 （1.0 = 100%）

CANCEL_COMBAT_DISADVANTAGE_RATIO = 1.5, — If the enemy’s advantage ratio over us during (normal) combat is more than <value>, allow canceling the attack

CANCEL_COMBAT_DISADVANTAGE_RATIO = 1.5， — 如果在（正常）战斗中敌人对我们的优势比大于 <value>，则允许取消攻击

CANCEL_COMBAT_MIN_DURATION_HOURS = 48, — Only allow cancelling (normal) combat if at least <value> hours have passed

CANCEL_COMBAT_MIN_DURATION_HOURS = 48， — 仅在<value>至少已过去小时时才允许取消（正常）战斗

CANCEL_INVASION_COMBAT_DISADVANTAGE_RATIO = 3.5, — If the enemy’s advantage ratio over us during invasion combat is more than <value>, allow canceling the attack

CANCEL_INVASION_COMBAT_DISADVANTAGE_RATIO = 3.5， — 如果敌人在入侵战斗中对我们的优势比大于 <value>，则允许取消攻击

CANCEL_INVASION_COMBAT_MIN_DURATION_HOURS = 720, — Only allow cancelling invasion combat if at least <value> hours have passed

CANCEL_INVASION_COMBAT_MIN_DURATION_HOURS = 720， — 只有在<value>至少已经过了几个小时时才允许取消入侵战斗

MIN_PLAN_VALUE_TO_MICRO_INACTIVE = 0.25,			— The AI will not consider members of groups which plan is not activated AND evaluates lower than this.

MIN_PLAN_VALUE_TO_MICRO_INACTIVE = 0.25 — AI 不会考虑计划未激活且评估结果低于此值的组的成员。



MAX_UNITS_FACTOR_AREA_ORDER = 0.75,					— Factor for max number of units to assign to area defense orders

MAX_UNITS_FACTOR_AREA_ORDER = 0.75， — 分配给区域防御命令的最大单位数的系数

DESIRED_UNITS_FACTOR_AREA_ORDER = 0.7,				— Factor for desired number of units to assign to area defense orders

DESIRED_UNITS_FACTOR_AREA_ORDER = 0.7， — 分配给区域防御命令的所需单位数的系数

MIN_UNITS_FACTOR_AREA_ORDER = 1.0,					— Factor for min number of units to assign to area defense orders

MIN_UNITS_FACTOR_AREA_ORDER = 1.0， — 分配给区域防御命令的最小单位数的系数



MAX_UNITS_FACTOR_FRONT_ORDER = 1.0,					— Factor for max number of units to assign to area front orders

MAX_UNITS_FACTOR_FRONT_ORDER = 1.0， — 分配给区域前订单的最大单位数的系数

DESIRED_UNITS_FACTOR_FRONT_ORDER = 1.1,				— Factor for desired number of units to assign to area front orders

DESIRED_UNITS_FACTOR_FRONT_ORDER = 1.1， — 分配给区域前订单的所需单位数的系数

MIN_UNITS_FACTOR_FRONT_ORDER = 1.0,					— Factor for min number of units to assign to area front orders

MIN_UNITS_FACTOR_FRONT_ORDER = 1.0， — 分配给区域前订单的最小单位数的系数



MAX_UNITS_FACTOR_INVASION_ORDER = 1.0,				— Factor for max number of units to assign to naval invasion orders

MAX_UNITS_FACTOR_INVASION_ORDER = 1.0， — 分配给海军入侵命令的最大单位数的系数

DESIRED_UNITS_FACTOR_INVASION_ORDER = 1.0,			— Factor for desired number of units to assign to naval invasion orders

DESIRED_UNITS_FACTOR_INVASION_ORDER = 1.0， — 分配给海军入侵命令的所需单位数的系数

MIN_UNITS_FACTOR_INVASION_ORDER = 1.0,				— Factor for min number of units to assign to naval invasion orders

MIN_UNITS_FACTOR_INVASION_ORDER = 1.0， — 分配给海军入侵命令的最小单位数的系数



FRONT_UNITS_CAP_FACTOR = 15.0,						— A factor applied to total front size and supply use. Primarily effects small fronts

FRONT_UNITS_CAP_FACTOR = 15.0， — 应用于总前端尺寸和供应使用的系数。主要影响小锋面

MAX_DIST_PORT_RUSH = 20.0,							— If a unit is in enemy territory with no supply it will consider nearby ports within this distance.

MAX_DIST_PORT_RUSH = 20.0， — 如果一个单位在敌方领土上，没有补给，它会考虑此距离内的附近港口。



MIN_FIELD_STRENGTH_TO_BUILD_UNITS = 0.7,			— Cancel unit production if below this to get resources out to units in the field

MIN_FIELD_STRENGTH_TO_BUILD_UNITS = 0.7， — 如果低于此值，则取消单位生产，以将资源分配给字段中的单位

MIN_MANPOWER_TO_BUILD_UNITS = 0.7,					— Cancel unit production if below this to get resources out to units in the field

MIN_MANPOWER_TO_BUILD_UNITS = 0.7， — 如果低于此值，则取消单位生产，以将资源发放到现场的单位



AVERAGE_SUPPLY_USE_PESSIMISM = 1.5,					— Multiplier for when AI calculates average supply use of entire army.

AVERAGE_SUPPLY_USE_PESSIMISM = 1.5， — AI 计算整个军队的平均补给使用量的乘数。



PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY = 40,				— Added to AI desire to propose lend lease if recipent is same ideology (and AI can’t declare war on recipient)

PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY = 40， — 如果 recipent 是相同的意识形态（并且 AI 不能向接收者宣战），则添加到 AI 提议借出租赁的愿望中

PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 25,	— Added to AI desire to propose lend lease if recipent is same ideology and they are currently in civil war

PROPOSE_LEND_LEASE_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 25， — 如果 recipent 是相同的意识形态并且他们目前处于内战中，则添加到 AI 提议租借的愿望

SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY = 40,					— Added to AI desire to send volunteers if recipent is same ideology (and AI can’t declare war on recipient)

SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY = 40， — 如果 recipent 是相同的意识形态（并且 AI 不能向接收者宣战），则添加到 AI 派遣志愿者的愿望中

SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 25,		— Added to AI desire to send volunteers if recipent is same ideology and they are currently in civil war

SEND_VOLUNTEER_AIDESIRE_SAME_IDEOLOGY_CIVIL_WAR = 25， — 如果 recipent 是相同的意识形态并且他们目前处于内战中，则添加了 AI 派遣志愿者的愿望



REQUEST_LEND_LEASE_PROTECT_VALUE = 75,				— Limit for protect enemy desire for reducing lend lease desire

REQUEST_LEND_LEASE_PROTECT_VALUE = 75， — 保护敌人减少租借欲望的限额

REQUEST_LEND_LEASE_CONTAINS_VALUE = 100,			— Limit of contain enemy desire for boosting friendly help

REQUEST_LEND_LEASE_CONTAINS_VALUE = 100， — 遏制敌人对增强友方帮助的渴望的限制



FRONT_BULGE_RATIO_UPPER_CUTOFF = 1.5,				— If total bulginess is lower than this, the front is ignored.

FRONT_BULGE_RATIO_UPPER_CUTOFF = 1.5， — 如果总凸度低于此值，则忽略前部。

FRONT_BULGE_RATIO_LOWER_CUTOFF = 0.95,				— If local bulginess drops below this, a point of interest is found

FRONT_BULGE_RATIO_LOWER_CUTOFF = 0.95， — 如果局部凸度低于此值，则找到兴趣点

FRONT_CUTOFF_MIN_EDGE_PROXIMITY = 2,				— Minimum number of provinces to the front edge to determine for cutoff oportunity.

FRONT_CUTOFF_MIN_EDGE_PROXIMITY = 2， — 确定截止机会的到前边缘的最小省份数。



AIR_SCORE_DISTANCE_IMPACT = 0.3,					— Effect of distance applied to the score calculations

AIR_SCORE_DISTANCE_IMPACT = 0.3， — 应用于分数计算的距离的影响

DAYS_BETWEEN_AIR_PRIORITIES_UPDATE = 4,				— Amount of days between air ai updates priorities for air wings ( from 1 to N )

DAYS_BETWEEN_AIR_PRIORITIES_UPDATE = 4， — air ai 更新空军联队优先级之间的天数（从 1 到 N）



NAVAL_AIR_SUPERIORITY_IMPORTANCE = 0.10,			— Strategic importance of air superiority ( amount of enemy planes in area )

NAVAL_AIR_SUPERIORITY_IMPORTANCE = 0.10， — 空中优势的战略重要性（区域内敌机数量）

NAVAL_SHIP_AIR_IMPORTANCE = 2.0,					— Naval ship air importance

NAVAL_SHIP_AIR_IMPORTANCE = 2.0， — 海军舰艇空中重要性

NAVAL_SHIP_IN_PORT_AIR_IMPORTANCE = 6.0,			— Naval ship in the port air importance

NAVAL_SHIP_IN_PORT_AIR_IMPORTANCE = 6.0， — 海军舰艇在港口的空中重要性

NAVAL_COMBAT_AIR_IMPORTANCE = 8.0,					— Naval combat air importance

NAVAL_COMBAT_AIR_IMPORTANCE = 8.0， — 海战空中重要性

NAVAL_TRANSFER_AIR_IMPORTANCE = 0.0,				— Naval transfer air importance

NAVAL_TRANSFER_AIR_IMPORTANCE = 0.0， — 海军转移空中重要性

NAVAL_COMBAT_TRANSFER_AIR_IMPORTANCE = 50.0,		— Naval combat involving enemy land units

NAVAL_COMBAT_TRANSFER_AIR_IMPORTANCE = 50.0， — 涉及敌方陆地单位的海战

NAVAL_IMPORTANCE_SCALE = 0.65,						— Naval total importance scale (every naval score get’s multiplied by it)

NAVAL_IMPORTANCE_SCALE = 0.65， — 海军总重要性量表（每个海军分数乘以它）

NAVAL_COMBAT_OUR_NAVY_MULT_ON_IMPORTANCE = 0.35,	— Naval region importance are scaled by our ships as well

NAVAL_COMBAT_OUR_NAVY_MULT_ON_IMPORTANCE = 0.35 — 我们的舰艇也对海军地区的重要性进行了缩放

NAVAL_COMBAT_ALLY_NAVY_MULT_ON_IMPORTANCE = 0.15,	— Naval region importance are scaled by our ships as well

NAVAL_COMBAT_ALLY_NAVY_MULT_ON_IMPORTANCE = 0.15 — 海军地区重要性也由我们的舰艇进行缩放

NAVAL_COMBAT_MIN_OUR_NAVY_MULT_ON_IMPORTANCE = 0.5, — Min scale factor for naval region importance from our ships

NAVAL_COMBAT_MIN_OUR_NAVY_MULT_ON_IMPORTANCE = 0.5， — 我们舰艇对海军区域重要性的最小比例因子

NAVAL_COMBAT_MAX_OUR_NAVY_MULT_ON_IMPORTANCE = 1.0, — Max scale factor for naval region importance from our ships

NAVAL_COMBAT_MAX_OUR_NAVY_MULT_ON_IMPORTANCE = 1.0， — 我们舰艇的海军区域重要性的最大比例因子



NAVAL_RANGE_FOR_DOCKING_RIGHTS_CHECK = 240.0,		— Naval range used to check if docking rights would allow us to reach a specific province

NAVAL_RANGE_FOR_DOCKING_RIGHTS_CHECK = 240.0， — 海军射程，用于检查停靠权是否允许我们到达特定省份



NAVAL_PATROL_PLANES_PER_SHIP_PATROLLING = 10.0,		— Amount of naval patrol planes per ship on a patrol mission

NAVAL_PATROL_PLANES_PER_SHIP_PATROLLING = 10.0， — 执行巡逻任务的每艘舰艇的海军巡逻飞机数量

NAVAL_PATROL_PLANES_PER_SHIP_RAIDING = 10.0,		— Amount of naval patrol planes per ship on a convoy raid mission

NAVAL_PATROL_PLANES_PER_SHIP_RAIDING = 10.0， — 执行护航突袭任务的每艘船的海军巡逻飞机数量

NAVAL_PATROL_PLANES_PER_SHIP_ESCORTING = 10.0,		— Amount of naval patrol planes per ship on a convoy escort mission

NAVAL_PATROL_PLANES_PER_SHIP_ESCORTING = 10.0， — 执行护航任务的每艘船的海军巡逻飞机数量



NAVAL_FIGHTERS_PER_PLANE = 1.0,						— Amounts of air superiority planes requested per enemy plane

NAVAL_FIGHTERS_PER_PLANE = 1.0， — 每架敌机请求的空中优势飞机数量

NAVAL_STRIKE_PLANES_PER_ARMY = 0,					— Amount of planes requested per enemy army

NAVAL_STRIKE_PLANES_PER_ARMY = 0， — 每支敌军请求的飞机数量

NAVAL_STRIKE_PLANES_PER_SHIP = 20,					— Amount of bombers requested per enemy ship

NAVAL_STRIKE_PLANES_PER_SHIP = 20， — 每艘敌舰请求的轰炸机数量

PORT_STRIKE_PLANES_PER_SHIP = 10,					— Amount of bombers request per enemy ship in the port

PORT_STRIKE_PLANES_PER_SHIP = 10， — 港口内每艘敌舰的轰炸机请求数量

MINES_SWEEPING_PLANES_PER_MAX_MINES = 150, 			— Amount of air planes request for mines sweeping when there is max amount of mines planted by enemy in certain region

MINES_SWEEPING_PLANES_PER_MAX_MINES = 150， — 当敌人在某个区域埋设的地雷数量达到最大时，请求扫雷的飞机数量

MINES_PLANTING_PLANES_PER_MAX_DESIRE = 100,			— Amount of air planes request for mines planting when there is max desire for it.

MINES_PLANTING_PLANES_PER_MAX_DESIRE = 100， — 当飞机需求最大时请求埋雷的数量。

MINES_PLANTING_DESIRE_PER_HOME_STATE = 0.4,			— Scoring for how much do we want to plant naval mines with our air wings if the naval region is adjacent to a home state. Multiple adjacent states increases the score. Max sum of score is 1.0.

MINES_PLANTING_DESIRE_PER_HOME_STATE = 0.4， — 如果海军地区与本国相邻，则我们想要用空军联队埋设海军水雷的量进行评分。多个相邻状态会增加分数。最大分数总和为 1.0。

MINES_PLANTING_DESIRE_PER_ENEMY_STATE = 0.1,		— Scoring for how much do we want to plant naval mines with our air wings if the naval region is adjacent to the enemy state. Multiple adjacent states increases the score. Max sum of score is 1.0.

MINES_PLANTING_DESIRE_PER_ENEMY_STATE = 0.1， — 如果海军区域与敌国相邻，我们想用我们的空军联队埋设多少海军水雷。多个相邻状态会增加分数。最大分数总和为 1.0。

MINES_PLANTING_DESIRE_PER_NAVAL_THREAT = 250,		— How much threat must be generated in the naval region, in order to get the maximum desire to plant naval mines in there.

MINES_PLANTING_DESIRE_PER_NAVAL_THREAT = 250， — 在海军区域必须产生多少威胁，才能最大限度地在那里放置海军水雷。

NAVAL_MIN_EXCORT_PLANES = 0,						— Min amount of planes requested to excort operations

NAVAL_MIN_EXCORT_PLANES = 0， — 请求执行作的最小平面数

DEMOCRATIC_AI_FACTION_KICKING_PLAYER_THREAT_DIFFERENCE = 6.0, — World threat generation difference needed to kick a player from a democratic faction

DEMOCRATIC_AI_FACTION_KICKING_PLAYER_THREAT_DIFFERENCE = 6.0， — 将玩家踢出民主派系所需的世界威胁生成差异

BEFRIEND_FACTOR_FOR_KICKING_COUNTRIES = 7.5,		— World threat difference addition per 100 befriend against a country, democratic leaders will forgive allies if they are befriending them

BEFRIEND_FACTOR_FOR_KICKING_COUNTRIES = 7.5， — 每 100 个朋友对一个国家增加世界威胁差异，民主领导人会原谅盟友



LAND_DEFENSE_AIR_SUPERIORITY_IMPORTANCE = 1.0,		— Strategic importance of air superiority ( amount of enemy planes in area )

LAND_DEFENSE_AIR_SUPERIORITY_IMPORTANCE = 1.0， — 空中优势的战略重要性（区域内敌机数量）

LAND_DEFENSE_CIVIL_FACTORY_IMPORTANCE = 50,			— Strategic importance of civil factories

LAND_DEFENSE_CIVIL_FACTORY_IMPORTANCE = 50， — 民用工厂的战略重要性

LAND_DEFENSE_MILITARY_FACTORY_IMPORTANCE = 70,		— Strategic importance of military factories

LAND_DEFENSE_MILITARY_FACTORY_IMPORTANCE = 70， — 军事工厂的战略重要性

LAND_DEFENSE_NAVAL_FACTORY_IMPORTANCE = 30,			— Strategic importance of naval factories

LAND_DEFENSE_NAVAL_FACTORY_IMPORTANCE = 30， — 海军工厂的战略重要性

LAND_DEFENSE_SUPPLY_HUB_IMPORTANCE = 4, — Strategic importance of supply hubs

LAND_DEFENSE_SUPPLY_HUB_IMPORTANCE = 4， — 供应中心的战略重要性

LAND_DEFENSE_AA_IMPORTANCE_FACTOR = 1.0,			— Factor of AA influence on strategic importance ( 0.0 - 1.0 )

LAND_DEFENSE_AA_IMPORTANCE_FACTOR = 1.0， — AA 对战略重要性的影响系数 （ 0.0 - 1.0 ）

LAND_DEFENSE_INFRA_IMPORTANCE_FACTOR = 0.5,			— Factor of infrastructure influence on strategic importance ( 0.0 - 1.0 )

LAND_DEFENSE_INFRA_IMPORTANCE_FACTOR = 0.5， — 基础设施对战略重要性的影响系数 （ 0.0 - 1.0 ）

LAND_DEFENSE_IMPORTANCE_SCALE = 3.0,				— Lend defence total importance scale (every land defence score get’s multiplied by it)

LAND_DEFENSE_IMPORTANCE_SCALE = 3.0， — 借出防御总重要性量表（每个土地防御分数乘以它）



NUM_HOURS_SINCE_LAST_COMBAT_TO_SUPPORT_UNITS_VIA_AIR = 72,			— units will be considered in combat if they are just out of their last combat for air supporting

NUM_HOURS_SINCE_LAST_COMBAT_TO_SUPPORT_UNITS_VIA_AIR = 72， — 如果单位刚刚结束最后一次空中支援战斗，则这些单位将被视为参加战斗



LAND_DEFENSE_MIN_FACTORIES_FOR_AIR_IMPORTANCE = 5,	— If amount of factories is less importance of factories won’t apply

LAND_DEFENSE_MIN_FACTORIES_FOR_AIR_IMPORTANCE = 5， — 如果工厂数量不重要，则工厂不适用



LAND_DEFENSE_RAID_IMPORTANCE = 500, — Strategic importance of detected raids targetting us

LAND_DEFENSE_RAID_IMPORTANCE = 500， — 检测到针对我们的突袭的战略重要性

LAND_DEFENSE_FIGHERS_PER_RAID = 100, — Amount of air superiority planes requested per detected raid targetting us

LAND_DEFENSE_FIGHERS_PER_RAID = 100， — 每次检测到针对我们的突袭请求空优飞机的数量

LAND_DEFENSE_INTERCEPTORS_PER_RAID = 100, — Amount of interceptor planes requested per detected raid targetting us

LAND_DEFENSE_INTERCEPTORS_PER_RAID = 100， — 每次检测到针对我们的突袭请求拦截飞机的数量



LAND_DEFENSE_FIGHERS_PER_PLANE = 1.8,				— Amount of air superiority planes requested per enemy plane

LAND_DEFENSE_FIGHERS_PER_PLANE = 1.8， — 每架敌机请求的空中优势飞机数量

LAND_DEFENSE_INTERCEPTORS_PER_BOMBERS = 0.8, — Amount of interceptor planes requested per enemy bomber

LAND_DEFENSE_INTERCEPTORS_PER_BOMBERS = 0.8， — 每个敌方轰炸机请求的拦截机数量

LAND_DEFENSE_INTERCEPTORS_PER_PLANE = 0.1, — Amount of interceptor planes requested per enemy plane (non bomber)

LAND_DEFENSE_INTERCEPTORS_PER_PLANE = 0.1， — 每架敌机（非轰炸机）请求的拦截飞机数量



LAND_DEFENSE_SAM_MISSILE_IMPORTANCE_FACTOR = 0.2,	— Importance factor of using sam missiles for regions strategic importance. Higher value will increase the usage

LAND_DEFENSE_SAM_MISSILE_IMPORTANCE_FACTOR = 0.2， — 使用地空导弹对区域战略重要性的重要性因子。较高的值将增加使用量

LAND_COMBAT_MISSILE_IMPORTANCE_FACTOR = 1.5, 		— Importance factor of using missiles for regions strategic importance. Higher value will increase the usage

LAND_COMBAT_MISSILE_IMPORTANCE_FACTOR = 1.5， — 使用导弹对地区战略重要性的重要性因子。较高的值将增加使用量



LAND_COMBAT_AIR_SUPERIORITY_IMPORTANCE = 0.40,		— Strategic importance of air superiority ( amount of enemy planes in area )

LAND_COMBAT_AIR_SUPERIORITY_IMPORTANCE = 0.40， — 空中优势的战略重要性（该地区的敌机数量）

LAND_COMBAT_OUR_ARMIES_AIR_IMPORTANCE = 20,			— Strategic importance of our armies

LAND_COMBAT_OUR_ARMIES_AIR_IMPORTANCE = 20， — 我们军队的战略重要性

LAND_COMBAT_OUR_COMBATS_AIR_IMPORTANCE = 155,		— Strategic importance of our armies in the combats

LAND_COMBAT_OUR_COMBATS_AIR_IMPORTANCE = 155， — 我军在战斗中的战略重要性

LAND_COMBAT_FRIEND_ARMIES_AIR_IMPORTANCE = 10,		— Strategic importance of friendly armies

LAND_COMBAT_FRIEND_ARMIES_AIR_IMPORTANCE = 10， — 友军的战略重要性

LAND_COMBAT_FRIEND_COMBATS_AIR_IMPORTANCE = 8,		— Strategic importance of friendly armies in the combat

LAND_COMBAT_FRIEND_COMBATS_AIR_IMPORTANCE = 8， — 友军在战斗中的战略重要性

LAND_COMBAT_ENEMY_ARMIES_AIR_IMPORTANCE = 12,		— Strategic importance of our armies

LAND_COMBAT_ENEMY_ARMIES_AIR_IMPORTANCE = 12， — 我们军队的战略重要性

LAND_COMBAT_ENEMY_LAND_FORTS_AIR_IMPORTANCE = 5,	— Strategic importance of enemy land forts in the region

LAND_COMBAT_ENEMY_LAND_FORTS_AIR_IMPORTANCE = 5， — 该地区敌方陆地要塞的战略重要性

LAND_COMBAT_ENEMY_COASTAL_FORTS_AIR_IMPORTANCE = 3,	— Strategic importance of enemy coastal fronts in the region

LAND_COMBAT_ENEMY_COASTAL_FORTS_AIR_IMPORTANCE = 3， — 该地区敌方沿海战线的战略重要性

LAND_COMBAT_IMPORTANCE_SCALE = 5.0,					— Lend combat total importance scale (every land combat score get’s multiplied by it)

LAND_COMBAT_IMPORTANCE_SCALE = 5.0， — 借出战斗总重要性量表 （每个陆地战斗分数乘以它）



LAND_COMBAT_FIGHTERS_PER_PLANE = 1.0,				— Amount of air superiority planes requested per enemy plane

LAND_COMBAT_FIGHTERS_PER_PLANE = 1.0， — 每架敌机请求的空优飞机数量

LAND_COMBAT_CAS_PLANES_PER_ENEMY_ARMY_LIMIT = 200,	— Limit of CAS planes requested by enemy armies

LAND_COMBAT_CAS_PLANES_PER_ENEMY_ARMY_LIMIT = 200， — 敌军请求的 CAS 飞机限制

LAND_COMBAT_CAS_PER_ENEMY_ARMY = 30,				— Amount of CAS planes requested per enemy division

LAND_COMBAT_CAS_PER_ENEMY_ARMY = 30，— 每个敌方师请求的 CAS 飞机数量

LAND_COMBAT_ANTI_LOGISTICS_PER_ENEMY_ARMY = 0.1, — Amount of CAS planes requested per enemy army for anti-logistics

LAND_COMBAT_ANTI_LOGISTICS_PER_ENEMY_ARMY = 0.1， — 每支敌军申请的 CAS 飞机数量用于反后勤

LAND_COMBAT_CAS_PER_COMBAT = 60,					— Amount of CAS requested per combat

LAND_COMBAT_CAS_PER_COMBAT = 60， — 每次战斗请求的 CAS 数量

LAND_COMBAT_BOMBERS_PER_LAND_FORT_LEVEL = 6,		— Amount of bomber planes requested per enemy land fort level

LAND_COMBAT_BOMBERS_PER_LAND_FORT_LEVEL = 6， — 每个敌方陆地要塞级别请求的轰炸机数量

LAND_COMBAT_BOMBERS_PER_COASTAL_FORT_LEVEL = 6,		— Amount of bomber planes requested per enemy coastal fort level

LAND_COMBAT_BOMBERS_PER_COASTAL_FORT_LEVEL = 6， — 每个敌方沿海要塞级别请求的轰炸机数量

LAND_COMBAT_MIN_EXCORT_PLANES = 80,					— Min amount of planes requested to excort operations

LAND_COMBAT_MIN_EXCORT_PLANES = 80， — 请求执行作的最小飞机数量



LAND_COMBAT_INTERCEPT_PER_PLANE = 0.25,				— Amount of interception planes requested per enemy plane

LAND_COMBAT_INTERCEPT_PER_PLANE = 0.25， — 每架敌机请求的拦截飞机数量

MIN_ALLIED_DEFENSE_FACTOR_AIRWING_REQUESTS = 0.07,	— Airwing requests will be factored by a minimum of this when comparing own vs friendly troops in area

MIN_ALLIED_DEFENSE_FACTOR_AIRWING_REQUESTS = 0.07， — 在比较区域内己方和友方部队时，空军请求将至少考虑此因素

AIR_SUPERIORITY_FOR_FRIENDLY_CAS_RATIO = 0.75,		— Demand at least this proportion of our cas planes as air superiority regardless of other needs

AIR_SUPERIORITY_FOR_FRIENDLY_CAS_RATIO = 0.75， — 无论其他需求如何，至少需要我们 CAS 飞机的这一比例作为空中优势

LAND_COMBAT_GUIDE_DISTANCE = 290.0,					— Distance within whch we’ll care a bit more about sending planes regardless of whether our boiz are dying

LAND_COMBAT_GUIDE_DISTANCE = 290.0， — 距离之内，无论我们的 boiz 是否快死了，我们都会更关心派飞机



ENEMY_PASSING_THROUGH_PLANES_PER_BOMBER = 0.1,		— Amount of planes we assign to intercept enemies en-route to a location

ENEMY_PASSING_THROUGH_PLANES_PER_BOMBER = 0.1， — 我们分配的飞机数量，用于拦截前往某个位置的敌人

ENEMY_PASSING_THROUGH_PLANES_PER_FIGHTER = 0.1,		— Amount of planes we assign to intercept enemies en-route to a location

ENEMY_PASSING_THROUGH_PLANES_PER_FIGHTER = 0.1， — 我们分配的飞机数量，用于拦截前往某个位置的敌人

ENEMY_PASSING_THROUGH_PLANES_PER_SUPPORT = 0.1,		— Amount of planes we assign to intercept enemies en-route to a location

ENEMY_PASSING_THROUGH_PLANES_PER_SUPPORT = 0.1， — 我们分配的飞机数量，用于拦截前往某个地点的敌人



AI_FRACTION_OF_FIGHTERS_RESERVED_FOR_INTERCEPTION = 0.25,	—Percentage of fighters we reserve for interception vs AS

AI_FRACTION_OF_FIGHTERS_RESERVED_FOR_INTERCEPTION = 0.25，—我们与 AS 相比为拦截而保留的战士百分比

MAX_AIR_REGIONS_TO_CARE_ABOUT = 6,							— Number of regions we’ll consider when trying to split planes a bit. Split is NOT equal, just a guide, leftovers still applied elsewhere if needed

MAX_AIR_REGIONS_TO_CARE_ABOUT = 6， — 尝试稍微拆分平面时我们将考虑的区域数。拆分并不相等，只是一个指南，如果需要，剩菜仍适用于其他地方



ENEMY_PASSING_THROUGH_PLANES_PER_BOMBER_NAVAL_REGION = 0.15,		— Amount of planes we assign to intercept enemies en-route to a location over a sea region

ENEMY_PASSING_THROUGH_PLANES_PER_BOMBER_NAVAL_REGION = 0.15， — 我们分配的飞机数量，用于拦截前往海域某个位置的敌人

ENEMY_PASSING_THROUGH_PLANES_PER_FIGHTER_NAVAL_REGION = 0.15,		— Amount of planes we assign to intercept enemies en-route to a location over a sea region

ENEMY_PASSING_THROUGH_PLANES_PER_FIGHTER_NAVAL_REGION = 0.15， — 我们分配的飞机数量，用于拦截前往海域某个位置的敌人

ENEMY_PASSING_THROUGH_PLANES_PER_SUPPORT_NAVAL_REGION = 0.15,		— Amount of planes we assign to intercept enemies en-route to a location over a sea region

ENEMY_PASSING_THROUGH_PLANES_PER_SUPPORT_NAVAL_REGION = 0.15， — 我们分配的飞机数量，用于拦截前往海域某个位置的敌人

NAVAL_DEFENSE_INTERCEPTION_IMPORTANCE_FACTOR = 30,	— Factor on added planes passing through region to strategic importance

NAVAL_DEFENSE_INTERCEPTION_IMPORTANCE_FACTOR = 30， — 增加的通过该地区的飞机的战略重要性的因素



XP_RATIO_REQUIRED_TO_RESEARCH_WITH_XP = 2.0,		— AI will at least need this amount of xp compared to cost of a tech to reserch it with XP

XP_RATIO_REQUIRED_TO_RESEARCH_WITH_XP = 2.0，— 与技术人员使用 XP 重新研究的成本相比，AI 至少需要这个数量的 XP

RESEARCH_WITH_XP_AI_WEIGHT_MULT = 1.2, 				— AI will bump score of a research with this mult if it can use XP

RESEARCH_WITH_XP_AI_WEIGHT_MULT = 1.2， — 如果 AI 可以使用 XP，它将使用此 mult 提高研究的分数



STR_BOMB_AIR_SUPERIORITY_IMPORTANCE = 0.10,			— Strategic importance of air superiority ( amount of enemy planes in area )

STR_BOMB_AIR_SUPERIORITY_IMPORTANCE = 0.10， — 空中优势的战略重要性（区域内敌机数量）

STR_BOMB_CIVIL_FACTORY_IMPORTANCE = 50,				— Strategic importance of enemy civil factories

STR_BOMB_CIVIL_FACTORY_IMPORTANCE = 50， — 敌方民用工厂的战略重要性

STR_BOMB_MILITARY_FACTORY_IMPORTANCE = 70,			— Strategic importance of enemy military factories

STR_BOMB_MILITARY_FACTORY_IMPORTANCE = 70， — 敌方军事工厂的战略重要性

STR_BOMB_NAVAL_FACTORY_IMPORTANCE = 30,				— Strategic importance of enemy naval factories

STR_BOMB_NAVAL_FACTORY_IMPORTANCE = 30， — 敌方海军工厂的战略重要性

STR_BOMB_SUPPLY_HUB_IMPORTANCE = 1, — Strategic importance of enemy supply hubs

STR_BOMB_SUPPLY_HUB_IMPORTANCE = 1， — 敌方补给站的战略重要性

STR_BOMB_AA_IMPORTANCE_FACTOR = 0.5,				— Factor of AA influence on strategic importance ( 0.0 - 1.0 )

STR_BOMB_AA_IMPORTANCE_FACTOR = 0.5， — AA 对战略重要性的影响系数 （ 0.0 - 1.0 ）

STR_BOMB_INFRA_IMPORTANCE_FACTOR = 0.25,			— Factor of infrastructure influence on strategic importance ( 0.0 - 1.0 )

STR_BOMB_INFRA_IMPORTANCE_FACTOR = 0.25， — 基础设施对战略重要性的影响系数 （ 0.0 - 1.0 ）

STR_BOMB_IMPORTANCE_SCALE = 1.0,					— str bombing total importance scale (every str bombing score get’s multiplied by it)

STR_BOMB_IMPORTANCE_SCALE = 1.0， — STR 轰炸总重要性量表（每个 STR 轰炸分数乘以它）



STR_BOMB_MIN_ENEMY_FIGHTERS_IN_AREA = 2000,			— If amount of enemy fighters is higher than this mission won’t perform

STR_BOMB_MIN_ENEMY_FIGHTERS_IN_AREA = 2000， — 如果敌方战斗机的数量高于此任务将不执行

STR_BOMB_FIGHTERS_PER_PLANE = 1.1,					— Amount of air superiority planes requested per enemy plane

STR_BOMB_FIGHTERS_PER_PLANE = 1.1， — 每架敌机请求的空中优势飞机数量

STR_BOMB_PLANES_PER_CIV_FACTORY = 20,				— Amount of planes requested per enemy civ factory

STR_BOMB_PLANES_PER_CIV_FACTORY = 20， — 每个敌方文明工厂请求的飞机数量

STR_BOMB_PLANES_PER_MIL_FACTORY = 25,				— Amount of planes requested per enemy military factory

STR_BOMB_PLANES_PER_MIL_FACTORY = 25， — 每个敌方军事工厂请求的飞机数量

STR_BOMB_PLANES_PER_NAV_FACTORY = 15,				— Amount of planes requested per enemy naval factory

STR_BOMB_PLANES_PER_NAV_FACTORY = 15， — 每个敌方海军工厂请求的飞机数量

STR_BOMB_PLANES_PER_SUPPLY_HUB = 3, — Amount of planes requested per enemy supply node

STR_BOMB_PLANES_PER_SUPPLY_HUB = 3， — 每个敌方补给节点请求的飞机数量

STR_BOMB_MIN_EXCORT_PLANES = 200,					— Min amount of planes requested to excort operations

STR_BOMB_MIN_EXCORT_PLANES = 200， — 请求执行作的最小飞机数量

RECON_PLANES_NAVAL = 50, — scale on recon for naval areas

RECON_PLANES_NAVAL = 50， — 海军区域的侦察比例尺

RECON_PLANES_LAND_COMBAT = 25, — scale on recon for land combat areas

RECON_PLANES_LAND_COMBAT = 25， — 陆地作战区域的侦察比例尺

RECON_PLANES_STRATEGIC = 50, — scale on recon for strategic areas

RECON_PLANES_STRATEGIC = 50， — 战略区域的侦察比例



ASSIGN_FRONT_ARMY_SOFT_ATTACK_FACTOR = 0.1, — Importance of unit’s ARMY_SOFT_ATTACK stat when assigning to a front

ASSIGN_FRONT_ARMY_SOFT_ATTACK_FACTOR = 0.1， — 分配到前线时单位ARMY_SOFT_ATTACK属性的重要性

ASSIGN_FRONT_ARMY_HARD_ATTACK_FACTOR = 0.1, — Importance of unit’s ARMY_HARD_ATTACK stat when assigning to a front

ASSIGN_FRONT_ARMY_HARD_ATTACK_FACTOR = 0.1， — 分配到前线时单位ARMY_HARD_ATTACK属性的重要性

ASSIGN_FRONT_ARMY_BREAKTHROUGH_FACTOR = 0.2, — Importance of unit’s ARMY_BREAKTHROUGH stat when assigning to a front

ASSIGN_FRONT_ARMY_BREAKTHROUGH_FACTOR = 0.2， — 分配到前线时单位ARMY_BREAKTHROUGH属性的重要性

ASSIGN_DEFENSE_ARMY_DEFENSE_FACTOR = 3.0, — Importance of unit’s ARMY_DEFENSE stat when assigning to an area defense order

ASSIGN_DEFENSE_ARMY_DEFENSE_FACTOR = 3.0， — 分配给区域防御命令时单位ARMY_DEFENSE属性的重要性

ASSIGN_DEFENSE_ARMY_ENTRENCHMENT_FACTOR = 2.0, — Importance of unit’s ARMY_ENTRENCHMENT stat when assigning to an area defense order

ASSIGN_DEFENSE_ARMY_ENTRENCHMENT_FACTOR = 2.0， — 分配给区域防御命令时单位ARMY_ENTRENCHMENT属性的重要性

ASSIGN_DEFENSE_TEMPLATE_CLASS_SCORE = 3.0, — Importance of unit’s AI template class (AREA_DEFENSE, CAVALRY) when assigning to an area defense order

ASSIGN_DEFENSE_TEMPLATE_CLASS_SCORE = 3.0， — 分配给区域防御命令时单位的 AI 模板类别（AREA_DEFENSE、骑兵）的重要性

ASSIGN_INVASION_AMPHIBIOUS_ATTACK_FACTOR = 50.0, — Importance of unit’s amphibious attack adjuster when assigning to an invasion order

ASSIGN_INVASION_AMPHIBIOUS_ATTACK_FACTOR = 50.0， — 分配给入侵命令时单位的两栖攻击调整器的重要性

ORDER_ASSIGNMENT_DISTANCE_FACTOR = 100.0, — When the AI assigns units to orders, how much should distance be taken into account?

ORDER_ASSIGNMENT_DISTANCE_FACTOR = 100.0， — 当 AI 为订单分配单位时，应考虑多少距离？

REVISITED_PROV_BOOST_FACTOR = 4, — When the AI picks units for a front, it prioritises units already nearby.

REVISITED_PROV_BOOST_FACTOR = 4， — 当 AI 为前线选择单位时，它会优先考虑附近的单位。

UNIT_ASSIGNMENT_STATS_IMPORTANCE = 3.0, — Stats score for units are multiplied by this when the AI is deciding which front they should be assigned to

UNIT_ASSIGNMENT_STATS_IMPORTANCE = 3.0， — 当 AI 决定应将单位分配到哪条前线时，单位的属性分数乘以此值



ASSIGN_FRONT_TERRAIN_ATTACK_FACTOR = 3.0, — Importance of unit’s terrain adjusted attack stat when assigning to a front

ASSIGN_FRONT_TERRAIN_ATTACK_FACTOR = 3.0， — 分配到前线时单位地形调整攻击属性的重要性

ASSIGN_FRONT_TERRAIN_DEFENSE_FACTOR = 1.0, — Importance of unit’s terrain adjusted defense stat when assigning to a front

ASSIGN_FRONT_TERRAIN_DEFENSE_FACTOR = 1.0， — 分配到前线时单位的地形调整防御属性的重要性

ASSIGN_FRONT_TERRAIN_MOVEMENT_FACTOR = 2.0, — Importance of unit’s terrain adjusted movement stat when assigning to a front

ASSIGN_FRONT_TERRAIN_MOVEMENT_FACTOR = 2.0， — 分配到前线时单位地形调整移动属性的重要性

ASSIGN_DEFENSE_TERRAIN_ATTACK_FACTOR = 0.5, — Importance of unit’s terrain adjusted attack stat when assigning to an area defense order

ASSIGN_DEFENSE_TERRAIN_ATTACK_FACTOR = 0.5， — 分配给区域防御命令时单位地形调整攻击属性的重要性

ASSIGN_DEFENSE_TERRAIN_DEFENSE_FACTOR = 4.0, — Importance of unit’s terrain adjusted defense stat when assigning to an area defense order

ASSIGN_DEFENSE_TERRAIN_DEFENSE_FACTOR = 4.0， — 分配给区域防御命令时单位的地形调整防御属性的重要性

ASSIGN_DEFENSE_TERRAIN_MOVEMENT_FACTOR = 0.5, — Importance of unit’s terrain adjusted movement stat when assigning to an area defense order

ASSIGN_DEFENSE_TERRAIN_MOVEMENT_FACTOR = 0.5， — 分配给区域防御命令时单位的地形调整移动属性的重要性

ASSIGN_MOUNTAINEERS_TO_MOUNTAINS = 10.0, — factor for assigning mountaineer divisions to fronts with mountains (proportional to how much of that terrain type)

ASSIGN_MOUNTAINEERS_TO_MOUNTAINS = 10.0， — 将登山者师分配给有山脉的前线的系数（与地形类型的数量成正比）

ASSIGN_TANKS_TO_MOUNTAINS = -6.0, — factor for assigning tank divisions to fronts with mountains (proportional to how much of that terrain type)

ASSIGN_TANKS_TO_MOUNTAINS = -6.0， — 将坦克师分配给有山脉的前线的系数（与地形类型的数量成正比）

ASSIGN_TANKS_TO_JUNGLE = -6.0, — factor for assigning tank divisions to fronts with jungle (proportional to how much of that terrain type)

ASSIGN_TANKS_TO_JUNGLE = -6.0， — 将坦克师分配到有野区的前线的系数（与地形类型的数量成正比）

UNIT_ASSIGNMENT_TERRAIN_IMPORTANCE = 10.0, — Terrain score for units are multiplied by this when the AI is deciding which front they should be assigned to

UNIT_ASSIGNMENT_TERRAIN_IMPORTANCE = 10.0， — 当 AI 决定应将单位分配到哪个前线时，单位的地形分数乘以此值



ASSIGN_TANKS_TO_WAR_FRONT = 6.0, — Scoring factor for assigning divisions with ‘role = armor’ or ‘front_role_override = offence’ to active war fronts

ASSIGN_TANKS_TO_WAR_FRONT = 6.0， — 将“角色 = 装甲”或“front_role_override = 进攻”的师分配到活跃的战争前线的计分系数

ASSIGN_TANKS_TO_NON_WAR_FRONT = 0.4, — Scoring factor for assigning divisions with ‘role = armor’ or ‘front_role_override = offence’ to non-war fronts

ASSIGN_TANKS_TO_NON_WAR_FRONT = 0.4， — 将“角色 = 装甲”或“front_role_override = 进攻”的师分配到非战争前线的计分系数



REASSIGN_TO_ANOTHER_FRONT_FACTOR = 0.5, — Factor for reassigning to another front. 0.0 < X < 1.0 means reluctant, X > 1.0 means want to.

REASSIGN_TO_ANOTHER_FRONT_FACTOR = 0.5， - 重新分配给另一个前沿的因子。0.0 < X < 1.0 表示不情愿，X > 1.0 表示愿意。

REASSIGN_TO_ANOTHER_FRONT_IF_IN_COMBAT_FACTOR = 0.2, — Factor for reassigning to another front if in combat. 0.0 < X < 1.0 means reluctant, X > 1.0 means want to.

REASSIGN_TO_ANOTHER_FRONT_IF_IN_COMBAT_FACTOR = 0.2， — 在战斗中重新分配到另一条战线的系数。0.0 < X < 1.0 表示不情愿，X > 1.0 表示愿意。



ENEMY_FORTIFICATION_FACTOR_FOR_FRONT_REQUESTS = 2.0,		— front unit request factor at max enemy fortification

ENEMY_FORTIFICATION_FACTOR_FOR_FRONT_REQUESTS = 2.0， — 敌人防御工事达到最大值时，前方单位请求系数

ENEMY_FORTIFICATION_FACTOR_FOR_FRONT_REQUESTS_MAX = 0.7, 	— max factor that can be added by enemy fortification

ENEMY_FORTIFICATION_FACTOR_FOR_FRONT_REQUESTS_MAX = 0.7， — 敌人防御工事可以增加的最大系数



MANPOWER_RATIO_CAREFULNESS_THRESHOLD = 0.05, — if manpower ratio (available/used-by-army) is less than this, start being more careful with plan execution (i.e. don’t throw your men into the meat grinder if you’re running out of manpower)

MANPOWER_RATIO_CAREFULNESS_THRESHOLD = 0.05， — 如果人力比率（军队可用/使用）小于此值，则开始更加小心计划执行（即，如果人力耗尽，请不要将人手扔进绞肉机）



PLAN_ACTIVATION_SUPERIORITY_AGGRO = 1.0,			— How aggressive a country is in activating a plan based on how superiour their force is.

PLAN_ACTIVATION_SUPERIORITY_AGGRO = 1.0， — 一个国家根据其兵力的优势来启动计划的积极程度。

WAIT_YEARS_BEFORE_FREER_BUILDING = 3,				— The AI will skip considering certain buildings during the buildup phase, after htese many years it starts building them regardless of threat.

WAIT_YEARS_BEFORE_FREER_BUILDING = 3， — AI 会在构建阶段跳过考虑某些建筑物，经过这些年后，它会开始建造它们，而不管威胁如何。



MAX_CARRIER_OVERFILL = 1.85,						— Carriers will be overfilled to this amount if there are doctrines to justify it

MAX_CARRIER_OVERFILL = 1.85， — 如果有原则证明，承运商将超额配注到此金额



FIELDED_EQUIPMENT_BUFFER_RATIO_FOR_OCCUPATION_AI = 0.5, — garrison ai will try to leave this ratio of buffers while assigning laws

FIELDED_EQUIPMENT_BUFFER_RATIO_FOR_OCCUPATION_AI = 0.5， — Garrison AI 在分配定律时将尝试保留此缓冲区比率

FIELDED_MANPOWER_BUFFER_RATIO_FOR_OCCUPATION_AI = 0.3, — garrison ai will try to leave this ratio of buffers while assigning laws

FIELDED_MANPOWER_BUFFER_RATIO_FOR_OCCUPATION_AI = 0.3， — Garrison AI 将在分配定律时尝试保留此缓冲区比率



IMPORTANT_VICTORY_POINT = 15,						— during occupation ai will only care so much to ask for extra garrisons if VP amount is at least this

IMPORTANT_VICTORY_POINT = 15， — 在占领期间，如果 VP 数量至少为此，AI 只会非常关心要求额外的驻军



DOCKYARDS_PER_NAVAL_DESIRE_EFFECT = -20.0,			— Effects how much AI wants to build dockyards based on how navally focused they are in general. Recommended range -100.0 to 100.0.

DOCKYARDS_PER_NAVAL_DESIRE_EFFECT = -20.0， — 根据 AI 总体上对海军的关注程度，影响 AI 想要建造造船厂的程度。建议范围 -100.0 到 100.0。



DECISION_PRIORITY_RANDOMIZER = 0.1,					— random factor that is used while picking decisions. ai is able to pick a lower priority decision earler than a higher one if it is within this threshold

DECISION_PRIORITY_RANDOMIZER = 0.1， — 选取决策时使用的随机因子。如果 AI 在此阈值内，则 AI 能够选择优先级较低的决策而不是优先级较高的决策



DESIGN_COMPANY_SCORE_MULTIPLIER = 1.25, — score multiplier for hiring a design company

DESIGN_COMPANY_SCORE_MULTIPLIER = 1.25， — 雇用设计公司的分数乘数

ARMY_CHIEF_SCORE_MULTIPLIER = 1.0, — score multiplier for hiring an army chief

ARMY_CHIEF_SCORE_MULTIPLIER = 1.0， — 雇用陆军首领的分数乘数

AIR_CHIEF_SCORE_MULTIPLIER = 1.0, — score multiplier for hiring an air chief

AIR_CHIEF_SCORE_MULTIPLIER = 1.0， — 雇用空军长的分数乘数

NAVY_CHIEF_SCORE_MULTIPLIER = 1.0, — score multiplier for hiring an navy chief

NAVY_CHIEF_SCORE_MULTIPLIER = 1.0， — 雇用海军司令的分数乘数

POLITICAL_ADVISOR_SCORE_MULTIPLIER = 1.25, — score multiplier for hiring political advisors

POLITICAL_ADVISOR_SCORE_MULTIPLIER = 1.25， — 雇用政治顾问的分数乘数

THEORIST_ACCEPTANCE_MULTIPLIER = 0.7,						— scale the acceptance of hiring a theorist by this number times the amount of non-theorists we have, capped at one.

THEORIST_ACCEPTANCE_MULTIPLIER = 0.7， — 将雇用理论家的接受度乘以我们拥有的非理论家数量，上限为 1。

MIN_SCALED_IDEA_WEIGHT_TO_COMPARE_WITH_DECISIONS = 100,		— idea scores are scaled between these two values while comparing them to decisions

MIN_SCALED_IDEA_WEIGHT_TO_COMPARE_WITH_DECISIONS = 100 — 在将 Idea 分数与决策进行比较时，在这两个值之间缩放

MAX_SCALED_IDEA_WEIGHT_TO_COMPARE_WITH_DECISIONS = 200,		— idea scores are scaled between these two values while comparing them to decisions

MAX_SCALED_IDEA_WEIGHT_TO_COMPARE_WITH_DECISIONS = 200， — 在将概念分数与决策进行比较时，在这两个值之间缩放



CRITICAL_DECISION_PRIORITY = 200,					— critical ai score for decisions, ai will be able to pick decisions if it has higher prio even if it is not time to pick them (0 to disable)

CRITICAL_DECISION_PRIORITY = 200， — 决策的关键 AI 分数，如果 AI 具有更高的 Prio，即使不是选择决策的时候，它也将能够选择决策（0 表示禁用）

CRITICAL_IDEA_PRIORITY = 400,							— critical ai score for ideas, ai will be able to pick ideas if it has higher prio even if it is not time to pick them (0 to disable)

CRITICAL_IDEA_PRIORITY = 400， — 想法的关键 AI 分数，如果 AI 具有更高的优先级，即使不是选择想法的时候，它也将能够选择它们（0 表示禁用）



MAX_PP_TO_SPEND_ON_LOWER_PRIO_TASKS = 25,			— max pp cost for ai to allow spend pp on lower prio things while a higher prio things are available

MAX_PP_TO_SPEND_ON_LOWER_PRIO_TASKS = 25， — AI 的最大 PP 成本，允许在较高 Prio 事物可用时将 PP 花费在较低 Prio 事物上

MIN_SCORE_FOR_LOWER_PRIO_TASKS = 100,				— this is a threshold for low prio tasks that will be considered critical

MIN_SCORE_FOR_LOWER_PRIO_TASKS = 100 — 这是将被视为关键任务的低优先级任务的阈值



LOW_PRIO_TEMPLATE_BONUS_FOR_GARRISONS = 1000,		— bonus to make ai more likely to assign low prio units to garrisons

LOW_PRIO_TEMPLATE_BONUS_FOR_GARRISONS = 1000， — 使 AI 更有可能将低优先级单位分配给驻军的奖励

LOW_PRIO_TEMPLATE_PENALTY_FOR_FRONTS = 500,		— penalty to make ai less likely to assign low prio units to fronts

LOW_PRIO_TEMPLATE_PENALTY_FOR_FRONTS = 500， — 使 AI 不太可能将低 Prio 单位分配给前线的惩罚



DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_WARTIME = 0.2, 				— deployment will try to buffer a ratio of deployed manpower (for reinforcements) during war time

DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_WARTIME = 0.2， — 部署将尝试在战争期间缓冲一定比例的部署人力（用于增援）

DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_PEACETIME = 0.1, 		— deployment will try to buffer a ratio of deployed manpower (for reinforcements) during peace time

DEPLOYED_UNIT_MANPOWER_RATIO_TO_BUFFER_PEACETIME = 0.1， — 部署将尝试在和平时期缓冲一定比例的部署人力（用于增援）



MAX_AVAILABLE_MANPOWER_RATIO_TO_BUFFER_WARTIME = 0.4,			— deployment will try to buffer a ratio of manpower (for reinforcements) during war time

MAX_AVAILABLE_MANPOWER_RATIO_TO_BUFFER_WARTIME = 0.4， — 部署将尝试在战争期间缓冲一定比例的人力（用于增援）

MAX_AVAILABLE_MANPOWER_RATIO_TO_BUFFER_PEACETIME = 0.2,		— deployment will try to buffer a ratio of manpower (for reinforcements) during peace time

MAX_AVAILABLE_MANPOWER_RATIO_TO_BUFFER_PEACETIME = 0.2， — 部署将尝试在和平时期缓冲一定比例的人力（用于增援）



MANPOWER_RATIO_REQUIRED_TO_PRIO_MOBILIZATION_LAW = 0.4,		— percentage of manpower in field is desired to be buffered for AI when it has upcoming wars or already at war. if it has less manpower, it will prio manpower laws

MANPOWER_RATIO_REQUIRED_TO_PRIO_MOBILIZATION_LAW = 0.4， — 当 AI 即将发生战争或已经处于战争中时，希望为 AI 缓冲的现场人力百分比。如果人力较少，它将优先于人力法

UPGRADES_DEFICIT_LIMIT_DAYS = 7, — Ai will avoid upgrading units in the field to new templates if it takes longer than this to fullfill their equipment need

UPGRADES_DEFICIT_LIMIT_DAYS = 7， — 如果满足其设备需求所需的时间超过此时间，Ai 将避免将现场的单位升级到新模板



GIE_EXILE_AIR_MANPOWER_USAGE_RATIO = 0.2, — AI will not deploy new exile wings when this percentage of available exile manpower is already used for wing recruitment.

GIE_EXILE_AIR_MANPOWER_USAGE_RATIO = 0.2， — 当这一比例的可用流放者人力已经用于翼系招募时，AI 不会部署新的流放者之翼。



CARRIER_TASKFORCE_MAX_CARRIER_COUNT = 4, 		— optimum carrier count for carrier taskforces

CARRIER_TASKFORCE_MAX_CARRIER_COUNT = 4， — 航母特遣队的最佳航母数量

CAPITAL_TASKFORCE_MAX_CAPITAL_COUNT = 12, 		— optimum capital count for capital taskforces

CAPITAL_TASKFORCE_MAX_CAPITAL_COUNT = 12， — 资本工作组的最佳资本计数

SCREEN_TASKFORCE_MAX_SHIP_COUNT = 12,			— optimum screen count for screen taskforces

SCREEN_TASKFORCE_MAX_SHIP_COUNT = 12， — 屏幕任务组的最佳屏幕数

SUB_TASKFORCE_MAX_SHIP_COUNT = 16 ,				— optimum sub count for sub taskforces

SUB_TASKFORCE_MAX_SHIP_COUNT = 16 ， — 子任务组的最佳子计数



MIN_CAPITALS_FOR_CARRIER_TASKFORCE = 6,			— carrier fleets will at least have this amount of capitals

MIN_CAPITALS_FOR_CARRIER_TASKFORCE = 6， — 航母舰队至少将拥有此数量的资本

CAPITALS_TO_CARRIER_RATIO = 1.5,				— capital to carrier count in carrier taskfoces

CAPITALS_TO_CARRIER_RATIO = 1.5， — 运营商任务焦点中的资本到运营商计数

SCREENS_TO_CAPITAL_RATIO = 4.0,					— screens to capital/carrier count in carrier & capital taskforces

SCREENS_TO_CAPITAL_RATIO = 4.0， — 在运营商和资本工作组中筛选资本/运营商数量



MIN_MAIN_SHIP_RATIO = 0.3, — if main ship ratio is below this, steal other ships.

MIN_MAIN_SHIP_RATIO = 0.3， — 如果主船比率低于此比率，则偷窃其他船只。

MIN_SUPPORT_SHIP_RATIO = 0.7, — if support ship ratio is below this, steal other ships.

MIN_SUPPORT_SHIP_RATIO = 0.7， — 如果支援船比率低于此比率，则偷窃其他船只。

MIN_MAIN_SHIP_RATIO_TO_REINFORCE = 0.5, — the main ships will be tried to reinforce this level.

MIN_MAIN_SHIP_RATIO_TO_REINFORCE = 0.5， — 主力船只将尝试加强这一层。

MIN_SUPPORT_SHIP_RATIO_TO_REINFORCE = 0.9, — the support ships will be tried to reinforce this level.

MIN_SUPPORT_SHIP_RATIO_TO_REINFORCE = 0.9， — 支援船将尝试增援这一层。

MIN_MAIN_SHIP_TO_SPARE = 0.7, — can only steal ships from a task force if their main ship ratio is above this.

MIN_MAIN_SHIP_TO_SPARE = 0.7， — 只有当特遣队的主战舰比例高于此比例时，才能从特遣队中偷走战舰。

MIN_SUPPORT_SHIP_TO_SPARE = 1.0, — can only steal ships from a task force if their support ship ratio is above this.

MIN_SUPPORT_SHIP_TO_SPARE = 1.0， — 只有当特遣队的支援船比率高于此时，才能从特遣队中偷走船只。

MIN_MAIN_SHIP_RATIO_TO_MERGE = 0.7, — try merge task force if main ship ratio is lower than this.

MIN_MAIN_SHIP_RATIO_TO_MERGE = 0.7， — 如果主舰比率低于此比率，请尝试合并特遣队。

MAX_MAIN_SHIP_RATIO_TO_MERGE = 1.001, — if resulting main ship ratio would be at most this, allow merging into this task force.

MAX_MAIN_SHIP_RATIO_TO_MERGE = 1.001， — 如果得到的主舰比率最多是这个，允许合并到这个特别工作组。

MAIN_SHIP_RATIO_TO_SPLIT = 1.8, — if main ship ratio in a task force is larger than this, split it. (If a carrier TF wants 4 carriers (see defines above), but it has more than [this * 4] carriers, then we try to split the TF.)

MAIN_SHIP_RATIO_TO_SPLIT = 1.8， — 如果特遣队中的主舰比率大于此值，则将其拆分。（如果运营商 TF 需要 4 个运营商（参见上面的定义），但它的运营商数量超过 [this * 4] 个，那么我们会尝试拆分 TF。



MISSION_FLEET_ICONS = {

MISSION_FLEET_ICONS = {

4, — HOLD

4， — 保持

29, — PATROL

29， — 巡逻队

21, — STRIKE FORCE

21， — 打击力量

15, — CONVOY RAIDING

15， — 车队突袭

23, — CONVOY ESCORT

23， — 护航

24, — MINES PLANTING

24， — 埋地雷

5, — MINES SWEEPING

5， — 扫雷

4, — TRAIN

4， — 火车

4, — RESERVE_FLEET

4， — RESERVE_FLEET

9, — NAVAL INVASION SUPPORT

9， — 海军入侵支持

},



MIN_NAVAL_MISSION_PRIO_TO_ASSIGN = { — priorities for regions to get assigned to a mission

MIN_NAVAL_MISSION_PRIO_TO_ASSIGN = { — 分配给任务的区域的优先级

0, — HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)

0， — HOLD （移动时消耗燃油 HOLD_MISSION_MOVEMENT_COST 燃油）

200, — PATROL

200， — 巡逻

200, — STRIKE FORCE

200， — 打击力量

200, — CONVOY RAIDING

200， — 车队突袭

100, — CONVOY ESCORT

100， — 护航

200, — MINES PLANTING

200， — 地雷种植

100, — MINES SWEEPING

100， — 扫雷

0, — TRAIN

0， — 火车

0, — RESERVE_FLEET

0， — RESERVE_FLEET

100, — NAVAL INVASION SUPPORT

100， — 海军入侵支持

},



HIGH_PRIO_NAVAL_MISSION_SCORES = { — priorities for regions to get assigned to a mission

HIGH_PRIO_NAVAL_MISSION_SCORES = { — 分配给任务的区域的优先级

0, — HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)

0， — HOLD （移动时消耗燃油 HOLD_MISSION_MOVEMENT_COST 燃油）

100000, — PATROL

10000， — 巡逻

1000, — STRIKE FORCE

1000， — 打击力量

1500, — CONVOY RAIDING

1500， — 车队突袭

1000, — CONVOY ESCORT

1000， — 护航

-1, — MINES PLANTING

-1， — 地雷种植

300, — MINES SWEEPING

300， — 扫雷

0, — TRAIN

0， — 火车

0, — RESERVE_FLEET

0， — RESERVE_FLEET

1000, — NAVAL INVASION SUPPORT

1000， — 海军入侵支持

},



MAX_MISSION_PER_TASKFORCE = { — max mission region/taskforce ratio

MAX_MISSION_PER_TASKFORCE = { — 最大任务区域/特遣队比率

0, — HOLD (consumes fuel HOLD_MISSION_MOVEMENT_COST fuel while moving)

0， — HOLD （移动时消耗燃油 HOLD_MISSION_MOVEMENT_COST 燃油）





1.5, — PATROL


1.5， — 巡逻


6, — STRIKE FORCE

6， — 打击力





1.5, — CONVOY RAIDING


1.5， — 车队突袭


4, — CONVOY ESCORT

4、— 护航

2, — MINES PLANTING

2， — 地雷种植

2, — MINES SWEEPING

2， — 扫雷

0, — TRAIN

0， — 火车

0, — RESERVE_FLEET

0， — RESERVE_FLEET

10, — NAVAL INVASION SUPPORT

10， — 海军入侵支持

},



— all-screen taskforces will be shared between convoy defense, mine missions and patrols (in this prio)

— 全屏幕特遣队将在护航防御、地雷任务和巡逻之间共享（在此 Prio 中）

— and these ratios limits the maximum ratio of these taskforces to allocate on type

— 这些比率限制了这些特遣队在类型

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MIN = 0.20, — maximum ratio of all screen-ships forces to be used in convoy defense (increases up to max as AI loses convoys).

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MIN = 0.20， — 用于护航队防御的所有掩护船部队的最大比率（当 AI 失去护航队时增加到最大值）。

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX = 0.70, — maximum ratio of all screen-ships forces to be used in convoy defense (increases up to max as AI loses convoys).

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX = 0.70， — 用于护航队防御的所有屏蔽船部队的最大比率（当 AI 失去护航队时增加到最大值）。

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MIN_CONVOY_THREAT = 100, — AI will increase screen assignment for escort missions as threate increases

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MIN_CONVOY_THREAT = 100， — 随着威胁的增加，AI 将增加护航任务的屏幕分配

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX_CONVOY_THREAT = 1500,— AI will increase screen assignment for escort missions as threate increases

MAX_SCREEN_TASKFORCES_FOR_CONVOY_DEFENSE_MAX_CONVOY_THREAT = 1500，— 随着威胁的增加，AI 将增加护送任务的屏幕分配



MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING = 0.10, — maximum ratio of screens forces to be used in mine sweeping

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING = 0.10， — 扫雷时使用的筛分力的最大比率

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO = 0.8, — if you have mines near your owned states, you will start priotize mine missions and will assign this ratio of screens

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO = 0.8， — 如果您在拥有的州附近有地雷，您将开始优先执行地雷任务并分配此比例的屏幕

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO_MIN_MINES = 10, — lowest mine for prioing mine missions

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO_MIN_MINES = 10， — 用于普里昂地雷任务的最低地雷

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO_MAX_MINES = 1000, — highest mines for highest prio for mine missions

MAX_SCREEN_TASKFORCES_FOR_MINE_SWEEPING_PRIO_MAX_MINES = 1000， — 地雷任务的最高地雷



MAX_SCREEN_TASKFORCES_FOR_MINE_LAYING = 0.10, — maximum ratio of screens forces to be used in mine laying

MAX_SCREEN_TASKFORCES_FOR_MINE_LAYING = 0.10， — 用于布雷的筛力的最大比率

MAX_SCREEN_FORCES_FOR_INVASION_SUPPORT = 0.25, — max ratio of screens forces to be used in naval invasion missions

MAX_SCREEN_FORCES_FOR_INVASION_SUPPORT = 0.25， — 海军入侵任务中使用的掩护部队的最大比率

MAX_CAPITAL_FORCES_FOR_INVASION_SUPPORT = 0.25, — max ratio of capital forces to be used in naval invasion missions

MAX_CAPITAL_FORCES_FOR_INVASION_SUPPORT = 0.25， — 用于海军入侵任务的资本力量的最大比率

MAX_PATROL_TO_STRIKE_FORCE_RATIO = 3.0,	— maximum patrol/strike force ratio

MAX_PATROL_TO_STRIKE_FORCE_RATIO = 3.0， — 最大巡逻/打击力量比率



— <start> construction prioritization

— <start> 施工优先级

CONSTRUCTION_PRIO_INFRASTRUCTURE = 0.20, — base prio for infrastructure in the construction queue

CONSTRUCTION_PRIO_INFRASTRUCTURE = 0.20， — 构建队列中基础设施的基本优先级

CONSTRUCTION_PRIO_CIV_FACTORY = 0.80, — base prio for civilian factories in the construction queue

CONSTRUCTION_PRIO_CIV_FACTORY = 0.80， — 建造队列中民用工厂的基本优先级

CONSTRUCTION_PRIO_MIL_FACTORY = 0.70, — base prio for military factories in the construction queue

CONSTRUCTION_PRIO_MIL_FACTORY = 0.70， — 建造队列中军工厂的基本优先级

CONSTRUCTION_PRIO_SUPPLY_BUILDING = 1.10, — base prio for supply buildings (supply hubs, ports) in the construction queue

CONSTRUCTION_PRIO_SUPPLY_BUILDING = 1.10， — 施工队列中供应建筑物（供应中心、港口）的基本优先级

CONSTRUCTION_PRIO_RAILWAY = 4.00, — base prio for railways in the construction queue

CONSTRUCTION_PRIO_RAILWAY = 4.00， — 施工队列中铁路的基本优先级

CONSTRUCTION_PRIO_RAILWAY_GUN_REPAIR = 15.00, — base prio for railway gun repairs in the construction queue

CONSTRUCTION_PRIO_RAILWAY_GUN_REPAIR = 15.00， — 建造队列中铁路炮维修的 base prio

CONSTRUCTION_PRIO_UNSPECIFIED = 0.50, — base prio for unspecified buildings (none of the categories above) in the construction queue

CONSTRUCTION_PRIO_UNSPECIFIED = 0.50 — 施工队列中未指定建筑物（以上类别均无）的基本优先级

CONSTRUCTION_PRIO_FACTOR_OCCUPIED_TERRITORY = 1.00, — factor prio with this if occupied territory

CONSTRUCTION_PRIO_FACTOR_OCCUPIED_TERRITORY = 1.00， — 如果被占领的领土，则用 prio 因子

CONSTRUCTION_PRIO_FACTOR_OWNED_NONCORE = 1.50, — factor prio with this if owned non-core territory

CONSTRUCTION_PRIO_FACTOR_OWNED_NONCORE = 1.50， — 如果拥有非核心区域，则为 prio 因子

CONSTRUCTION_PRIO_FACTOR_OWNED_CORE = 2.00, — factor prio with this if owned core territory

CONSTRUCTION_PRIO_FACTOR_OWNED_CORE = 2.00， — 如果拥有核心区域，则为 prio 因子

CONSTRUCTION_PRIO_FACTOR_REPAIRING = 0.30, — factor prio with this if building is being repaired

CONSTRUCTION_PRIO_FACTOR_REPAIRING = 0.30， — 如果建筑物正在维修，则系数为 prio

— <end> construction prioritization

— <end> 施工优先级



MAX_FACTORY_TO_SPARE_FOR_MISSION_FUEL_TRADE = 0.12, 						— amount of factories to spend on oil trade in case of fuel need for missions

MAX_FACTORY_TO_SPARE_FOR_MISSION_FUEL_TRADE = 0.12， — 在任务需要燃料的情况下，用于石油贸易的工厂数量

MAX_FACTORY_TO_SPARE_FOR_CRITICAL_MISSION_FUEL_TRADE = 0.3, 			— amount of factories to spend on oil trade in case of fuel need for prio missions

MAX_FACTORY_TO_SPARE_FOR_CRITICAL_MISSION_FUEL_TRADE = 0.3， — 在 Prio 任务需要燃料的情况下，用于石油贸易的工厂数量

MAX_FACTORY_TO_TRADE_FOR_FUEL = 0.5,

MAX_FACTORY_TO_TRADE_FOR_FUEL = 0.5，

FUEL_TRADE_PRIO_FOR_CONVOY_DEFENSE = 0.3,								— AI will be less reluctant to cancel convoy missions if it is trading for oil

FUEL_TRADE_PRIO_FOR_CONVOY_DEFENSE = 0.3， — 如果 AI 正在交易石油，它将不那么不情愿取消护航任务



MAX_FACTORY_TO_SPARE_FOR_MISSION_FUEL_TRADE_IN_PEACE = 0.03, 			— amount of factories to spend on oil trade in case of fuel need for missions in peace time

MAX_FACTORY_TO_SPARE_FOR_MISSION_FUEL_TRADE_IN_PEACE = 0.03， — 在和平时期任务需要燃料的情况下，用于石油贸易的工厂数量

MAX_FACTORY_TO_SPARE_FOR_CRITICAL_MISSION_FUEL_TRADE_IN_PEACE = 0.1, 	— amount of factories to spend on oil trade in case of fuel need for prio missions in peace time

MAX_FACTORY_TO_SPARE_FOR_CRITICAL_MISSION_FUEL_TRADE_IN_PEACE = 0.1， — 在和平时期执行 Prio 任务需要燃料的情况下，用于石油贸易的工厂数量

MAX_FACTORY_TO_TRADE_FOR_FUEL_IN_PEACE = 0.15,

MAX_FACTORY_TO_TRADE_FOR_FUEL_IN_PEACE = 0.15，



FUEL_REQUEST_RATIO_FOR_COMBATS = 0.6,									— ratio of ship combat fuel cost that is to be considered in fuel usage and request system

FUEL_REQUEST_RATIO_FOR_COMBATS = 0.6， — 燃料使用和请求系统中要考虑的舰船战斗燃料成本的比率

PRIO_FUEL_REQUEST_RATIO_FOR_COMBATS = 0.8,								— ratio of ship combat fuel cost that is to be considered in prio fuel usage and request system

PRIO_FUEL_REQUEST_RATIO_FOR_COMBATS = 0.8， — 在 PRIO 燃料使用和请求系统中要考虑的舰船战斗燃料成本比率



FUEL_REQUEST_RATIO_FOR_MOVEMENT = 0.4,									— ratio of ship movement fuel cost that is to be considered in fuel usage and request system

FUEL_REQUEST_RATIO_FOR_MOVEMENT = 0.4， — 燃料使用和请求系统中要考虑的船舶移动燃料成本的比率

PRIO_FUEL_REQUEST_RATIO_FOR_MOVEMENT = 0.2,								— ratio of ship movement fuel cost that is to be considered in prio fuel usage and request system

PRIO_FUEL_REQUEST_RATIO_FOR_MOVEMENT = 0.2， — PRIO 燃料使用和请求系统中要考虑的船舶移动燃料成本的比率



NAVY_ACTUAL_FUEL_USAGE_WEIGHT_ON_OIL_REQUEST = 0.5, 					— weight of actual fuel usage of ships compared to what is being asked for missions while calculating oil needed for trade

NAVY_ACTUAL_FUEL_USAGE_WEIGHT_ON_OIL_REQUEST = 0.5， — 在计算贸易所需石油时，船舶实际燃料使用量与任务要求相比的重量

AIR_ACTUAL_FUEL_USAGE_WEIGHT_ON_OIL_REQUEST = 0.5, 						— weight of actual fuel usage of planes compared to what is being asked for missions while calculating oil needed for trade

AIR_ACTUAL_FUEL_USAGE_WEIGHT_ON_OIL_REQUEST = 0.5， — 在计算贸易所需石油时，飞机实际燃料使用量与任务要求相比的重量



MONTHS_TO_FILL_FUEL_BUFFER_WITH_OIL_REQUESTS = 6.0, 					— in war time, coutries will try to fill their buffer in this duration and trade for oil if necesarry

MONTHS_TO_FILL_FUEL_BUFFER_WITH_OIL_REQUESTS = 6.0， — 在战争时期，国家会试图在这段时间内填补他们的缓冲，并在必要时用石油进行交易

MONTHS_TO_FILL_FUEL_BUFFER_WITH_OIL_REQUESTS_IN_PEACE_TIME = 10.0, — in peace time, coutries will try to fill their buffer in this duration and trade for oil if necesarry

MONTHS_TO_FILL_FUEL_BUFFER_WITH_OIL_REQUESTS_IN_PEACE_TIME = 10.0， — 在和平时期，国家会尝试在这段时间内填满他们的缓冲，并在必要时换取石油



FUEL_CONSUMPTION_MULT_FOR_FUEL_SAVING_MODE = 0.25,				— fuel consumptions will be limited by this ratio in fuel saving mode

FUEL_CONSUMPTION_MULT_FOR_FUEL_SAVING_MODE = 0.25， — 在节油模式下，油耗将受此比率的限制

FUEL_CONSUMPTION_MULT_REGULAR_FUEL_MODE = 1.0,					— fuel consumptions will be limited by this ratio in regular fuel mode

FUEL_CONSUMPTION_MULT_REGULAR_FUEL_MODE = 1.0 — 在常规燃油模式下，燃油消耗将受此比率的限制

FUEL_CONSUMPTION_MULT_AGRESSIVE_FUEL_MODE = 3.0,				— fuel consumptions will be limited by this ratio in aggressive fuel usage mode

FUEL_CONSUMPTION_MULT_AGRESSIVE_FUEL_MODE = 3.0 — 在激进的燃油使用模式下，燃油消耗将受到此比率的限制



DAYS_FUEL_REMAINING_TO_ENTER_FUEL_SAVING_MODE = 30,				— countries will enter fuel saving mode if they will be out of fuel in this number of days and their fuel ratio is below next define

DAYS_FUEL_REMAINING_TO_ENTER_FUEL_SAVING_MODE = 30， — 如果国家/地区在此天数内燃料耗尽，并且其燃料比率低于下一个定义，则国家/地区将进入节油模式

DAYS_FUEL_REMAINING_TO_ENTER_FUEL_SAVING_MODE_FUEL_RATIO = 0.4,

DAYS_FUEL_REMAINING_TO_ENTER_FUEL_SAVING_MODE_FUEL_RATIO = 0.4，



FUEL_RATIO_TO_EXIST_FUEL_SAVING_MODE = 0.60, 					— countries will exit fuel saving mode if they have more fuel ratio than this

FUEL_RATIO_TO_EXIST_FUEL_SAVING_MODE = 0.60， — 如果国家/地区的燃油比高于此值，则国家/地区将退出节油模式



WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_ARMY_MAX_CONSUMPTION = 60, — AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer

WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_ARMY_MAX_CONSUMPTION = 60， — AI 将尝试在最大消耗量上缓冲至少此天数，必要时将进行交易，并将使用此缓冲区进入节油模式/侵略模式

WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_AIR_MAX_CONSUMPTION = 60, — AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer

WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_AIR_MAX_CONSUMPTION = 60， — AI 将尝试在最大消耗量上缓冲至少此天数，必要时将进行交易，并将使用此缓冲区进入节油模式/侵略模式

WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_NAVY_MAX_CONSUMPTION = 60, — AI will try to buffer at least this amount of days on max consumption, will trade if necesarry and will go into fuel saving mode/aggresive mode using this buffer

WANTED_MAX_FUEL_BUFFER_IN_DAYS_FOR_NAVY_MAX_CONSUMPTION = 60， — AI 将尝试在最大消耗量上缓冲至少此天数，必要时将进行交易，并将使用此缓冲区进入节油模式/侵略模式

MIN_WANTED_MAX_FUEL = 50,									 — minimum value for wanted fuel buffers for AI (in thousands)

MIN_WANTED_MAX_FUEL = 50， — AI 所需的燃料缓冲区的最小值（以千为单位）



GIE_LEND_LEASE_TO_PLAYER_EXILE_DESIRE_BONUS = 40, — AI host is more likely to accept lend lease requests from a player.

GIE_LEND_LEASE_TO_PLAYER_EXILE_DESIRE_BONUS = 40， — AI 主机更有可能接受玩家的租借请求。



NAVAL_BASE_RATIO_ALLOCATED_FOR_REPAIRS = 0.25,				— ai will allocate at most this ratio of dockyards for repairs in peace time

NAVAL_BASE_RATIO_ALLOCATED_FOR_REPAIRS = 0.25， — ai 将在和平时期最多分配此比例的船坞进行维修

NAVAL_BASE_RATIO_ALLOCATED_FOR_REPAIRS_IN_WAR_TIME = 0.6,	— ai will allocate at most this ratio of dockyards for repairs in war time

NAVAL_BASE_RATIO_ALLOCATED_FOR_REPAIRS_IN_WAR_TIME = 0.6， — AI 将最多分配此比例的船坞用于战时维修



MAX_FUEL_CONSUMPTION_RATIO_FOR_AIR_TRAINING = 0.20,			— ai will use at most this ratio of affordable fuel for air training

MAX_FUEL_CONSUMPTION_RATIO_FOR_AIR_TRAINING = 0.20， — AI 将最多使用这个比例的负担得起的燃料进行空中训练

MAX_FUEL_CONSUMPTION_RATIO_FOR_NAVY_TRAINING = 0.20,		— ai will use at most this ratio of affordable fuel for naval training

MAX_FUEL_CONSUMPTION_RATIO_FOR_NAVY_TRAINING = 0.20， — AI 最多使用这个比例的负担得起的燃料进行海军训练



MAX_FULLY_TRAINED_SHIP_RATIO_FOR_TRAINING = 0.7,			— ai will not train a taskforce if fully trained ships are above this ratio

MAX_FULLY_TRAINED_SHIP_RATIO_FOR_TRAINING = 0.7， — 如果经过充分训练的飞船高于此比率，AI 将不会训练特遣队



NUM_SILOS_PER_CIVILIAN_FACTORIES = 0.0025,					— ai will try to build a silo per this ratio of civ factories

NUM_SILOS_PER_CIVILIAN_FACTORIES = 0.0025， — AI 将尝试根据此比例的 Civ 工厂构建一个筒仓

NUM_SILOS_PER_MILITARY_FACTORIES = 0.012,					— ai will try to build a silo per this ratio of mil factories

NUM_SILOS_PER_MILITARY_FACTORIES = 0.012， — AI 将尝试根据此比例的 mil 工厂构建一个筒仓

NUM_SILOS_PER_DOCKYARDS = 0.02,								— ai will try to build a silo per this ratio of dockyards

NUM_SILOS_PER_DOCKYARDS = 0.02， — AI 将尝试根据此比例的船坞建造一个筒仓



SHIP_STR_RATIO_PUT_ON_REPAIRS = 0.8,						— if ships are damaged below this ratio, they are put for repairs

SHIP_STR_RATIO_PUT_ON_REPAIRS = 0.8， — 如果船舶的损坏率低于此比率，则进行维修

SHIP_STR_RATIO_EXIT_REPAIRS = 1.00,							— the ships will leave repairs if they are >= this ratio of total str

SHIP_STR_RATIO_EXIT_REPAIRS = 1.00， — 如果船舶> = 总 str 的比率，则船舶将离开维修

REPAIR_TASKFORCE_SIZE = 4,									— repair taskforce sizes are limited to this many ships

REPAIR_TASKFORCE_SIZE = 4， — 维修特遣队的规模仅限于这么多船只



PLAN_VALUE_BONUS_FOR_MOVING_UNITS = 0.35,					— AI plans gets a bonus when units are not moving and ready to fight

PLAN_VALUE_BONUS_FOR_MOVING_UNITS = 0.35， — 当单位不移动并准备战斗时，AI 计划会获得加成

AGGRESSIVENESS_BONUS_FOR_FRONTS_THAT_ARE_ON_HIGH_AGGRESSIVENESS	= -0.4,	— AI gets a bonus to aggresiveness if it is already executing an aggressive plan (lower is more aggressive)

AGGRESSIVENESS_BONUS_FOR_FRONTS_THAT_ARE_ON_HIGH_AGGRESSIVENESS = -0.4， — 如果 AI 已经在执行激进的计划，它会获得侵略性加成（越低越激进）

AGGRESSIVENESS_CHECK_BASE = 1.5,							— front comparison where ai will consider aggressive stance, unless it is already then the number above is used

AGGRESSIVENESS_CHECK_BASE = 1.5， — 前比较，其中 AI 会考虑激进的姿态，除非已经如此，否则使用上面的数字

AGGRESSIVENESS_CHECK_EASY_TARGET = -0.3,					— if target nation is flagged as easy target we also adjust down the front comparison needed

AGGRESSIVENESS_CHECK_EASY_TARGET = -0.3， — 如果目标国家被标记为简单目标，我们还会根据需要调整前比较

AGGRESSIVENESS_CHECK_CAREFUL = 0.6,							— at what front strength balance do we go careful

AGGRESSIVENESS_CHECK_CAREFUL = 0.6， — 在什么前线强度平衡下我们要小心

AGGRESSIVENESS_CHECK_PARTLY_FORTIFIED = 2.0,				— if front strength balance is at or above this value versus a party fortified enemy, we do a balanced attack

AGGRESSIVENESS_CHECK_PARTLY_FORTIFIED = 2.0， — 如果前线力量平衡等于或高于此值，而敌人是队伍强化的敌人，则我们进行平衡攻击

AGGRESSIVENESS_CHECK_PARTLY_FORTIFIED_WEAK_POINTS = 0.75,	— if front strength balance is at or above this value versus a party fortified enemy, we rush attack weak points; below this value, we are careful

AGGRESSIVENESS_CHECK_PARTLY_FORTIFIED_WEAK_POINTS = 0.75， — 如果前线力量平衡等于或高于此值，而敌人是队伍设防的敌人，我们会冲刺攻击弱点;低于此值，我们会小心

AGGRESSIVENESS_CHECK_FULLY_FORTIFIED = 10,					— if front strength balance is at or above this value versus a fully fortified enemy with no weak points, we do a balanced attack instead being careful

AGGRESSIVENESS_CHECK_FULLY_FORTIFIED = 10， — 如果前方力量平衡等于或高于此值，而敌人完全设防且没有弱点，我们会进行平衡攻击，而不是小心

AGGRESSIVENESS_CHECK_FULLY_FORTIFIED_POCKET = 6,			— if front strength balance is at or above this value versus a fully fortified enemy in a pocket, we do a balanced attack instead being careful

AGGRESSIVENESS_CHECK_FULLY_FORTIFIED_POCKET = 6， — 如果前方力量平衡等于或高于此值，而口袋里有完全强化的敌人，我们会进行平衡攻击，而不是小心

FRONT_EVAL_UNIT_ACCURACY = 1.0,								— scale how stupid ai will act on fronts. 0 is potato

FRONT_EVAL_UNIT_ACCURACY = 1.0， — 缩放愚蠢的 AI 在正面的行为。0 是土豆

FRONT_EVAL_UNIT_AIR_SUP_IMPACT = 1.0, — scale how good the AI thinks air superiority is for units

FRONT_EVAL_UNIT_AIR_SUP_IMPACT = 1.0， — 缩放 AI 认为单位的空中优势有多好

FRONT_EVAL_UNIT_SUPPLY_AND_ORG_LACK_IMPACT = 1.0,			— scale how painful the AI thinks a combined lack of supply and organization is for units

FRONT_EVAL_UNIT_SUPPLY_AND_ORG_LACK_IMPACT = 1.0， — 衡量 AI 认为供应和组织共同缺乏对单位造成的痛苦程度

FRONT_EVAL_PERCENT_TO_ASSIST_ALLY_FRONT = 0.5, 				— percentage of how many units the AI thinks it should have compared to an ally before considering sending units

FRONT_EVAL_PERCENT_TO_ASSIST_ALLY_FRONT = 0.5， — 在考虑派出单位之前，AI 认为与盟友相比应该拥有多少单位的百分比



PRODUCTION_CARRIER_PLANE_BUFFER_RATIO = 1.5,				— in addition to total deck size of carriers, we want at least this ratio to buffer it

PRODUCTION_CARRIER_PLANE_BUFFER_RATIO = 1.5， — 除了航母的总甲板大小外，我们还希望至少这个比率来缓冲它

PRODUCTION_CARRIER_PLANE_PRODUCTION_BOOST_TO_BUFFER = 4.0, — production of carrier planes will go up by this ratio if we lack buffers

PRODUCTION_CARRIER_PLANE_PRODUCTION_BOOST_TO_BUFFER = 4.0， — 如果我们缺乏缓冲，舰载机的产量将按这个比率增长



NAVAL_MAX_CONVOY_TO_INTEL_FOR_CONVOY_RAIDS = 200, — number of convoys in region will be clamped to this max, anything more will be ignored while assigning raids

NAVAL_MAX_CONVOY_TO_INTEL_FOR_CONVOY_RAIDS = 200， — 区域中的护航队数量将被限制到此最大值，在分配突袭时，任何额外的数量都将被忽略

EXTRA_NAVY_INTEL_FOR_CONVOY_RAIDING = 0.0, — this amount of intel is added to navy intel while ai is assigning convoy raiding mission

EXTRA_NAVY_INTEL_FOR_CONVOY_RAIDING = 0.0， — 当 AI 分配车队突袭任务时，此数量的情报被添加到海军情报中

INTEL_NEEDED_TO_NEGATVE_CONVOY_COUNT_REDUCTION = 80.0, — navy intel is divided by this ratio to negate NAVAL_CONVOY_COUNT_INTEL_DROPOFF_DUE_TO_LOW_DECYPTION

INTEL_NEEDED_TO_NEGATVE_CONVOY_COUNT_REDUCTION = 80.0， — 海军情报除以该比率以抵消NAVAL_CONVOY_COUNT_INTEL_DROPOFF_DUE_TO_LOW_DECYPTION

NAVAL_CONVOY_COUNT_INTEL_DROPOFF_DUE_TO_LOW_DECYPTION = 200, — on lowest navy intel, ai won’t be able to see enemy convoys lower than this ratio

NAVAL_CONVOY_COUNT_INTEL_DROPOFF_DUE_TO_LOW_DECYPTION = 200， — 在最低的海军情报下，AI 将无法看到低于此比率的敌方车队



CONVOY_RAID_SCORE_FROM_CONVOY_INTELLIGENCE = 2.5,			 — each convoy intelligenge will incease raid score by this

CONVOY_RAID_SCORE_FROM_CONVOY_INTELLIGENCE = 2.5， — 每个护航队的智能都会增加突袭分数



AIR_AI_ENEMY_PROV_RATIO_FOR_COMBAT_REGION = 0.15,			 — if a region has more than this ratio of provinces controlled by enemy, AI will consider it as a combat zone while assigning planes

AIR_AI_ENEMY_PROV_RATIO_FOR_COMBAT_REGION = 0.15， — 如果一个地区的敌方控制省份比例超过此比例，AI 会在分配飞机时将其视为战区



RESEARCH_MULTI_DOCTRINE_SCORE = 0.3, — score penalty to researchign multiple doctrines at once for AI

RESEARCH_MULTI_DOCTRINE_SCORE = 0.3， — 一次为 AI 研究多个教义的分数惩罚

CONVOY_ESCORT_SCORE_FROM_CONVOYS = 15, — score for each convoy you have in area

CONVOY_ESCORT_SCORE_FROM_CONVOYS = 15， — 您在该地区的每个车队的分数

CONVOY_ESCORT_MUL_FROM_NO_CONVOYS = 0.02, 	 — score multiplier when no convoys are around

CONVOY_ESCORT_MUL_FROM_NO_CONVOYS = 0.02， — 当周围没有车队时，分数乘数

CONVOY_RAID_MIN_ENEMY_THREAT = 0.05,

CONVOY_RAID_MIN_ENEMY_THREAT = 0.05，



RAILWAY_GUN_PRODUCTION_BASE_DIVISIONS_RATIO_PERCENT = 0,	— Base ratio of desired railway guns to divisions for AI (5 means 5%). Can be modified by railway_guns_divisions_ratio AI strategy value

RAILWAY_GUN_PRODUCTION_BASE_DIVISIONS_RATIO_PERCENT = 0， — 所需铁路炮与 AI 师的基础比率（5 表示 5%）。可以通过 AI 策略值railway_guns_divisions_ratio

RAILWAY_GUN_PRODUCTION_MIN_DIVISONS = 20,					— Minimum required number of divisions for the AI to consider producing railway guns

RAILWAY_GUN_PRODUCTION_MIN_DIVISONS = 20， — AI 考虑生产铁路枪所需的最低师数

RAILWAY_GUN_PRODUCTION_MIN_FACTORIES = 10,					— Minimum required number of military factories for the AI to consider producing railway guns

RAILWAY_GUN_PRODUCTION_MIN_FACTORIES = 10， — AI 考虑生产铁路枪所需的最低军工厂数量

RAILWAY_GUN_PER_ARMY_CAP = 5,								— Maximum railway guns assigned to one army for the AI

RAILWAY_GUN_PER_ARMY_CAP = 5， — 分配给 AI 的一支军队的最大铁路炮

RAILWAY_GUN_ASSIGNMENT_SCORE_UNITCOUNT_MULTIPLIER = 10.0,	— Score multiplier for favoring orders groups with more units when assigning railway guns

RAILWAY_GUN_ASSIGNMENT_SCORE_UNITCOUNT_MULTIPLIER = 10.0， — 分配铁路炮时，偏爱具有更多单位的订单组的分数乘数

RAILWAY_GUN_ASSIGNMENT_SCORE_HOLD = 20,						— Score for keeping current assignment when assigning railway guns

RAILWAY_GUN_ASSIGNMENT_SCORE_HOLD = 20， — 分配铁路炮时保持当前任务的分数



MAX_UNIT_RATIO_FOR_INVASIONS = 0.4, — countries won’t use armies more than this ratio of total units for invasions

MAX_UNIT_RATIO_FOR_INVASIONS = 0.4， — 国家不会使用超过总单位比例的军队进行入侵

MIN_UNIT_RATIO_FOR_INVASIONS = 0.1, — don’t allocate more divisions than this for naval invasions

MIN_UNIT_RATIO_FOR_INVASIONS = 0.1， — 不要为海军入侵分配超过此的师

MAX_INVASION_FRONT_SCORE = 1000, — max score for naval invasion front scores

MAX_INVASION_FRONT_SCORE = 1000， — 海军入侵前线得分的最高分

MIN_FRONT_SCORE_FOR_AFTER_INVASION_AREAS = 1500,			— min score for army fronts that are created on recently invaded regions

MIN_FRONT_SCORE_FOR_AFTER_INVASION_AREAS = 1500， — 在最近被入侵的地区创建的军队前线的最低分数



MIN_CONVOY_EFFICIENCY_TO_CANCEL_TRADES = 0.4,				— min efficiency (due to convoy raid) to cancel trades

MIN_CONVOY_EFFICIENCY_TO_CANCEL_TRADES = 0.4， — 取消交易的最低效率（由于车队突袭）

MIN_CONVOY_EFFICIENCY_TO_START_TRADES = 0.6,				— min efficiency (due to convoy raid) to start be able to trades

MIN_CONVOY_EFFICIENCY_TO_START_TRADES = 0.6， — 开始能够进行交易的最低效率（由于车队突袭）

MIN_CONVOY_EFFICIENCY_PER_WAR_SUPPORT_HIT = 0.6,			— percentage of warsupport hit you get is multiplied by this value and added to min convoy efficiencies

MIN_CONVOY_EFFICIENCY_PER_WAR_SUPPORT_HIT = 0.6， — 你得到的 WarSupport 命中百分比乘以该值，并加上最低护航效率



NAVAL_INVADED_AREA_PRIO_DURATION = 90,								— after successful invasion, AI will prio the enemy area for this number of days

NAVAL_INVADED_AREA_PRIO_DURATION = 90， — 成功入侵后，AI 将在这几天内占领敌方区域

NAVAL_INVADED_AREA_PRIO_MULT = 1.2,									— fronts that belongs to recent invasions gets more prio

NAVAL_INVADED_AREA_PRIO_MULT = 1.2， — 属于最近入侵的锋面获得更多优先权

MIN_NUM_CONQUERED_PROVINCES_TO_DEPRIO_NAVAL_INVADED_FRONTS = 20,	— if you conquer this amount of provinces after a naval invasion, it will lose its prio status and will act as a regular front

MIN_NUM_CONQUERED_PROVINCES_TO_DEPRIO_NAVAL_INVADED_FRONTS = 20， — 如果你在海军入侵后征服了这么多的省份，它将失去其 Prio 地位，并将充当常规前线



INVASION_TARGET_DISTANCE_DENOMINATOR = 1000, — When selecting invasion target, divide this with (pixel) distance to get distance score factor. (Doesn’t really affect the relative scoring, but it affects the linearity of the score function.)

INVASION_TARGET_DISTANCE_DENOMINATOR = 1000， — 选择入侵目标时，将其除以（像素）距离以获得距离得分因子。（并不真正影响相对评分，但它会影响评分函数的线性度。

INVASION_TARGET_NO_PORT_FACTOR = 0.3, — When selecting invasion target, multiply score with this if the target has no port

INVASION_TARGET_NO_PORT_FACTOR = 0.3， — 选择入侵目标时，如果目标没有端口，则将 score 乘以此值

INVASION_TARGET_TRUNCATION_SELECT_THRESHOLD = 0.6, — When selecting invasion target, use this threshold for truncation selection. (1.0 means select highest scored target, 0.0 means select randomly from all possible target, 0.5 means select randomly from all targets with more than 50 % of highest score)

INVASION_TARGET_TRUNCATION_SELECT_THRESHOLD = 0.6 — 选择入侵目标时，使用此阈值进行截断选择。（1.0 表示选择得分最高的目标，0.0 表示从所有可能的目标中随机选择，0.5 表示从最高分超过 50% 的所有目标中随机选择）

INVASION_TARGET_PRIO_NOT_ENEMY_FACTOR = 0.17, — When calculating priority for an invasion, factor the score with this if the target is not an actual enemy.

INVASION_TARGET_PRIO_NOT_ENEMY_FACTOR = 0.17， — 在计算入侵的优先级时，如果目标不是真正的敌人，则用这个分数来考虑这个分数。

FAILED_INVASION_AVOID_DURATION = 60, — after a failed invasion, AI will down-prioritize invading the same area again for this number of days

FAILED_INVASION_AVOID_DURATION = 60， — 入侵失败后，AI 将在这段时间内降低再次入侵同一区域的优先级

FAILED_INVASION_AREA_PRIO_FACTOR = 0.5, — for every failed invasion on an area, factor that area’s invasion prio with this value

FAILED_INVASION_AREA_PRIO_FACTOR = 0.5， — 对于某个区域上的每次失败入侵，将该值与该区域的入侵优先级系数

FAILED_INVASION_PORT_PRIO_FACTOR = 0.66, — for every failed invasion on a target port (province), factor the chance that we try to invade that same port again (relative to other ports)

FAILED_INVASION_PORT_PRIO_FACTOR = 0.66， — 对于目标港口（省份）上的每次失败入侵，考虑我们尝试再次入侵同一港口的几率（相对于其他港口）



BUILDING_TARGETS_BUILDING_PRIORITIES = {				— buildings in order of pirority when considering building targets strategies. First has the greatest priority, omitted has the lowest. NOTE: not all buildings are supported by building targets strategies.

BUILDING_TARGETS_BUILDING_PRIORITIES = { — 在考虑构建目标策略时，按生命周期顺序构建。first 的优先级最高，ignoreded 的优先级最低。注意：并非所有建筑物都受建筑目标策略支持。

‘industrial_complex’,

'industrial_complex'，

},



MIN_INVASION_PLAN_VALUE_TO_EXECUTE = 0.3, — ai will only activate invasions if plan value is above this

MIN_INVASION_PLAN_VALUE_TO_EXECUTE = 0.3， — 仅当计划值高于此值时，AI 才会激活入侵

MIN_INVASION_ORG_FACTOR_TO_EXECUTE = 0.9, — ai will only activate invasions if average org factor is above this

MIN_INVASION_ORG_FACTOR_TO_EXECUTE = 0.9， — AI 只有在平均组织系数高于此系数时才会激活入侵

MIN_INVASION_UNITS_READY_TO_EXECUTE = 0.9, — ai will only activate invasions if this ratio of assigned units are ready

MIN_INVASION_UNITS_READY_TO_EXECUTE = 0.9， — 只有当这个比例的已分配单位准备就绪时，AI 才会激活入侵

MAX_INVASION_SIZE = 24, — max invasion group size

MAX_INVASION_SIZE = 24， — 最大侵入组大小



MAX_PORT_STRIKE_HISTORY_TO_REMEMBER = 5000,				— maximum port strike history to keep track (will be used to disable ports

MAX_PORT_STRIKE_HISTORY_TO_REMEMBER = 5000， — 要跟踪的最大端口触发历史记录（将用于禁用端口

PORT_STRIKE_HISTORY_DECAY_MIN = 10,						— minimum decay for port strike history (<7 days since last port strike)

PORT_STRIKE_HISTORY_DECAY_MIN = 10， — 港口撞击历史的最小衰减（自上次港口撞击后 <7 天）

PORT_STRIKE_HISTORY_DECAY_MAX = 400,					— maximum decay for port strike history (>=37 days since last port strike)

PORT_STRIKE_HISTORY_DECAY_MAX = 400， — 港口撞击历史的最大衰减（>=自上次港口撞击以来的 37 天）

MAX_PORT_RATIO_TO_DISABLE = 0.8,						— max ratio of ports to disable due to port strikes

MAX_PORT_RATIO_TO_DISABLE = 0.8 — 由于端口触发而禁用的最大端口比率

PORT_STRIKE_HISTORY_VALUE_TO_DISABLE_REPAIRS = 200,		— cut off for disabling ports above this threshold

PORT_STRIKE_HISTORY_VALUE_TO_DISABLE_REPAIRS = 200， — 禁用高于此阈值的端口时截止

PORT_STRIKE_HISTORY_VALUE_TO_REENABLE_REPAIRS = 10, — cut off for reenabling ports bloew this threshold

PORT_STRIKE_HISTORY_VALUE_TO_REENABLE_REPAIRS = 10， — 重新启用此阈值的端口时截止



CURRENT_LAW_SCORE_BONUS = 50.0,							— current score will get an additional bonus to its ai weight

CURRENT_LAW_SCORE_BONUS = 50.0， — 当前分数将获得其 AI 权重的额外加成

— these values are used for ai_desire_ variables that are used occupation law selection

- 这些值用于 ai_desire_ Industries Law Selection （职业法选择） 的变量

OIL_WANT_PER_POTENTIAL_LAND_CONSUMPTION_K = 0.05, 	— how much extra oil requested on top of balance for country’s potential oil consumptions

OIL_WANT_PER_POTENTIAL_LAND_CONSUMPTION_K = 0.05， — 在该国潜在石油消费量的余额之上申请的额外石油量

OIL_WANT_PER_POTENTIAL_NAVY_CONSUMPTION_K = 0.03,

OIL_WANT_PER_POTENTIAL_NAVY_CONSUMPTION_K = 0.03，

OIL_WANT_PER_POTENTIAL_AIR_CONSUMPTION_K = 0.03,

OIL_WANT_PER_POTENTIAL_AIR_CONSUMPTION_K = 0.03，

OIL_WANT_PER_POTENTIAL_MISC_CONSUMPTION_K = 0.1,

OIL_WANT_PER_POTENTIAL_MISC_CONSUMPTION_K = 0.1，

OIL_WANT_AT_PEACE_PER_POTENTIAL_LAND_CONSUMPTION_K = 0.02,

OIL_WANT_AT_PEACE_PER_POTENTIAL_LAND_CONSUMPTION_K = 0.02，

OIL_WANT_AT_PEACE_PER_POTENTIAL_NAVY_CONSUMPTION_K = 0.0,

OIL_WANT_AT_PEACE_PER_POTENTIAL_NAVY_CONSUMPTION_K = 0.0，

OIL_WANT_AT_PEACE_PER_POTENTIAL_AIR_CONSUMPTION_K = 0.0,

OIL_WANT_AT_PEACE_PER_POTENTIAL_AIR_CONSUMPTION_K = 0.0，

OIL_WANT_AT_PEACE_PER_POTENTIAL_MISC_CONSUMPTION_K = 0.1,

OIL_WANT_AT_PEACE_PER_POTENTIAL_MISC_CONSUMPTION_K = 0.1，

RESOURCE_WANT_PER_MISSING_BALANCE = 0.2,					— negative balance increases the desire on a resource

RESOURCE_WANT_PER_MISSING_BALANCE = 0.2， — 负余额会增加对资源的需求

RESOURCE_WANT_PER_CONSUMED = 0.05,							— if resource is being used in production, increase the desire

RESOURCE_WANT_PER_CONSUMED = 0.05， — 如果生产中使用了资源，则增加 DESIRE

— ~end

— ~结束



— crypto ai calculates a score & a threshold for each cracked crypto

— 加密AI为每个破解的加密货币计算分数和阈值

— if score > crypto, it activates the crypto

— 如果 score > crypto，它会激活 crypto

CRYPTO_ACTIVATION_THRESHOLD = 1.25,				— will multiply crypto activation threshold. larger

CRYPTO_ACTIVATION_THRESHOLD = 1.25， — 将乘以加密激活阈值。较大



CRYPTO_ACTIVATE_NUM_DAYS_DROP_OFF = 0.4,		— longer decrypted crypto waits, lower threshold it will have. threshold will be multiplied by this value at most

CRYPTO_ACTIVATE_NUM_DAYS_DROP_OFF = 0.4， — 解密的加密等待时间越长，阈值越低。threshold 最多乘以此值

CRYPTO_ACTIVATE_NUM_DAYS_DECAY = 60,			— at this number of days, it will decay by %50 of prev define

CRYPTO_ACTIVATE_NUM_DAYS_DECAY = 60， — 在此天数下，它将衰减 prev define 的 %50



CRYPTO_ACTIVATE_NUM_ACTIVATED_DROP_OFF = 0.6,				— having an already activated cryptos will further multiply threshold, down to this value

CRYPTO_ACTIVATE_NUM_ACTIVATED_DROP_OFF = 0.6， — 拥有已激活的加密货币将进一步乘以阈值，降至此值



CRYPTO_ACTIVATION_SCORE_ARMIES_IN_COMBAT_BONUS = 0.2, 		— having units in combat will increase the score by this ratio

CRYPTO_ACTIVATION_SCORE_ARMIES_IN_COMBAT_BONUS = 0.2， — 让单位处于战斗状态将按此比例增加分数

CRYPTO_ACTIVATION_SCORE_OUR_CAPITAL_BONUS = 0.2, 			— fronts of our capital get a bonus by this ratio

CRYPTO_ACTIVATION_SCORE_OUR_CAPITAL_BONUS = 0.2， — 我们资本的前端按此比率获得奖金

CRYPTO_ACTIVATION_SCORE_ENEMY_CAPITAL_BONUS = 0.2, 			— fronts of enemy capital get a bonus by this ratio

CRYPTO_ACTIVATION_SCORE_ENEMY_CAPITAL_BONUS = 0.2， — 敌方首都的前线按此比例获得加成

CRYPTO_AFTER_SCORE_INVASION_FRONT_BONUS = 1.0, 				— a front that is naval invading will increase the score by this ratio

CRYPTO_AFTER_SCORE_INVASION_FRONT_BONUS = 1.0， — 海军入侵的战线将按此比率增加分数

— ~crypto ai

— ~加密人工智能



MAX_MODULAR_EQUIPMENT_EQUIPMENT_UPGRADE_COUNT_PER_PASS = 4, — the maximum number of level AI will try to add to an equipment upgrade of an equipment defined in common/ai_equipment in one pass

MAX_MODULAR_EQUIPMENT_EQUIPMENT_UPGRADE_COUNT_PER_PASS = 4， — AI 将尝试在一次通道中添加到通用/ai_equipment 定义的设备升级的最大等级数



EQUIPMENT_UPGRADE_VARIANT_MATCH_SCORE_FACTOR = 0.2, — the weight of equipment upgrade level when computing the match score of a variant to an ai equipment design.

EQUIPMENT_UPGRADE_VARIANT_MATCH_SCORE_FACTOR = 0.2， — 在计算变体与 AI 设备设计的匹配分数时，设备升级等级的权重。



AI_UPDATE_ROLES_FREQUENCY_HOURS = 48; — Update the roles for a country AI this often (affects performance)

AI_UPDATE_ROLES_FREQUENCY_HOURS = 48;— 经常更新国家 AI 的角色（影响性能）



UPDATE_SUPPLY_BOTTLENECKS_FREQUENCY_HOURS = 168; — Check for and try to fix supply bottlenecks this often. (168 hours = 1 week)

UPDATE_SUPPLY_BOTTLENECKS_FREQUENCY_HOURS = 168;— 经常检查并尝试解决供应瓶颈。（168 小时 = 1 周）

FIX_SUPPLY_BOTTLENECK_SATURATION_THRESHOLD = 0.85; — Try to fix supply bottlenecks if supply node saturation exceeds this value.

FIX_SUPPLY_BOTTLENECK_SATURATION_THRESHOLD = 0.85;— 如果供应节点饱和超过此值，请尝试解决供应瓶颈。



UPDATE_SUPPLY_MOTORIZATION_FREQUENCY_HOURS = 52; — Check if activating motorization would improve supply situation this often.

UPDATE_SUPPLY_MOTORIZATION_FREQUENCY_HOURS = 52;— 检查激活机动化是否会经常改善供应情况。



AI_PREFERRED_TACTIC_WEEKLY_CHANGE_CHANCE = 0.05, 	— Chance for AI to select a new preferred tactic if they don’t have one selected

AI_PREFERRED_TACTIC_WEEKLY_CHANGE_CHANCE = 0.05， — 如果 AI 没有选择新的首选策略，则 AI 有几率选择



— <start> assigning leaders to armies

— <start> 为军队分配领导者

ARMY_LEADER_ASSIGN_KEEP_CURRENT_LEADER_FACTOR = 1.2, — Boosts the score for keeping the current leader. Value > 1.0 favors the current leader.

ARMY_LEADER_ASSIGN_KEEP_CURRENT_LEADER_FACTOR = 1.2 — 提高保持当前领先者的分数。值> 1.0 有利于当前领导者。

ARMY_LEADER_ASSIGN_DONT_STEAL_OTHER_FACTOR = 0.75, — Reduces the score for leaders assigned elsewhere. Value < 1.0 discourages reassigning these leaders.

ARMY_LEADER_ASSIGN_DONT_STEAL_OTHER_FACTOR = 0.75 — 降低分配给其他位置的引线的分数。价值 < 1.0 不鼓励重新分配这些领导者。

ARMY_LEADER_ASSIGN_FIELD_MARSHAL_TO_ARMY = -500, — Score for assigning a field marshal to a normal army (want to use them for army groups)

ARMY_LEADER_ASSIGN_FIELD_MARSHAL_TO_ARMY = -500， — 将陆军元帅分配给普通军队的分数（想将他们用于军群）

ARMY_LEADER_ASSIGN_EMPTYNESS_MALUS = 0.2, — Factor for avoiding assigning leaders that can lead large armies to small armies (a value of 0.2 reduces the score by max 20 %)

ARMY_LEADER_ASSIGN_EMPTYNESS_MALUS = 0.2， — 避免将可以领导大军的领导者分配给小军的系数（值为 0.2 时，分数最多降低 20%）

ARMY_LEADER_ASSIGN_OVERCAPACITY = -200, — Score for assigning leader to a too large army

ARMY_LEADER_ASSIGN_OVERCAPACITY = -200， — 为过大的军队分配领导者的分数

ARMY_LEADER_ASSIGN_OVERALL_SKILL_FACTOR = 50, — This times general’s overall skill is added to score

ARMY_LEADER_ASSIGN_OVERALL_SKILL_FACTOR = 50， — 这一次将军的整体技能添加到分数中

ARMY_LEADER_ASSIGN_DEFENSE_OVERALL_SKILL_FACTOR = 10, — If defensive army, this times general’s overall skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_OVERALL_SKILL_FACTOR = 10， — 如果是防御军队，这时候将军的整体技能加上得分

ARMY_LEADER_ASSIGN_DEFENSE_ATTACK_SKILL_FACTOR = 3, — If defensive army, this times general’s attack skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_ATTACK_SKILL_FACTOR = 3， — 如果是防御军队，这时候将军的攻击技能加到分数上

ARMY_LEADER_ASSIGN_DEFENSE_DEFENSE_SKILL_FACTOR = 20, — If defensive army, this times general’s defense skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_DEFENSE_SKILL_FACTOR = 20， — 如果防御军队，这时候将军的防御技能加到分数上

ARMY_LEADER_ASSIGN_DEFENSE_LOGISTICS_SKILL_FACTOR = 3, — If defensive army, this times general’s logistics skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_LOGISTICS_SKILL_FACTOR = 3， — 如果是防御军队，则此时间将军的后勤技能添加到分数中

ARMY_LEADER_ASSIGN_DEFENSE_PLANNING_SKILL_FACTOR = 3, — If defensive army, this times general’s planning skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_PLANNING_SKILL_FACTOR = 3， — 如果是防御军队，这时候将军的计划技能被加到分数上

ARMY_LEADER_ASSIGN_INVASION_ATTACK_SKILL_FACTOR = 10, — If invasion army, this times general’s attack skill is added to score

ARMY_LEADER_ASSIGN_INVASION_ATTACK_SKILL_FACTOR = 10， — 如果是入侵军队，这时候将军的攻击技能加到分数上

ARMY_LEADER_ASSIGN_INVASION_DEFENSE_SKILL_FACTOR = 10, — If invasion army, this times general’s defense skill is added to score

ARMY_LEADER_ASSIGN_INVASION_DEFENSE_SKILL_FACTOR = 10， — 如果是入侵军队，这时候将军的防御技能加到分数上

ARMY_LEADER_ASSIGN_INVASION_LOGISTICS_SKILL_FACTOR = 20, — If invasion army, this times general’s logistics skill is added to score

ARMY_LEADER_ASSIGN_INVASION_LOGISTICS_SKILL_FACTOR = 20， — 如果是入侵军队，这时候将军的后勤技能加到分数上

ARMY_LEADER_ASSIGN_INVASION_PLANNING_SKILL_FACTOR = 20, — If invasion army, this times general’s planning skill is added to score

ARMY_LEADER_ASSIGN_INVASION_PLANNING_SKILL_FACTOR = 20， — 如果是入侵军队，这时候将军的计划技能加到分数上

ARMY_LEADER_ASSIGN_ATTACK_SKILL_FACTOR = 20, — This times general’s attack skill is added to score

ARMY_LEADER_ASSIGN_ATTACK_SKILL_FACTOR = 20， — 这一次将军的攻击技能被添加到分数中

ARMY_LEADER_ASSIGN_DEFENSE_SKILL_FACTOR = 10, — This times general’s defense skill is added to score

ARMY_LEADER_ASSIGN_DEFENSE_SKILL_FACTOR = 10， — 这次将军的防御技能被添加到分数中

ARMY_LEADER_ASSIGN_LOGISTICS_SKILL_FACTOR = 7, — This times general’s logistics skill is added to score

ARMY_LEADER_ASSIGN_LOGISTICS_SKILL_FACTOR = 7， — 这一次将军的后勤技能添加到分数中

ARMY_LEADER_ASSIGN_PLANNING_SKILL_FACTOR = 7, — This times general’s planning skill is added to score

ARMY_LEADER_ASSIGN_PLANNING_SKILL_FACTOR = 7， — 这一次将军的计划技能被添加到分数中

ARMY_LEADER_ASSIGN_NR_TRAITS = 5, — This times general’s nr of active traits is added to score

ARMY_LEADER_ASSIGN_NR_TRAITS = 5， — 此时间将 general 的活动特征的 nr 添加到分数中

ARMY_LEADER_ASSIGN_EXILED_LEADS_EXILED_TROOPS = 10, — If exiled leader, increase chance of leading army with exiled troops

ARMY_LEADER_ASSIGN_EXILED_LEADS_EXILED_TROOPS = 10， — 如果被放逐的领袖，则以被放逐的部队率领军队的几率增加

ARMY_LEADER_ASSIGN_EXILED_LEADS_OWN_EXILED_TROOPS = 100, — If exiled leader, increase chance of leading army with exiled troops from same country as the leader

ARMY_LEADER_ASSIGN_EXILED_LEADS_OWN_EXILED_TROOPS = 100， — 如果被流放的领袖，则增加与领袖来自同一国家的流放部队率领军队的几率



— the following defines concern the general’s modifiers

— 以下定义涉及 General 的修饰符

ARMY_LEADER_ASSIGN_DEFENSE_MAX_DIG_IN_FACTOR = 1.0, — If defensive army, importance of general’s MAX_DIG_IN_FACTOR modifier

ARMY_LEADER_ASSIGN_DEFENSE_MAX_DIG_IN_FACTOR = 1.0， — 如果是防御军队，则为将军的MAX_DIG_IN_FACTOR修饰语的重要性

ARMY_LEADER_ASSIGN_DEFENSE_ARMY_ARMOR_DEFENCE_FACTOR = 1.0, — If defensive army, importance of general’s ARMY_ARMOR_DEFENCE_FACTOR modifier (proportional to armor ratio in the army)

ARMY_LEADER_ASSIGN_DEFENSE_ARMY_ARMOR_DEFENCE_FACTOR = 1.0， — 如果是防御军队，将军的ARMY_ARMOR_DEFENCE_FACTOR修饰语的重要性（与军队中的装甲比例成正比）

ARMY_LEADER_ASSIGN_PLANNING_SPEED = 0.1, — Importance of general’s PLANNING_SPEED modifier

ARMY_LEADER_ASSIGN_PLANNING_SPEED = 0.1， — general 的 PLANNING_SPEED 修饰符的重要性

ARMY_LEADER_ASSIGN_MAX_PLANNING = 0.1, — Importance of general’s MAX_PLANNING modifier

ARMY_LEADER_ASSIGN_MAX_PLANNING = 0.1， — general 的 MAX_PLANNING 修饰符的重要性

ARMY_LEADER_ASSIGN_RECON_FACTOR = 2.0, — Importance of general’s RECON_FACTOR modifier

ARMY_LEADER_ASSIGN_RECON_FACTOR = 2.0， — general 的 RECON_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_OUT_OF_SUPPLY_FACTOR = 1.0, — Importance of general’s OUT_OF_SUPPLY_FACTOR modifier

ARMY_LEADER_ASSIGN_OUT_OF_SUPPLY_FACTOR = 1.0， — general 的 OUT_OF_SUPPLY_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_WINTER_ATTRITION_FACTOR = 1.0, — Importance of general’s WINTER_ATTRITION_FACTOR modifier

ARMY_LEADER_ASSIGN_WINTER_ATTRITION_FACTOR = 1.0， — 将军的 WINTER_ATTRITION_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_ARMY_ARMOR_SPEED_FACTOR = 20.0, — Importance of general’s ARMY_ARMOR_SPEED_FACTOR modifier (proportional to armor ratio in the army)

ARMY_LEADER_ASSIGN_ARMY_ARMOR_SPEED_FACTOR = 20.0， — 将军的ARMY_ARMOR_SPEED_FACTOR修正的重要性（与军队中的装甲比例成正比）

ARMY_LEADER_ASSIGN_ARMY_ARMOR_ATTACK_FACTOR = 20.0, — Importance of general’s ARMY_ARMOR_ATTACK_FACTOR modifier (proportional to armor ratio in the army)

ARMY_LEADER_ASSIGN_ARMY_ARMOR_ATTACK_FACTOR = 20.0， — 将军的ARMY_ARMOR_ATTACK_FACTOR修饰符的重要性（与军队中的装甲比例成正比）

ARMY_LEADER_ASSIGN_BOOST_ARMOR_SKILL = 20.0, — Importance of general’s trait where armor skill is boosted, e.g. armor_officer which boosts panzer_leader (proportional to armor ratio in the army)

ARMY_LEADER_ASSIGN_BOOST_ARMOR_SKILL = 20.0， — 将军特征的重要性，盔甲技能得到提升，例如 armor_officer 提升panzer_leader（与军队中的盔甲比例成正比）

ARMY_LEADER_ASSIGN_ARMOR_LEADER_IF_NO_ARMOR = -0.5, — Avoid assigning a general with armor skills to an army with no armor (can be negative)

ARMY_LEADER_ASSIGN_ARMOR_LEADER_IF_NO_ARMOR = -0.5， — 避免将拥有护甲技能的将军分配给没有护甲的军队（可以是负数）

ARMY_LEADER_ASSIGN_AMPHIBIOUS_INVASION = 1.0, — If involved in invasion, importance of general’s AMPHIBIOUS_INVASION modifier

ARMY_LEADER_ASSIGN_AMPHIBIOUS_INVASION = 1.0， — 如果参与入侵，则 general's AMPHIBIOUS_INVASION 修饰语的重要性

ARMY_LEADER_ASSIGN_NAVAL_INVASION_PREPARATION = 1.0, — If involved in invasion, importance of general’s NAVAL_INVASION_PREPARATION modifier

ARMY_LEADER_ASSIGN_NAVAL_INVASION_PREPARATION = 1.0， — 如果卷入入侵，则为将军的NAVAL_INVASION_PREPARATION修饰语的重要性

ARMY_LEADER_ASSIGN_XP_GAIN_FACTOR = 2.0, — Importance of general’s XP_GAIN_FACTOR modifier

ARMY_LEADER_ASSIGN_XP_GAIN_FACTOR = 2.0， — general 的 XP_GAIN_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_SUPPLY_CONSUMPTION_FACTOR = 1.0, — Importance of general’s SUPPLY_CONSUMPTION_FACTOR modifier

ARMY_LEADER_ASSIGN_SUPPLY_CONSUMPTION_FACTOR = 1.0， — 将军的 SUPPLY_CONSUMPTION_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_LAND_REINFORCE_RATE = 1.0, — Importance of general’s LAND_REINFORCE_RATE modifier

ARMY_LEADER_ASSIGN_LAND_REINFORCE_RATE = 1.0， — general's LAND_REINFORCE_RATE 修饰符的重要性

ARMY_LEADER_ASSIGN_ARMY_MORALE_FACTOR = 1.0, — Importance of general’s ARMY_MORALE_FACTOR modifier

ARMY_LEADER_ASSIGN_ARMY_MORALE_FACTOR = 1.0， — general 的 ARMY_MORALE_FACTOR 修饰符的重要性

ARMY_LEADER_ASSIGN_TERRAIN_FACTOR = 0.2, — Importance of general’s terrain skills

ARMY_LEADER_ASSIGN_TERRAIN_FACTOR = 0.2， — 将军地形技能的重要性

— <end> assigning leaders to armies

— <end> 为军队分配领导者



— Which settings will AI use for area defense by default

— AI 默认使用哪些设置进行区域防御

AREA_DEFENSE_SETTING_VP = false,

AREA_DEFENSE_SETTING_VP = false，

AREA_DEFENSE_SETTING_PORTS = true,

AREA_DEFENSE_SETTING_PORTS = 真，

AREA_DEFENSE_SETTING_AIRBASES = false,

AREA_DEFENSE_SETTING_AIRBASES = false，

AREA_DEFENSE_SETTING_BORDERS = false,

AREA_DEFENSE_SETTING_BORDERS = false，

AREA_DEFENSE_SETTING_FORTS = false,

AREA_DEFENSE_SETTING_FORTS = false，

AREA_DEFENSE_SETTING_COASTLINES = true,

AREA_DEFENSE_SETTING_COASTLINES = 真，

AREA_DEFENSE_SETTING_RAILWAYS = false,

AREA_DEFENSE_SETTING_RAILWAYS = false，

AREA_DEFENSE_SETTING_FACILITY = false,

AREA_DEFENSE_SETTING_FACILITY = false，



AREA_DEFENSE_MINCAP_MAX_CAPITAL_DEFENSE = 100, — MaxUnits for capital defense is at least this. (basically use capital defense as a buffer if we have “too many units”)

AREA_DEFENSE_MINCAP_MAX_CAPITAL_DEFENSE = 100， — 用于首都防御的 MaxUnits 至少是这个。（如果我们有“太多单位”，基本上使用 Capital Defense 作为缓冲）

AREA_DEFENSE_MINCAP_DESIRED_CAPITAL_DEFENSE = 5, — DesiredUnits for capital defense is at least this.

AREA_DEFENSE_MINCAP_DESIRED_CAPITAL_DEFENSE = 5， — 用于首都防御的 DesiredUnits 至少是这个。

AREA_DEFENSE_MINCAP_MAX_HOME_AREA = 10, — MaxUnits for home area is at least this.

AREA_DEFENSE_MINCAP_MAX_HOME_AREA = 10，— home area 的 MaxUnits 至少是这个值。

AREA_DEFENSE_MINCAP_DESIRED_HOME_AREA = 3, — DesiredUnits for home area is at least this.

AREA_DEFENSE_MINCAP_DESIRED_HOME_AREA = 3， — 主区域的 DesiredUnits 至少为 this。



COMMAND_POWER_BEFORE_SPEND_ON_TRAITS = 30.0,

COMMAND_POWER_BEFORE_SPEND_ON_TRAITS = 30.0，



PEACE_BID_FOLD_TURNS_AGAINST_OTHER_AI = 2, — Resolve contests against other AIs after this many turns. Don’t always contest forever, it yields the same results.

PEACE_BID_FOLD_TURNS_AGAINST_OTHER_AI = 2， — 在这么多回合后解决与其他 AI 的竞争。不要总是永远竞争，它会产生相同的结果。

— When resolving contest against other AI, a tie breaker score is calculated and the loser folds.

— 在解决与其他 AI 的比赛时，将计算平局决胜局分数，失败者弃牌。

PEACE_BID_CONTEST_TIE_BREAKER_CONFERENCE_SCORE = 1.0, — How much to weigh relative remaining peace conference score between the countries

PEACE_BID_CONTEST_TIE_BREAKER_CONFERENCE_SCORE = 1.0， — 衡量国家之间相对剩余的和平会议分数的多少

PEACE_BID_CONTEST_TIE_BREAKER_INFLUENCE_DISTANCE = 1.0, — How much to weigh relative influence distance between the countries

PEACE_BID_CONTEST_TIE_BREAKER_INFLUENCE_DISTANCE = 1.0， — 权衡国家/地区之间的相对影响距离的程度

PEACE_BID_CONTEST_TIE_BREAKER_COUNTRY_SCORE = 1.0, — How much to weigh relative country score between the countries

PEACE_BID_CONTEST_TIE_BREAKER_COUNTRY_SCORE = 1.0， — 权衡国家/地区之间的相对国家/地区分数的程度

— End of tie breaker score factors

— 决胜局结束得分因素

PEACE_BID_FOLD_AGAINST_PLAYER_CHANCE = 0.5, — Likelihood that AI will fold in a bidding contest against human player.

PEACE_BID_FOLD_AGAINST_PLAYER_CHANCE = 0.5， — AI 在与人类玩家的竞标比赛中弃牌的可能性。

PEACE_BID_FOLD_AGAINST_LIBERATE_CONTEST = 1.0, — Likelihood that the AI will back down against a same-ideology country performing a contesting liberate bid ##Bordergore prevention therapy

PEACE_BID_FOLD_AGAINST_LIBERATE_CONTEST = 1.0， — AI 对执行有争议的解放申办 ##Bordergore 预防疗法的相同意识形态国家让步的可能性

PEACE_AI_GROUP_PEACE_ACTIONS = true, — Whether AI should group peace actions or greedily just select the most-desired peace actions

PEACE_AI_GROUP_PEACE_ACTIONS = true， — AI 是应该将和平行动分组，还是贪婪地只选择最需要的和平行动

PEACE_AI_EVALUATE_FOR_SUBJECTS = true, — Whether AI should include subjects when evaluating giving states to other winners (may affect performance on new conference turn)

PEACE_AI_EVALUATE_FOR_SUBJECTS = true， — AI 在评估将状态分配给其他获胜者时是否应包括主题（可能会影响新会议轮次的表现）

PEACE_AI_EVALUATE_FOR_ALLIES = true, — Whether AI should include allies when evaluating giving states to other winners (may affect performance on new conference turn)

PEACE_AI_EVALUATE_FOR_ALLIES = true， — AI 在评估将状态分配给其他获胜者时是否应包括盟友（可能会影响新联盟回合的表现）

PEACE_AI_EVALUATE_FOR_NON_ALLIES = false, — Whether AI should include non-allies (not in same faction) when evaluating giving states to other winners (may affect performance on new conference turn)

PEACE_AI_EVALUATE_FOR_NON_ALLIES = false， — AI 在评估将状态分配给其他获胜者时是否应该包括非盟友（不在同一阵营）（可能会影响新联盟回合的表现）

PEACE_AI_EVALUATE_OTHER_IF_CORE = true, — Whether AI should evaluate giving states to other winners if state is their core (may affect performance on new conference turn)

PEACE_AI_EVALUATE_OTHER_IF_CORE = true， — 如果状态是其他获胜者的核心，AI 是否应该评估将状态分配给其他获胜者（可能会影响新联盟回合的表现）

PEACE_AI_EVALUATE_OTHER_IF_CLAIM = true, — Whether AI should evaluate giving states to other winners if they have a claim on the state (may affect performance on new conference turn)

PEACE_AI_EVALUATE_OTHER_IF_CLAIM = true， — 如果其他获胜者对状态有要求，AI 是否应该评估将状态分配给其他获胜者（可能会影响新会议回合的表现）

PEACE_AI_EVALUATE_OTHER_ALWAYS = false, — Whether AI should always evaluate giving states to other winners (!!! may heavily affect performance on new conference turn for large peace conferences !!!)

PEACE_AI_EVALUATE_OTHER_ALWAYS = false， — AI 是否应该始终评估将状态分配给其他获胜者（!!可能会严重影响大型和平会议新会议轮次的表现 !!）



DIVISION_SUPPLY_RATIO_TO_MOTORIZE = 0.80,						— If supply ratio is less than this, consider motorizing any applicable nearby supply hub

DIVISION_SUPPLY_RATIO_TO_MOTORIZE = 0.80， — 如果供应比率小于此值，请考虑将附近任何适用的供应中心机动化



INDUSTRIAL_ORG_TRAIT_UNLOCK_RANDOMNESS = 3,		— AI will pick a random from N top traits when choosing a trait to unlock

INDUSTRIAL_ORG_TRAIT_UNLOCK_RANDOMNESS = 3， — AI 在选择要解锁的特征时，将从 N 个排名靠前的特征中随机选择一个

INDUSTRIAL_ORG_POLICY_CHANGE_RANDOMNESS = 3,	— AI will pick a random from N top policies when choosing a policy to attach to an MIO

INDUSTRIAL_ORG_POLICY_CHANGE_RANDOMNESS = 3， — AI 在选择要附加到 MIO 的策略时，将从 N 个排名靠前的策略中随机选择一个

INDUSTRIAL_ORG_RESEARCH_ASSIGN_RANDOMNESS = 3,	— AI will pick a random from N top MIOs when choosing an MIO to assign to a research

INDUSTRIAL_ORG_RESEARCH_ASSIGN_RANDOMNESS = 3， — 在选择要分配给研究的 MIO 时，AI 将从前 N 个 MIO 中随机选择一个

INDUSTRIAL_ORG_PRODUCTION_ASSIGN_RANDOMNESS = 3,— AI will pick a random from N top MIOs when choosing an MIO to assign to a production line

INDUSTRIAL_ORG_PRODUCTION_ASSIGN_RANDOMNESS = 3，— AI 在选择要分配给生产线的 MIO 时，将从前 N 个 MIO 中随机选择一个

INDUSTRIAL_ORG_POLICY_CHANGE_SCALE = 1.0,		— Policy change weight will be scaled by this value

INDUSTRIAL_ORG_POLICY_CHANGE_SCALE = 1.0 – 策略更改权重将按此值进行缩放

INDUSTRIAL_ORG_TRAIT_RANK_FACTOR = 0.80,		— When precomputing weights, traits will affect the final score less the further down the tree they are, by this factor

INDUSTRIAL_ORG_TRAIT_RANK_FACTOR = 0.80， — 在预先计算权重时，特征对最终分数的影响越小，它们位于树的下方越远，受此系数的影响就越小

INDUSTRIAL_ORG_RESEARCH_BONUS_FACTOR = 1.0,		— Research bonus will be multiplied by this factor when evaluating design teams

INDUSTRIAL_ORG_RESEARCH_BONUS_FACTOR = 1.0， — 在评估设计团队时，研究加成将乘以此系数



AI_WANTED_LAND_BASED_PLANES_FACTOR = 0.50,		— Factor applied to desire for land based planes (total airbase space * define)

AI_WANTED_LAND_BASED_PLANES_FACTOR = 0.50 — 应用于对陆基飞机的期望的系数（总空军基地空间 * 定义）

AI_WANTED_CARRIER_BASED_PLANES_FACTOR = 1.0,	— Factor applied to desire for carrier based planes (total carrier space * define)

AI_WANTED_CARRIER_BASED_PLANES_FACTOR = 1.0 — 应用于对航母飞机的期望的系数（总航母空间 * 定义）



— AIFC stands for “AI Force Concentration”. Using acronym to keep define names shorter.

— AIFC 代表“AI Force Concentration”。使用 acronym 使定义名称更短。

AIFC_UPDATE_FREQUENCY_DAYS = 5, — How often will AI run its AI force concentration logic. Lowering this number may decrease performance.

AIFC_UPDATE_FREQUENCY_DAYS = 5， — AI 运行其 AI Force Concentration 逻辑的频率。降低此数字可能会降低性能。

AIFC_FRESHNESS_BASE_VALUE = 45.0, — AIFC fronts have a “freshness value” which decreases if no progress is made. When it reaches zero, it will give up on the current target and try another.

AIFC_FRESHNESS_BASE_VALUE = 45.0， — AIFC 前沿具有“新鲜度值”，如果没有进展，该值会降低。当它达到零时，它将放弃当前目标并尝试另一个目标。

AIFC_REFRESH_NEED_PER_DAY = 1.0, — Decrease freshness value with this every day.

AIFC_REFRESH_NEED_PER_DAY = 1.0 — 每天使用此值降低新鲜度值。

AIFC_REFRESH_NEED_SUPPLY_FACTOR_PER_DAY = 0.8, — Decrease freshness value with this multiplied by average supply ratio every day.

AIFC_REFRESH_NEED_SUPPLY_FACTOR_PER_DAY = 0.8 — 每天乘以平均供应率来降低新鲜度值。

AIFC_FRESHNESS_ADD_ON_PROGRESS = 25.0, — Increase freshness value with this when we advance a province along the target path.

AIFC_FRESHNESS_ADD_ON_PROGRESS = 25.0， — 当我们沿着目标路径推进一个省份时，用这个值增加新鲜度值。

AIFC_UNIT_RATIO_BASE = 0.15, — After fulfilling minimum front unit needs, this ratio of the “extra”/desired units can be allocated to AI force concentration duty

AIFC_UNIT_RATIO_BASE = 0.15， — 在满足最低前部单位需求后，这个“额外”/所需单位的比例可以分配给 AI 部队集中任务

AIFC_MAX_NR_FRONTS = 4, — The X (this) fronts with highest AIFC score are considered for AI force concentration

AIFC_MAX_NR_FRONTS = 4， — AI Force 集中考虑具有最高 AIFC 分数的 X （this） 前线

AIFC_CA_DIVISIONS_PER_PROVINCE = 3, — AI will use this as a baseline of how many divisions to have per province

AIFC_CA_DIVISIONS_PER_PROVINCE = 3， — AI 会以此作为每个省份有多少个分区的基准

AIFC_ACTIVATE_AVG_ORG_RATIO_THRESHOLD = 0.2, — Only activate the offensive order if average organisation is above this.

AIFC_ACTIVATE_AVG_ORG_RATIO_THRESHOLD = 0.2， — 仅当平均组织高于此水平时才激活进攻顺序。

AIFC_ACTIVATE_IN_POSITION_RATIO_THRESHOLD = 0.3, — Only activate the offensive order if divisions in position is more than this ratio.

AIFC_ACTIVATE_IN_POSITION_RATIO_THRESHOLD = 0.3， — 仅当位置分区大于此比率时，才激活进攻顺序。

AIFC_OFFENSIVE_DEACTIVATION_DAYS_THRESHOLD = 5, — Deactivate the offensive order only if the conditions have been unfulfilled for this many days.

AIFC_OFFENSIVE_DEACTIVATION_DAYS_THRESHOLD = 5， — 仅当这些天未满足条件时，才停用进攻性订单。

AIFC_UNIT_NUDGE_FREQUENCY_DAYS = 15, — On average every X day (randomly), check if another division (within same front) is better for AIFC based on score factors below.

AIFC_UNIT_NUDGE_FREQUENCY_DAYS = 15， — 平均每 X 天（随机）检查另一个部门（在同一战线上）是否根据下面的分数因素更适合 AIFC。

— Unit offensiveness score factors for AIFC. Division stats are factored by this before adding up to total score.

— AIFC 的单位进攻得分因素。分区统计数据在加起来达到总分之前会考虑这一点。

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_BREAKTHROUGH = 11.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_BREAKTHROUGH = 11.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SOFT_ATTACK = 6.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SOFT_ATTACK = 6.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARD_ATTACK = 8.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARD_ATTACK = 8.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ARMOR = 30.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ARMOR = 30.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_PIERCING = 4.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_PIERCING = 4.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARDNESS = 300.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HARDNESS = 300.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SPEED = 15.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_SPEED = 15.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_INITIATIVE = 5.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_INITIATIVE = 5.0，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ORGANISATION = 0.3,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ORGANISATION = 0.3，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HITPOINTS = 0.3,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_HITPOINTS = 0.3，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_DEFENSE = -0.2,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_DEFENSE = -0.2，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ENTRENCHMENT = -0.5,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_ENTRENCHMENT = -0.5，

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_EXPERIENCE = 300.0,

AIFC_UNIT_OFFENSIVE_SCORE_FACTOR_EXPERIENCE = 300.0，

— End of unit offensiveness score factors for AIFC

— AIFC 的单位进攻得分因素

— Strategic target scoring for AIFC

— AIFC 的战略目标评分

AIFC_TARGET_IGNORE_VP_THRESHOLD = 10, — VP target needs at leas this many victory points to be considered a target

AIFC_TARGET_IGNORE_VP_THRESHOLD = 10， — VP 目标至少需要这么多的胜利点才能被视为目标

AIFC_TARGET_SUPPLY_HUB_BASE_SCORE = 20.0, — Base score for supply hubs

AIFC_TARGET_SUPPLY_HUB_BASE_SCORE = 20.0 — 供应中心的基本分数

AIFC_TARGET_NAVAL_BASE_BASE_SCORE = 10.0, — Base score for naval bases

AIFC_TARGET_NAVAL_BASE_BASE_SCORE = 10.0 — 海军基地的基本分数

AIFC_TARGET_NAVAL_BASE_SCORE_PER_LEVEL = 1.0, — Score for naval bases increases by this for each level

AIFC_TARGET_NAVAL_BASE_SCORE_PER_LEVEL = 1.0， — 海军基地的分数在每个级别都会增加

AIFC_TARGET_VP_SCORE_FACTOR = 1.0, — Score for VPs increases by this for every victory point

AIFC_TARGET_VP_SCORE_FACTOR = 1.0， — 每获得一个胜利点，VP 的分数就会增加

AIFC_TARGET_CAPITAL_SCORE_EXTRA = 5.0, — Extra score for Capitals (in addition to VP score)

AIFC_TARGET_CAPITAL_SCORE_EXTRA = 5.0， — Capitals 的额外分数（除了 VP 分数）

AIFC_TARGET_SHORT_PATH_PENALTY_FACTOR = 0.1, — Penalty factor for short AIFC paths (path <= 3 (including own start province))

AIFC_TARGET_SHORT_PATH_PENALTY_FACTOR = 0.1 — 短 AIFC 路径的罚因子（路径 <= 3（包括自己的起始省份））

AIFC_TARGET_PERSISTED_FACTOR = 30.0, — Bonus factor for persisted targets (used to incentivize AI to select target again after e.g. front lines have reformed or save file is loaded)

AIFC_TARGET_PERSISTED_FACTOR = 30.0， — 持久目标的奖励因子（用于激励 AI 在前线重组或保存文件加载后再次选择目标）

— End of strategic target scoring for AIFC

— AIFC 战略目标评分结束

— Offensive path scoring (cost multipliers) for AIFC

— AIFC 的进攻路径评分（成本乘数）

AIFC_PATH_MAX_COST = 7.0, — Only allow paths with total cost <= this. WARNING: increasing this value may cause stuttering and other performance issues (since AIFC will evaluate larger areas)

AIFC_PATH_MAX_COST = 7.0 — 仅允许总成本 <= this 的路径。警告：增加此值可能会导致卡顿和其他性能问题（因为 AIFC 将评估更大的区域）

AIFC_PATH_COST_ADJ_NORMAL = 1.0,

AIFC_PATH_COST_ADJ_NORMAL = 1.0，

AIFC_PATH_COST_ADJ_STRAIT = 4.0,

AIFC_PATH_COST_ADJ_STRAIT = 4.0，

AIFC_PATH_COST_ADJ_RIVER = 2.0,

AIFC_PATH_COST_ADJ_RIVER = 2.0，

AIFC_PATH_COST_ADJ_RIVER_LARGE = 3.0,

AIFC_PATH_COST_ADJ_RIVER_LARGE = 3.0，

AIFC_PATH_COST_TRN_MOUNTAINS = 2.0,

AIFC_PATH_COST_TRN_MOUNTAINS = 2.0，

AIFC_PATH_COST_TRN_FOREST = 1.5,

AIFC_PATH_COST_TRN_FOREST = 1.5，

AIFC_PATH_COST_TRN_DESERT = 1.5,

AIFC_PATH_COST_TRN_DESERT = 1.5，

AIFC_PATH_COST_TRN_HILLS = 1.2,

AIFC_PATH_COST_TRN_HILLS = 1.2，

AIFC_PATH_COST_TRN_JUNGLE = 3.0,

AIFC_PATH_COST_TRN_JUNGLE = 3.0，

AIFC_PATH_COST_TRN_PLAINS = 0.8,

AIFC_PATH_COST_TRN_PLAINS = 0.8，

AIFC_PATH_COST_TRN_URBAN = 1.0,

AIFC_PATH_COST_TRN_URBAN = 1.0，

AIFC_PATH_COST_TRN_MARSH = 3.0,

AIFC_PATH_COST_TRN_MARSH = 3.0，

AIFC_PATH_COST_PER_FORT_LEVEL = 0.3, — This multiplier is calculated as: 1.0 + <define>*fort_level (only for fort levels > 0)

AIFC_PATH_COST_PER_FORT_LEVEL = 0.3， — 此乘数的计算公式为：1.0 + <define>*fort_level（仅适用于 > 0 的要塞级别）

AIFC_PATH_COST_HAS_SUPPLY_HUB = 0.5, — If the province we’re entering has a supply hub

AIFC_PATH_COST_HAS_SUPPLY_HUB = 0.5， — 如果我们要进入的省份有供应中心

AIFC_PATH_COST_HAS_NAVAL_BASE = 0.5, — If the province we’re entering has a naval base

AIFC_PATH_COST_HAS_NAVAL_BASE = 0.5， — 如果我们要进入的省份有海军基地

AIFC_PATH_COST_RAILWAY_CONNECTION = 0.75, — If the provinces are connected by a railway with level > 0

AIFC_PATH_COST_RAILWAY_CONNECTION = 0.75， — 如果各省由> 0 的铁路连接

— End of offensive path scoring for AIFC

— AIFC 的进攻路径得分结束



RAIDS_ENABLE_AI = true, — Whether AI should use the raid system

RAIDS_ENABLE_AI = true， — AI 是否应使用 raid 系统

RAIDS_CREATE_FREQUENCY_DAYS = 7, — How often will AI run its raid creation logic. Lowering this number may decrease performance.

RAIDS_CREATE_FREQUENCY_DAYS = 7， — AI 运行其 RAID 创建逻辑的频率。降低此数字可能会降低性能。

RAIDS_SCORE_DIFF_TO_CANCEL = 0.3, — If already-created low-scoring raids are blocking higher-scoring ones from being created due to command power, this allows the AI to cancel the lower-scoring raids. If `lowerScore < <value>*higherScore`, then the lower-scoring one may be cancelled. A value of 0.0 means it will never allow cancelling lower-scoring raids, while a value of 1.0 means it will always allow cancelling lower-scoring raids.

RAIDS_SCORE_DIFF_TO_CANCEL = 0.3， — 如果由于命令能力，已经创建的低分突袭阻止了高分突袭的创建，这允许 AI 取消低分突袭。如果 'lowerScore < <value>*higherScore'，则得分较低的 Score 可能会被取消。值 0.0 表示永远不允许取消得分较低的突袭，而值 1.0 表示始终允许取消得分较低的突袭。

RAIDS_COMMAND_POWER_CAP_TO_CREATE = 60.0, — The AI will only try to create new raids if the command power cap is at least this.

RAIDS_COMMAND_POWER_CAP_TO_CREATE = 60.0， — 只有当命令的功率上限至少是这个时，AI 才会尝试创建新的突袭。

RAIDS_MIN_SUCCESS_FOR_LAUNCH = 0.65, — The AI will not launch a raid if the chance of success is lower than this.

RAIDS_MIN_SUCCESS_FOR_LAUNCH = 0.65， — 如果成功的机会低于此，AI 不会发起突袭。

RAIDS_CANCEL_AFTER_DAYS_LAUNCHABLE = 60, — If a raid has been launchable for more than <this> days but not been launched (e.g. due to bad success chance), the AI will cancel the raid.

RAIDS_CANCEL_AFTER_DAYS_LAUNCHABLE = 60， — 如果突袭已启动超过<this>几天但未启动（例如，由于成功几率不佳），AI 将取消突袭。

RAIDS_NUKE_TARGET_CUT_OFF = 10, — When AI selects targets for nukes, only pick from the <x> highest-scoring targets.

RAIDS_NUKE_TARGET_CUT_OFF = 10 — 当 AI 为核弹选择目标时，仅从<x>得分最高的目标中进行选择。

RAIDS_UNIT_SCORE_SUCCESS_CHANCE_FACTOR = 500.0, — When AI selects which units to use for raids, multiply the unit success chance modifier with this.

RAIDS_UNIT_SCORE_SUCCESS_CHANCE_FACTOR = 500.0， — 当 AI 选择用于突袭的单位时，将单位成功几率修正乘以此修正。

RAIDS_UNIT_SCORE_DISTANCE_KM_FACTOR = 0.1, — When AI selects which units to use for raids, multiply the km distance with this.

RAIDS_UNIT_SCORE_DISTANCE_KM_FACTOR = 0.1， — 当 AI 选择用于突袭的单位时，将公里距离乘以此值。

RAIDS_AVOID_SAME_TARGET_DURATION_DAYS = 180, — After a raid is finished/canceled, AI is less likely to raid the same target for this time.

RAIDS_AVOID_SAME_TARGET_DURATION_DAYS = 180， — 突袭完成/取消后，AI 在这段时间内不太可能突袭同一目标。

RAIDS_AVOID_SAME_TARGET_FACTOR = 0.4, — If AI has already raided (or tried to raid) a target, score of new raids against same target is factored by this

RAIDS_AVOID_SAME_TARGET_FACTOR = 0.4， — 如果 AI 已经突袭（或试图突袭）一个目标，则针对同一目标的新突袭分数由此计算

},



NFocus = {

NFocus = {

FOCUS_POINT_DAYS = 7,						— Each point takes a week

FOCUS_POINT_DAYS = 7， — 每个点需要一周时间

FOCUS_PROGRESS_PEACE = 1,					— Progress during peace

FOCUS_PROGRESS_PEACE = 1， — 和平时期的进步

FOCUS_PROGRESS_WAR = 1,					— Progress during war

FOCUS_PROGRESS_WAR = 1， — 战争期间的进度

MAX_SAVED_FOCUS_PROGRESS = 10,				— This much progress can be saved while not having a focus selected

MAX_SAVED_FOCUS_PROGRESS = 10， — 可以在未选择焦点的情况下保存此进度

},



NOperatives = {

NOperatives = {

AGENCY_CREATION_DAYS = 30,						— Number of days needed to create an intelligence agency

AGENCY_CREATION_DAYS = 30 — 创建情报机构所需的天数

AGENCY_UPGRADE_DAYS = 30,						— Number of days needed to upgrade an intelligence agency

AGENCY_UPGRADE_DAYS = 30 — 升级情报机构所需的天数

AGENCY_CREATION_FACTORIES = 5,					— Number of factories used to create an intelligence agency

AGENCY_CREATION_FACTORIES = 5， — 用于创建情报机构的工厂数量

AGENCY_AI_BASE_NUM_FACTORIES = 25.0,				— Used by AI to pace the upgrades. Formula : if( AGENCY_AI_BASE_NUM_FACTORIES <= num_civ_factories - num_upgrades * AGENCY_AI_PER_UPGRADE_FACTORIES )

AGENCY_AI_BASE_NUM_FACTORIES = 25.0 — 由 AI 用于调整升级速度。公式 ： if（ AGENCY_AI_BASE_NUM_FACTORIES <= num_civ_factories - num_upgrades * AGENCY_AI_PER_UPGRADE_FACTORIES ）

AGENCY_AI_PER_UPGRADE_FACTORIES = 6.0,			— Used by AI to pace the upgrades. Formula : if( AGENCY_AI_BASE_NUM_FACTORIES <= num_civ_factories - num_upgrades * AGENCY_AI_PER_UPGRADE_FACTORIES )

AGENCY_AI_PER_UPGRADE_FACTORIES = 6.0 — 由 AI 用于调整升级速度。公式 ： if（ AGENCY_AI_BASE_NUM_FACTORIES <= num_civ_factories - num_upgrades * AGENCY_AI_PER_UPGRADE_FACTORIES ）

AGENCY_UPGRADE_PER_OPERATIVE_SLOT = 5,			— Number of upgrade needed to unlock an additional operative slot

AGENCY_UPGRADE_PER_OPERATIVE_SLOT = 5， — 解锁额外作槽所需的升级次数

MAX_OPERATIVE_SLOT_FROM_AGENCY_UPGRADES = 1,	— max operative slots gained from upgrades

MAX_OPERATIVE_SLOT_FROM_AGENCY_UPGRADES = 1， — 升级获得的最大作槽位

AGENCY_OPERATIVE_RECRUITMENT_TIME = 30,			— Number of days to wait to have operative to recruit when an operative slot first becomes available

AGENCY_OPERATIVE_RECRUITMENT_TIME = 30， — 当手术员名额首次可用时，等待招募手术员的天数

BECOME_SPYMASTER_PP_COST = 50,					— Number of political power used to become Spy Master

BECOME_SPYMASTER_PP_COST = 50， — 用于成为间谍大师的政治权力数量

BECOME_SPYMASTER_MIN_UPGRADES = 3,				— Number of agency upgrades you need before becoming Spy Master

BECOME_SPYMASTER_MIN_UPGRADES = 3， — 成为间谍大师之前您需要的代理升级次数

BASE_COUNTER_INTELLIGENCE_RATING = 0.0,					— Base national counter intelligence rating for all countries

BASE_COUNTER_INTELLIGENCE_RATING = 0.0， — 所有国家/地区的基本国家反情报评级

AGENCY_DEFENSE_EFFECT_ON_HOSTILE_ACTION_COST = 0.2,			— Defense factor that is responsible for multiplying the cost hostile actions against our country by its level and this value

AGENCY_DEFENSE_EFFECT_ON_HOSTILE_ACTION_COST = 0.2， — 防御系数，用于将针对我国的敌对行动的成本乘以其水平和该值

INTEL_NETWORK_GAIN_RATE_ON_WRONG_CONTROLLER = -10.0,			— Amount of network strength lost in a state when it does not have the right controller anymore

INTEL_NETWORK_GAIN_RATE_ON_WRONG_CONTROLLER = -10.0， — 当某个状态不再具有正确的控制器时，该状态中网络强度的损失量

INTEL_NETWORK_GAIN_RATE_ON_OUT_OF_RANGE = -1.75,				— Amount of network strength lost in a state that has the right controller but is out of range of any operative

INTEL_NETWORK_GAIN_RATE_ON_OUT_OF_RANGE = -1.75， — 在拥有正确控制器但超出任何作范围的状态下损失的网络强度量

INTEL_NETWORK_GAIN_FROM_ADJACENCY_FACTOR = 0.5,				— Factor multiplied to the sum of the positive difference between a state’s strength and its neighbors’. In other words, how strongly neighbors impact the strength gained in a state. Values greater or equal to 1 are discouraged.

INTEL_NETWORK_GAIN_FROM_ADJACENCY_FACTOR = 0.5， — 系数乘以一个州的实力与其邻国的实力之间的正差之和。换句话说，邻国对在一个州中获得的强度的影响有多大。不建议使用大于或等于 1 的值。

INTEL_NETWORK_GAIN_DECAY_PER_STEP_FACTOR = 0.5,				— Factor multiplied to the gain of the previous node in the netowrk initially contributed by the agent. In other words, before adjacency, the strength gain in a state would be GainFromOperative * ( INTEL_NETWORK_GAIN_DECAY_PER_STEP_FACTOR ^ NodeDepth ) where NodeDepth is the distance between the state and the operative’s location.

INTEL_NETWORK_GAIN_DECAY_PER_STEP_FACTOR = 0.5 — 因子乘以代理最初贡献的网络中前一个节点的增益。换句话说，在邻接之前，状态中的强度增益将为 GainFromOperative * （ INTEL_NETWORK_GAIN_DECAY_PER_STEP_FACTOR ^ NodeDepth ），其中 NodeDepth 是状态与作人员位置之间的距离。

INTEL_NETWORK_STRENGTH_TARGET_OFFSET_PER_OPERATIVE = 15.0,		— The amount of strength each operative on build intel network mission in a sub network add to the base target network strength

INTEL_NETWORK_STRENGTH_TARGET_OFFSET_PER_OPERATIVE = 15.0， — 每个特工在子网络中构建情报网络任务时增加的基本目标网络强度

INTEL_NETWORK_STRENGTH_DECAY_WHEN_ABOVE_TARGET = -2.5,			— The amount of strength removed each tick from a state that has more strength than the target

INTEL_NETWORK_STRENGTH_DECAY_WHEN_ABOVE_TARGET = -2.5， — 从强度高于目标的状态中移除每个刻的强度

INTEL_NETWORK_BASE_STRENGTH_TARGET_COUNTERINTELLIGENCE_FACTOR = -10.0,	— BaseStrengthTarget = Factor * CounterIntelligenceRating + Offset

INTEL_NETWORK_BASE_STRENGTH_TARGET_COUNTERINTELLIGENCE_FACTOR = -10.0， — BaseStrengthTarget = 因子 * CounterIntelligenceRating + 偏移量

INTEL_NETWORK_BASE_STRENGTH_TARGET_COUNTERINTELLIGENCE_OFFSET = 90,	— Offset mentioned above

INTEL_NETWORK_BASE_STRENGTH_TARGET_COUNTERINTELLIGENCE_OFFSET = 90， — 上述偏移量

INTEL_NETWORK_MIN_VP_TO_TARGET = 15,					— The minimum value of the highest VP in a state to consider the state as a valid target to start building an intel network

INTEL_NETWORK_MIN_VP_TO_TARGET = 15 — 将该州视为开始构建 Intel 网络的有效目标的州中最高 VP 的最小值

INTEL_NETWORK_MIN_STRENGTH_TO_TARGET = 101.0,				— The minimum value of the intel network in a state to consider it a valid target to deploy an operative in

INTEL_NETWORK_MIN_STRENGTH_TO_TARGET = 101.0， — 情报网络处于某种状态的最小值，以将其视为部署作员的有效目标

INTEL_NETWORK_MIN_STRENGTH_TO_LINK_SUBNETWORKS = 0.0,			— Where the influence of two operative meet, the two nodes on each side have to have strictly more than the given strength before the two operatives have a chance of being considered in the same network

INTEL_NETWORK_MIN_STRENGTH_TO_LINK_SUBNETWORKS = 0.0， — 当两个作者的影响相遇时，每侧的两个节点必须严格大于给定的强度，然后两个作者才有机会被考虑在同一网络中

INTEL_NETWORK_OPERATIVE_GAIN_STACKING_FACTOR = 0.5,			— When multiple operative are present in the same location, this factor is applied for each operative with a lower gain than the max. So if operatives have the gain [ 3, 1, 2 ] in the same location, it is sorted to [ 1, 2, 3 ] then converted to [ 1*D^2, 2*D^1, 3 ], with D being this define, so if D=0.5 we have [ 0.25, 1, 3 ] and the final gain from operative at this location will be 4.25. Putting this define to 0 is equivalent to considering the maximum value only.

INTEL_NETWORK_OPERATIVE_GAIN_STACKING_FACTOR = 0.5 — 当多个作器位于同一位置时，此因子适用于增益低于最大值的每个作器。因此，如果作人员在同一位置有增益 [ 3， 1， 2 ]，则将其排序为 [ 1， 2， 3 ]，然后转换为 [ 1*D^2， 2*D^1， 3 ]，其中 D 是这个定义，所以如果 D=0.5，我们有 [ 0.25， 1， 3 ] ，并且该位置的作者的最终增益将为 4.25。将此定义设置为 0 等效于仅考虑最大值。

INTEL_NETWORK_MIN_STRENGTH_FOR_STATE_TO_COUNT_TOWARD_NATIONAL_COVERAGE = 0.0,	— Amount of strength (0, 100) in a state required for it to count toward the national coverage

INTEL_NETWORK_MIN_STRENGTH_FOR_STATE_TO_COUNT_TOWARD_NATIONAL_COVERAGE = 0.0， — 在某个州计入全国覆盖率所需的强度 （0， 100）

INTEL_NETWORK_NATIONAL_COVERAGE_CONTROLLED_STATES_WEIGHT = 0.2,		— Weight (expected [0,1]) multiplied by the number of states covered by the network that are controlled by the target over the total number of states the target controls

INTEL_NETWORK_NATIONAL_COVERAGE_CONTROLLED_STATES_WEIGHT = 0.2 — 权重（预期为 [0,1]）乘以网络覆盖的、由目标控制的状态数与目标控制的状态总数

INTEL_NETWORK_NATIONAL_COVERAGE_CORE_STATES_WEIGHT = 0.6,			— Weight (expected [0,1]) multiplied by the number of states covered by the network that are core to the target over the total number of states the target has for core

INTEL_NETWORK_NATIONAL_COVERAGE_CORE_STATES_WEIGHT = 0.6， — 权重（预期为 [0,1]）乘以网络覆盖的、目标核心状态数乘以目标核心状态总数

INTEL_NETWORK_NATIONAL_COVERAGE_OWNED_WORTH_WEIGHT = 0.2,		— Weight (expected [0,1]) multiplied by the value of victory points covered by the network over the total value of victory points controlled by the targets

INTEL_NETWORK_NATIONAL_COVERAGE_OWNED_WORTH_WEIGHT = 0.2， — 权重（预期为 [0,1]）乘以网络覆盖的胜利点值乘以目标控制的胜利点总值

INTEL_NETWORK_OCCUPIED_TAG_STATES_WEIGHT = 0.5,				— Weight (expected [0,1]) multiplied to the fraction of number of state covered by the intel network divided by the number of states occupied by the target of the network, per occupied tag

INTEL_NETWORK_OCCUPIED_TAG_STATES_WEIGHT = 0.5， — 权重（预期为 [0,1]）乘以英特尔网络覆盖的状态数除以网络目标占用的状态数（每个占用的标签）的分数

INTEL_NETWORK_OCCUPIED_TAG_WORTH_WEIGHT = 0.5,				— Weight (expected [0,1]) multiplied to the fraction of victory points worth of states covered by the intel network divided by the worth of states occupied by the target of the network, per occupied tag

INTEL_NETWORK_OCCUPIED_TAG_WORTH_WEIGHT = 0.5， — 权重（预期为 [0,1]）乘以英特尔网络覆盖的状态的胜利点数除以网络目标所占用的状态值（每个被占用的标签）

INTEL_NETWORK_MIN_SUB_NETWORK_SIZE_FOR_DETECTION = 0,			— minimum number of state of a sub-intel network before an operative on build intel network mission in this network can be detected

INTEL_NETWORK_MIN_SUB_NETWORK_SIZE_FOR_DETECTION = 0， — 在检测到该网络中的 Build Intel Network 任务中的作员之前，子 Intel 网络的最小状态数

INTEL_NETWORK_MIN_NATIONAL_COVERAGE_FOR_DETECTION = 0.02,		— [0, 1] minimum national coverage required for an operative on build intel network to have a chance to be discovered

INTEL_NETWORK_MIN_NATIONAL_COVERAGE_FOR_DETECTION = 0.02， — [0， 1] Build Intel Network 上的特工有机会被发现所需的最低全国覆盖率

INTEL_NETWORK_MIN_SUB_NETWORK_NATIONAL_COVERAGE_FOR_DETECTION = 0.01,	— [0, 1] minimum national coverage of the network the operative on build intel network is in to have a chance to be discovered

INTEL_NETWORK_MIN_SUB_NETWORK_NATIONAL_COVERAGE_FOR_DETECTION = 0.01， — [0， 1] Build Intel Network 上的特工所在的网络的最小全国覆盖率才有机会被发现

INTEL_NETWORK_MIN_SUB_NETWORK_STRENGTH_FOR_DETECTION = 10.0,		— [0, 100] minimum network strength of the network the operative on build intel network mission is in to have a chance to be discovered

INTEL_NETWORK_MIN_SUB_NETWORK_STRENGTH_FOR_DETECTION = 10.0， — [0， 100] 执行 Build Intel Network 任务的特工有机会被发现的网络的最小网络强度



INTEL_NETWORK_INTELLIGENCE_AGENCY_DEFENSE_TO_DETECTION_FACTOR = 2.0,	— multiplied to the intelligence agency defense of the target of the intel network

INTEL_NETWORK_INTELLIGENCE_AGENCY_DEFENSE_TO_DETECTION_FACTOR = 2.0 — 乘以情报机构对情报网络目标的防御

INTEL_NETWORK_INTELLIGENCE_AGENCY_DEFENSE_DETECTION_SCALE_FACTOR = 0.0,	— factor multiplied to the intelligence agency defense of the target of the intel network before being factored to the detection chance

INTEL_NETWORK_INTELLIGENCE_AGENCY_DEFENSE_DETECTION_SCALE_FACTOR = 0.0 — 系数乘以情报机构对情报网络目标的防御，然后再计入检测率

INTEL_NETWORK_MAX_INTELLIGENCE_AGENCY_DEFENSE_DETECTION_SCALE_FACTOR = 1.0,	— clamp the value from the multiplication of the above factor (expect a value greater or equal to 1)

INTEL_NETWORK_MAX_INTELLIGENCE_AGENCY_DEFENSE_DETECTION_SCALE_FACTOR = 1.0， — 从上述因子的乘积中固定值 （期望值大于或等于 1）

INTEL_NETWORK_NATIONAL_COVERAGE_TO_DETECTION_CHANCE_FACTOR = 1.0,	— multiplied to the national coverage (a value in range [0, 1]

INTEL_NETWORK_NATIONAL_COVERAGE_TO_DETECTION_CHANCE_FACTOR = 1.0， — 乘以全国覆盖率（范围 [0， 1] 中的值）

INTEL_NETWORK_SUB_NETWORK_STRENGTH_TO_DETECTION_CHANCE_FACTOR = 0.1,	— multiplied to the network strength (a value in range [0, 100]

INTEL_NETWORK_SUB_NETWORK_STRENGTH_TO_DETECTION_CHANCE_FACTOR = 0.1 — 乘以网络强度（范围 [0， 100] 中的值）

INTEL_NETWORK_SUB_NETWORK_NATIONAL_COVERAGE_TO_DETECTION_CHANCE_FACTOR = 3.0,	— multiplied to the contribution to the national coverage of the sub network (a value in range [0, 1])

INTEL_NETWORK_SUB_NETWORK_NATIONAL_COVERAGE_TO_DETECTION_CHANCE_FACTOR = 3.0， — 乘以对子网络全国覆盖的贡献（范围 [0， 1] 中的值）

INTEL_NETWORK_DETECTION_GLOBAL_FACTOR = 0.01,				— global factor multiplied to the detection chance before it is multiplied a dice roll in the range [0,1000)

INTEL_NETWORK_DETECTION_GLOBAL_FACTOR = 0.01， — 全局因子乘以检测几率，然后乘以 [0,1000] 范围内的掷骰子

BUILD_INTEL_NETWORK_DAILY_XP_GAIN = 1,

BUILD_INTEL_NETWORK_DAILY_XP_GAIN = 1，

QUIET_INTEL_NETWORK_DAILY_XP_GAIN = 0,

QUIET_INTEL_NETWORK_DAILY_XP_GAIN = 0，

OPERATIVE_MISSION_DETECTION_CHANCE_FACTOR = {

OPERATIVE_MISSION_DETECTION_CHANCE_FACTOR = {

— Factor multiplied to the detection chance of an agent on mission before the offsets

— 系数乘以偏移量之前执行任务的代理的检测率

0.0, — NoMission

0.0， — 不任务

1.0, — BuildIntelNetwork

1.0， — BuildIntelNetwork

1.0, — QuietIntelNetwork

1.0， — QuietIntelNetwork

1.0, — CounterIntelligence

1.0， — 反间谍

0.0, — RootOutResistance

0.0， — RootOutResistance

3.0, — BoostIdeology

3.0， — BoostIdeology

0.1, — ControlTrade

0.1， — ControlTrade

0.1, — DiplomaticPressure

0.1， — 外交压力





3.0, — Propaganda


3.0， — 宣传


},



— used for calculating how many operatives will a spy master gain from its faction members

— 用于计算间谍大师将从其派系成员那里获得多少特工

— first number in every now is number of operatives gained

— 现在的第一个数字是获得的特工数量

— second number is total factory needed (mil and civ) for giving previous ratio

— 第二个数字是给出前一个比率所需的工厂总量（mil 和 civ）

OPERATIVE_SLOTS_FROM_FACTION_MEMBERS_FOR_SPY_MASTER = {

OPERATIVE_SLOTS_FROM_FACTION_MEMBERS_FOR_SPY_MASTER = {

0.0, 	0.0, — 0 operative for [0, 10)

0.0， 0.0， — 0 对 [0， 10] 有效

0.25, 	10.0, — 0.25 operative for [10, 50)

0.25， 10.0， — 0.25 [10， 50] 有效

0.5, 	50.0, — 0.5 operative for >= 50

0.5、50.0、— 0.5作 >= 50

},



INTEL_NETWORK_STATE_MODIFIER_STRENGTH_THRESHOLD = 10,			— Minimum amount of strength required in a state for the intel network related modifiers to start being applied

INTEL_NETWORK_STATE_MODIFIER_STRENGTH_THRESHOLD = 10， — 在某个状态下开始应用 intel 网络相关修饰符所需的最小强度



INTEL_NETWORK_MIN_DEFAULT_FOR_SHOWING = 25, — default min level for networks used to filter operation requirements if not overriden

INTEL_NETWORK_MIN_DEFAULT_FOR_SHOWING = 25， — 用于筛选作要求的网络的默认最小级别（如果未覆盖）



OPERATIVE_BASE_INTEL_NETWORK_GAIN = 0.4,				— Base amount of network strength gain per day provided by an operative

OPERATIVE_BASE_INTEL_NETWORK_GAIN = 0.4， —作员每天提供的网络强度增益的基准量

OPERATIVE_MAX_INTEL_NETWORK_GAIN = -1.0,				— Max amount of network strength gain per day provided by an operative after modifiers have been applied (negative value means no max)

OPERATIVE_MAX_INTEL_NETWORK_GAIN = -1.0， — 应用修正后，特工每天提供的最大网络强度增益量（负值表示没有最大值）

COUNTER_INTELLIGENCE_FOREIGN_AGENT_FACTOR = 0.0,			— Multiplier to the counter intelligence provided by foreign (ally) operatives

COUNTER_INTELLIGENCE_FOREIGN_AGENT_FACTOR = 0.0， — 外国（盟友）特工提供的反情报的乘数

COUNTER_INTELLIGENCE_STACKING_FACTOR = 0.5,				— Multiplier applied to each operative after the first one. So if we have the following counter intelligence rating values [ 0.1, 0.3, 0.2 ], the factor is applied twice for the lowest value and once for the 2nd lowest one as such : [ 0.3, 0.2 D, 0.1 D * D ] and then the result is summed up to give the final rating value

COUNTER_INTELLIGENCE_STACKING_FACTOR = 0.5， — 在第一个作之后应用于每个作的乘数。因此，如果我们有以下反智力评级值 [ 0.1， 0.3， 0.2 ]，则该因子对最低值应用两次，对第二个最低值应用一次，例如：[ 0.3， 0.2 D， 0.1 D * D ]，然后将结果相加以给出最终的评级值

COUNTER_INTELLIGENCE_TO_DEFENSE_LOG_FACTOR = 0.0,			— Defense = LogFactor * log( 1 + CounterIntelligence ) + CounterIntelligence / Divisor

COUNTER_INTELLIGENCE_TO_DEFENSE_LOG_FACTOR = 0.0， — 防御 = 对数因子 * log（ 1 + 反情报 ） + 反情报 / 除数

COUNTER_INTELLIGENCE_TO_DEFENSE_DIVISOR = 1.0,				— see above

COUNTER_INTELLIGENCE_TO_DEFENSE_DIVISOR = 1.0， — 见上文

COUNTER_INTELLIGENCE_DAILY_XP_GAIN = 0.112,

COUNTER_INTELLIGENCE_DAILY_XP_GAIN = 0.112，

BOOST_IDEOLOGY_NATIONAL_COVERAGE_FACTOR = 1.0,				— used to compute the drift factor as follow: BASE SUB_NETWORK_NC BOOST_IDEOLOGY_DEFENSE_FACTOR

BOOST_IDEOLOGY_NATIONAL_COVERAGE_FACTOR = 1.0， — 用于计算漂移因子，如下所示：基数 SUB_NETWORK_NC BOOST_IDEOLOGY_DEFENSE_FACTOR

BOOST_IDEOLOGY_MAX_DRIFT_BY_OPERATIVE = 0.25,				— the maximum drift an operative can cause, a negative value means no maximum

BOOST_IDEOLOGY_MAX_DRIFT_BY_OPERATIVE = 0.25， — 手术器可能导致的最大漂移，负值表示没有最大值

BOOST_IDEOLOGY_DRIFT_STACKING_FACTOR = 0.5,				— multiplied to the drift of an operative for each operative after the first one, with the greatest drift. So if we have the following drift values [ 0.1, 0.3, 0.2 ], the factor is applied twice for the lowest value and once for the 2nd lowest one as such : [ 0.3, 0.2 D, 0.1 D * D ] and then the result is summed up to give the final drift value.

BOOST_IDEOLOGY_DRIFT_STACKING_FACTOR = 0.5， — 乘以第一个作器之后每个作器的漂移，漂移最大。因此，如果我们有以下漂移值 [ 0.1， 0.3， 0.2 ]，则该因子对最低值应用两次，对第二个最低值应用一次，例如：[ 0.3， 0.2 D， 0.1 D * D ]，然后将结果相加以给出最终的漂移值。

BOOST_IDEOLOGY_DEFENSE_FACTOR = 0.2,					— multiplied to the target’s defense to get the amount of drift to remove from each operative’s drift

BOOST_IDEOLOGY_DEFENSE_FACTOR = 0.2， — 乘以目标的防御，得到每个特工的漂移中要消除的漂移量

BOOST_IDEOLOGY_DAILY_XP_GAIN = 0.274,

BOOST_IDEOLOGY_DAILY_XP_GAIN = 0.274，

OPERATIVE_BASE_INTEL_AGENCY_DEFENSE = 1.0,				— Base amount of intel agency defense contributed by an operative on counter_intelligence mission

OPERATIVE_BASE_INTEL_AGENCY_DEFENSE = 1.0， — 执行counter_intelligence任务的特工贡献的情报机构防御基础量

OPERATIVE_BASE_BOOST_IDEOLOGY = 0.1,					— Base amount of daily ideology drift provoked by an operative

OPERATIVE_BASE_BOOST_IDEOLOGY = 0.1， — 特工引发的日常意识形态漂移的基数

OPERATIVE_BASE_PROPAGANDA_POWER = 0.0005,					— Base amount of daily war support and stability change when an operative is assigned to propaganda

OPERATIVE_BASE_PROPAGANDA_POWER = 0.0005， — 当特工被分配到宣传时，每日战争支持和稳定度的基础数量会发生变化

PROPAGANDA_SUB_NETWORK_STRENGTH_FACTOR = 1.0,				— Multiplied to the network strength before being multiplied to the Stability/WarSupport drift caused by an operative

PROPAGANDA_SUB_NETWORK_STRENGTH_FACTOR = 1.0， — 乘以网络强度，再乘以特工造成的 Stability/WarSupport 漂移

PROPAGANDA_DEFENSE_FACTOR = 0.01,					— Multiplied to the target’s defense before being subtracted from the Stability/WarSupport drift caused by an operative

PROPAGANDA_DEFENSE_FACTOR = 0.01， — 乘以目标的防御力，再减去特工造成的稳定度/战争支援漂移

PROPAGANDA_OPERATIVE_STACKING_FACTOR = 0.5,				— Multiplied to the Stability/WarSupport drift values of each operative after the one with the greatest values. The process is done separatly for Stability and WarSupport

PROPAGANDA_OPERATIVE_STACKING_FACTOR = 0.5， — 乘以每个作的 Stability/WarSupport 漂移值，在值最大的作之后。这个过程是分开完成的，用于 Stability 和 WarSupport

PROPAGANDA_COUNTRY_STACKING_FACTOR = 0.5,				— Multiplied to the Stability/WarSupport drift values of each country after the one with the greatest values. The process is done separatly for Stability and WarSupport

PROPAGANDA_COUNTRY_STACKING_FACTOR = 0.5 — 乘以每个国家/地区的 Stability/WarSupport 漂移值，该值最大之后。这个过程是分开完成的，用于 Stability 和 WarSupport

PROPAGANDA_DAILY_XP_GAIN = 0.350,

PROPAGANDA_DAILY_XP_GAIN = 0.350，

OPERATIVE_BASE_ROOT_OUT_RESISTANCE_EFFICIENCY = 1.0,			— The base efficiency of an operative at the RootOutResistance mission (this is a percentage, 1.0 == 100%)

OPERATIVE_BASE_ROOT_OUT_RESISTANCE_EFFICIENCY = 1.0， — RootOutResistance 任务中特工的基础效率（这是一个百分比，1.0 == 100%）

ROOT_OUT_RESISTANCE_STACKING_FACTOR = 0.5,				— Multiplied to each operative efficiency after the first one

ROOT_OUT_RESISTANCE_STACKING_FACTOR = 0.5， — 乘以第一个手术效率之后的每个手术效率

ROOT_OUT_RESISTANCE_RANGE_STEP_FACTOR = 0.5,				— Multiplied to the summed up efficiency from all operative operating in a same state to determine the efficiency in neighboring states

ROOT_OUT_RESISTANCE_RANGE_STEP_FACTOR = 0.5， — 乘以在同一状态下运行的所有作者的总效率，以确定相邻状态的效率

ROOT_OUT_RESISTANCE_DAILY_XP_GAIN = 0.068,

ROOT_OUT_RESISTANCE_DAILY_XP_GAIN = 0.068，

OPERATIVE_BASE_CONTROL_TRADE_DRIFT = 0.5,				— The base daily drift in trade influence caused by an operative

OPERATIVE_BASE_CONTROL_TRADE_DRIFT = 0.5， — 由作人员引起的贸易影响力的基准每日漂移

CONTROL_TRADE_STACKING_FACTOR = 0.5,					— Multiplied to the drift of each operative after the first one

CONTROL_TRADE_STACKING_FACTOR = 0.5， — 乘以第一个作后每个作的漂移

CONTROL_TRADE_MAX_INFLUENCE = 50.0,					— The maximum amount of trade influence that can be gained through the control trade mission

CONTROL_TRADE_MAX_INFLUENCE = 50.0， — 通过控制贸易任务可以获得的最大贸易影响力

CONTROL_TRADE_INFLUENCE_DAILY_DECAY = 0.1,				— The amount of trade influence lost when no operative are assigned to the mission

CONTROL_TRADE_INFLUENCE_DAILY_DECAY = 0.1， — 当没有特工被分配到任务时，贸易影响力的损失量

CONTROL_TRADE_DAILY_XP_GAIN = 0.137,

CONTROL_TRADE_DAILY_XP_GAIN = 0.137，

OPERATIVE_BASE_DIPLOMATIC_PRESSURE_AI_ACCEPTANCE_SCORE_DRIFT = 0.4,	— The daily change in the amount of opinion requiered to join a faction

OPERATIVE_BASE_DIPLOMATIC_PRESSURE_AI_ACCEPTANCE_SCORE_DRIFT = 0.4， — 加入派系所需的意见量的每日变化

OPERATIVE_BASE_DIPLOMATIC_PRESSURE_TENSION_REQUIREMENTS_DRIFT = 0.001,	— The daily change in world tension requiered to join a faction

OPERATIVE_BASE_DIPLOMATIC_PRESSURE_TENSION_REQUIREMENTS_DRIFT = 0.001， — 加入派系所需的世界紧张局势的每日变化

DIPLOMATIC_PRESSURE_MAX_AI_ACCEPTANCE_SCORE_INCREASE = 20.0,	— the maximum amount of ai acceptance score from diplomatic pressure

DIPLOMATIC_PRESSURE_MAX_AI_ACCEPTANCE_SCORE_INCREASE = 20.0， — 来自外交压力的 AI 接受分数的最高金额

DIPLOMATIC_PRESSURE_MAX_TENSION_REQUIREMENTS_DECREASE = 0.20,	— amount of tension (tensions is in range [0,1]) that can be removed from the requirements imposed by the modifier join_faction_tension_limit

DIPLOMATIC_PRESSURE_MAX_TENSION_REQUIREMENTS_DECREASE = 0.20， — 可以从修饰符 join_faction_tension_limit 的要求中删除的张力量（张力在 [0,1] 范围内）

DIPLOMATIC_PRESSURE_OPERATIVE_STACKING_FACTOR = 0.5,		— The diminishing return factor to apply to operative working for the same faction after the first one. Operatives operating for a same faction are ranked by their efficiency and their opinion and tension drift are individually applyied a stacking factor like so: DRIFT * STACKING_FACTOR^RANK where RANK is a value from 0 to the number of operative -1 where the opperative with the highest drift value has rank 0

DIPLOMATIC_PRESSURE_OPERATIVE_STACKING_FACTOR = 0.5， — 在第一个派系之后为同一派系工作的特工的递减回报因子。为同一派系工作的特工按他们的效率进行排名，他们的好感度和紧张度漂移分别应用一个堆叠因子，如下所示：DRIFT * STACKING_FACTOR^RANK，其中 RANK 是从 0 到特工人数 -1 的值，其中具有最高漂移值的作者的等级为 0

DIPLOMATIC_PRESSURE_AI_ACCEPTANCE_SCORE_DECAY = 0.4,			— daily decay when the mission is not active

DIPLOMATIC_PRESSURE_AI_ACCEPTANCE_SCORE_DECAY = 0.4， — 任务未激活时的每日衰减

DIPLOMATIC_PRESSURE_TENSION_REQUIREMENTS_DECAY = 0.001,			—

DIPLOMATIC_PRESSURE_TENSION_REQUIREMENTS_DECAY = 0.001， —

DIPLOMATIC_PRESSURE_DAILY_XP_GAIN = 0.137,

DIPLOMATIC_PRESSURE_DAILY_XP_GAIN = 0.137，

MIN_NATIONAL_COVERAGE_FOR_BOOST_IDEOLOGY = 0.01,			— Minimum network coverage required to start the mission (the code ensures that a network exists at all)

MIN_NATIONAL_COVERAGE_FOR_BOOST_IDEOLOGY = 0.01， — 启动任务所需的最小网络覆盖（代码确保网络完全存在）

MIN_NATIONAL_COVERAGE_FOR_PROPAGANDA = 0.01,			— Minimum network coverage required to start the mission (the code ensures that a network exists at all)

MIN_NATIONAL_COVERAGE_FOR_PROPAGANDA = 0.01， — 启动任务所需的最小网络覆盖范围（代码确保网络完全存在）

OPERATIVE_MIN_DAYS_HARMED = 30,						— Minimum number of days an operative can be harmed. Applied after modifiers. Can be zero.

OPERATIVE_MIN_DAYS_HARMED = 30， — 特工可能受到伤害的最短天数。在 modifiers 之后应用。可以是零。

OPERATIVE_MAX_DAYS_HARMED = 120,						— Maximum number of days an operative can be harmed. Applied after modifiers. Is ignored if negative

OPERATIVE_MAX_DAYS_HARMED = 120， — 特工可能受到伤害的最大天数。在 modifiers 之后应用。如果为负数，则忽略

OPERATIVE_MIN_DAYS_FORCED_INTO_HIDING = 7,				— Minimum number of days an operative can be forced into hiding. Applied after modifiers. Can be zero.

OPERATIVE_MIN_DAYS_FORCED_INTO_HIDING = 7， — 特工可以被迫躲藏的最短天数。在 modifiers 之后应用。可以是零。

OPERATIVE_MAX_DAYS_FORCED_INTO_HIDING = 120,				— Maximum number of days an operative can be forced into hiding. Applied after modifiers. Is ignored if negative

OPERATIVE_MAX_DAYS_FORCED_INTO_HIDING = 120， — 特工可以被迫躲藏的最大天数。在 modifiers 之后应用。如果为负数，则忽略

OPERATIVE_MAX_DAYS_TO_AUTO_RESUME_MISSION = 30,				— Maximum number of days an operative has to be disabled before its mission is not automatically resumed once he is available again

OPERATIVE_MAX_DAYS_TO_AUTO_RESUME_MISSION = 30， —作员在再次可用后不会自动恢复其任务之前必须禁用的最大天数

MAX_RECRUITED_OPERATIVES = 10,

MAX_RECRUITED_OPERATIVES = 10，



CRYPTO_BASE_CRYPTO_LEVEL = 12000,						— base crypto strength for a country

CRYPTO_BASE_CRYPTO_LEVEL = 12000， — 一个国家/地区的基本加密货币实力

CRYPTO_CRYPTO_LEVEL_PER_CRYPTO_UPGRADE = 4250,			— crypto strength per crypto upgrade

CRYPTO_CRYPTO_LEVEL_PER_CRYPTO_UPGRADE = 4250， — 每次加密升级的加密强度



CRYPTO_CRYPTO_ACTIVE_BONUS_DURATION = 30,				— number of days the active decryption bonuses will be applied before enemy resets their intelligence

CRYPTO_CRYPTO_ACTIVE_BONUS_DURATION = 30， — 在敌人重置其智力之前应用有效解密加成的天数

CYRPTO_ACTIVE_BONUS_ACTIVATION_PROGRESS_RATIO = 0.5,	— once bonus is activated, decryption progress will be reduced to this ratio

CYRPTO_ACTIVE_BONUS_ACTIVATION_PROGRESS_RATIO = 0.5， — 一旦激活奖励，解密进度将减少到此比例



OPERATION_AI_MINIMUM_SCORE = 10.0,						— Once an operation’s AI weight falls below the minimum score it will be scrapped if it is being prepared

OPERATION_AI_MINIMUM_SCORE = 10.0 — 一旦作的 AI 权重低于最低分数，如果正在准备中，它将被取消

OPERATION_COMPLETION_XP = 18,

OPERATION_COMPLETION_XP = 18，



OPERATIVE_CAPTURE_DURATION_IN_DAYS = 9*30,

OPERATIVE_CAPTURE_DURATION_IN_DAYS = 9*30，



— operation cost & time are increased by default this ratios for each

— 运营成本和时间默认增加，每个

— instance of operation that were already executed against same target.

— 已针对同一目标执行的作实例。

— can be overridden using time_multiplier & cost_multiplier in operation.

— 可以在作中使用 time_multiplier & cost_multiplier 进行覆盖。

DEFAULT_OPERATION_COST_MULTIPLIER = 0.15,

DEFAULT_OPERATION_COST_MULTIPLIER = 0.15，

DEFAULT_OPERATION_TIME_MULTIPLIER = 0.0,

DEFAULT_OPERATION_TIME_MULTIPLIER = 0.0，



— The following defines are multiplied to the number of operatives operating in the target country the activity level is computed for

— 以下定义乘以在计算活动水平的目标国家/地区运营的作员数量

BUILD_INTEL_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10,

BUILD_INTEL_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10，

BOOST_IDEOLOGY_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10,

BOOST_IDEOLOGY_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10，

PROPAGANDA_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10,

PROPAGANDA_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 10，

CONTROL_TRADE_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 1,

CONTROL_TRADE_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 1，

DIPLOMATIC_PRESSURE_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 1,

DIPLOMATIC_PRESSURE_NETWORK_MISSION_ACTIVITY_INDICATOR_FACTOR = 1，



— multiplied to the sum of the network coverage [0,1] all countries have over the target

— 乘以所有国家/地区在目标范围内的网络覆盖范围之和 [0,1]

INTEL_NETWORK_COVERAGE_ACTIVITY_FACTOR = 100,

INTEL_NETWORK_COVERAGE_ACTIVITY_FACTOR = 100，



— multiplied to the strength [0,100] of the strongest network over that country

— 乘以该国最强网络的强度 [0,100]

INTEL_NETWORK_STRENGTH_DANGER_FACTOR = 1,

INTEL_NETWORK_STRENGTH_DANGER_FACTOR = 1，



— Activity level PID values

— 活动级别 PID 值

ACTIVITY_LEVEL_PROPORTIONAL_FACTOR = 0.01,

ACTIVITY_LEVEL_PROPORTIONAL_FACTOR = 0.01，

ACTIVITY_LEVEL_INTEGRAL_FACTOR = 0.001,

ACTIVITY_LEVEL_INTEGRAL_FACTOR = 0.001，

ACTIVITY_LEVEL_DERIVATIVE_FACTOR = 0,

ACTIVITY_LEVEL_DERIVATIVE_FACTOR = 0，



— Danger level PID values

— 危险级别 PID 值

DANGER_LEVEL_PROPORTIONAL_FACTOR = 0.01,

DANGER_LEVEL_PROPORTIONAL_FACTOR = 0.01，

DANGER_LEVEL_INTEGRAL_FACTOR = 0.001,

DANGER_LEVEL_INTEGRAL_FACTOR = 0.001，

DANGER_LEVEL_DERIVATIVE_FACTOR = 0,

DANGER_LEVEL_DERIVATIVE_FACTOR = 0，



NUM_DAYS_BEFORE_REMOVING_PREPARED_OPERATIONS = 60, — num days before removing prepared operations

NUM_DAYS_BEFORE_REMOVING_PREPARED_OPERATIONS = 60， — 删除准备好的作之前的天数



ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_XP_GAIN = 100,					— Xp gain when an enemy operative is captured in the country the operative is assigned to counter intelligence to. Apply to a single randomly selected operative

ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_XP_GAIN = 100， — 当敌方特工在特工被指派反击情报的国家被俘虏时，XP 获取。应用于单个随机选择的手术人员

ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_WEIGHT_OWN_COUNTRY_FOR_XP = 2,			— An integer on how likely an operative operating in his own country is to get selected for the xp reward on enemy operative capture

ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_WEIGHT_OWN_COUNTRY_FOR_XP = 2， — 一个整数，表示在自己国家/地区活动的特工在被俘虏时被选中获得 XP 奖励的可能性

ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_WEIGHT_DIFFERENT_COUNTRY_FOR_XP = 1,		— same for an operative assigned to counter intelligence in a different country than his own

ON_CAPTURE_COUNTERINTELLIGENCE_OPERATIVE_WEIGHT_DIFFERENT_COUNTRY_FOR_XP = 1 — 对于被指派在与本国不同国家/地区进行反情报的特工也是如此



— risk and outcome texts. each number array should match its labels in size, but its ok to have different amount of risk levels than outcomes

— 风险和结果文本。每个数字数组的大小都应该与其标签相匹配，但风险级别的数量与结果不同是可以的

RISK_LEVELS = { 0.1, 0.2, 0.3 }, — each risk level comes with a label to display for operations if it goes abve that number. If below the first it will isntead show the good outcomes

RISK_LEVELS = { 0.1， 0.2， 0.3 }， — 每个风险级别都有一个标签，如果超过该数字，则会显示用于作。如果低于第一个，则不会显示良好的结果

RISK_LEVELS_LABELS = { “RISK_LOW”, “RISK_MID”, “RISK_HIGH” },

RISK_LEVELS_LABELS = { “RISK_LOW”， “RISK_MID”， “RISK_HIGH” }，

OUTCOME_LEVELS = { 0.0, 0.2, 0.3 }, — outcome levels are shown if risk is below its first entry instead

OUTCOME_LEVELS = { 0.0， 0.2， 0.3 }， — 如果风险低于其第一次入场，则显示结果水平

OUTCOME_LEVELS_LABELS = { “OUTCOME_BASE”, “OUTCOME_GOOD”, “OUTCOME_VGOOD” },

OUTCOME_LEVELS_LABELS = { “OUTCOME_BASE”， “OUTCOME_GOOD”， “OUTCOME_VGOOD” }，



TECH_STEAL_EQUIPMENT_FACTOR = 4,

TECH_STEAL_EQUIPMENT_FACTOR = 4，

TECH_STEAL_YEAR_FACTOR = 4,

TECH_STEAL_YEAR_FACTOR = 4，

},



NIntel = {

电话 = {

COUNTRY_LEVEL_INTEL_MAXIMUMS = {			— The maximum intel a country can have over another

COUNTRY_LEVEL_INTEL_MAXIMUMS = { — 一个国家/地区相对于另一个国家/地区可以拥有的最大情报

100.0, — Civilian

100.0， — 民用

100.0, — Army

100.0， — 陆军

100.0, — Navy

100.0， — 海军





100.0, — Airforce


100.0， — 空军


},



— Static sources:

— 静态源：

—

— A static source is a source that will fully decay once its origin disappear.

— 静态源是指一旦源消失就会完全衰减的源。

— (e.g. radar destroyed)

— （例如，雷达被摧毁）

—

— MAXIMUMS:

— 最大值：

— if set to an non-empty arrays, overrides COUNTRY_LEVEL_INTEL_MAXIMUMS

— 如果设置为非空数组，则覆盖 COUNTRY_LEVEL_INTEL_MAXIMUMS

— for this specific source (note that COUNTRY_LEVEL_INTEL_MAXIMUMS is

— 对于此特定源（请注意，COUNTRY_LEVEL_INTEL_MAXIMUMS是

— applied after INTEL_SOURCE_XXX_MAXIMUMS)

— 在 INTEL_SOURCE_XXX_MAXIMUMS 后应用）



STATIC_INTEL_SOURCE_OPERATION_TOKENS_MAXIMUMS = {},

STATIC_INTEL_SOURCE_OPERATION_TOKENS_MAXIMUMS = {}，

STATIC_INTEL_SOURCE_BROKEN_CYPHER_MAXIMUMS = { 60.0, 60.0, 60.0, 60.0 },

STATIC_INTEL_SOURCE_BROKEN_CYPHER_MAXIMUMS = { 60.0， 60.0， 60.0， 60.0 }，

STATIC_INTEL_SOURCE_RADAR_MAXIMUMS = { 10.0, 10.0, 20.0, 20.0 },

STATIC_INTEL_SOURCE_RADAR_MAXIMUMS = { 10.0， 10.0， 20.0， 20.0 }，

STATIC_INTEL_SOURCE_INTEL_NETWORK_MAXIMUMS = { 30.0, 30.0, 40.0, 30.0},

STATIC_INTEL_SOURCE_INTEL_NETWORK_MAXIMUMS = { 30.0， 30.0， 40.0， 30.0}，



— Dynamic intel pool can be manipulated through the following defines:

— 动态 intel 池可通过以下定义进行作：

—

— FLAT_DECAY and MULT_DECAY control the rate at which the intel decays

— FLAT_DECAY 和 MULT_DECAY 控制情报衰减的速度

— The formula is applied as follow (runs daily):

— 公式应用如下（每天运行）：

— NextIntel = ( Intel - FLAT_DECAY ) * MULT_DECAY

— NextIntel = （ Intel - FLAT_DECAY ） * MULT_DECAY

—

— AGGREGAT_LOG_FACTOR and AGGREGAT_DIVISOR control the rate at which

— AGGREGAT_LOG_FACTOR 和 AGGREGAT_DIVISOR 控制

— intel accumulates. It is applied to the sum of the intel generated

— 情报积累。它应用于生成的 intel 的总和

— throughout the day as follow:

— 全天如下：

— Aggregat = LOG_FACTOR * log( 1 + IntelOfTheDay ) + IntelOfTheDay / DIVISOR

— 聚合 = LOG_FACTOR * log（ 1 + IntelOfTheDay ） + IntelOfTheDay / DIVISOR

— The Aggregat is then added to the pool of intel.

— 然后将 Aggregat 添加到情报池中。

— If DIVISOR is zero then the division is evaluated to zero.

— 如果 DIVISOR 为零，则除法的计算结果为零。

—

— MAXIMUMS controls the maximum value that the pool can contribute to

— MAXIMUMS 控制池可以贡献的最大值

— the final intel values.

— 最终的 INTEL 值。

—

— ABSOLUTE_MAXIMUMS defines a ceiling for the intel in the pool that

— ABSOLUTE_MAXIMUMS 定义了池中 intel 的上限，该

— will never be exceeded. They are meant to be greater or equal to

— 永远不会超过。它们应该大于或等于

— MAXIMUMS. If the array is empty, no absolute maximum is defined.

— 最大值。如果数组为空，则不定义绝对最大值。



— Dynamic pool EVENT

— 动态池事件

DYNAMIC_INTEL_SOURCE_EVENT_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_EVENT_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_EVENT_MULT_DECAY = 0.985,

DYNAMIC_INTEL_SOURCE_EVENT_MULT_DECAY = 0.985，

DYNAMIC_INTEL_SOURCE_EVENT_AGGREGAT_LOG_FACTOR = 0,

DYNAMIC_INTEL_SOURCE_EVENT_AGGREGAT_LOG_FACTOR = 0，

DYNAMIC_INTEL_SOURCE_EVENT_AGGREGAT_DIVISOR = 1,

DYNAMIC_INTEL_SOURCE_EVENT_AGGREGAT_DIVISOR = 1，

DYNAMIC_INTEL_SOURCE_EVENT_MAXIMUMS = { 40, 40, 40, 40 },

DYNAMIC_INTEL_SOURCE_EVENT_MAXIMUMS = { 40， 40， 40， 40 }，

DYNAMIC_INTEL_SOURCE_EVENT_ABSOLUTE_MAXIMUMS = { 50, 50, 50, 50 },

DYNAMIC_INTEL_SOURCE_EVENT_ABSOLUTE_MAXIMUMS = { 50， 50， 50， 50 }，



— Dynamic pool LAND_COMBAT

— 动态池LAND_COMBAT

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_MULT_DECAY = 0.985,

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_MULT_DECAY = 0.985，

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_AGGREGAT_LOG_FACTOR = 0.25,

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_AGGREGAT_LOG_FACTOR = 0.25，

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_AGGREGAT_DIVISOR = 10,

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_AGGREGAT_DIVISOR = 10，

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_MAXIMUMS = { 0, 30, 5, 10 },

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_MAXIMUMS = { 0， 30， 5， 10 }，

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_ABSOLUTE_MAXIMUMS = { 0, 40, 10, 15 },

DYNAMIC_INTEL_SOURCE_LAND_COMBAT_ABSOLUTE_MAXIMUMS = { 0， 40， 10， 15 }，



— Dynamic pool NAVAL_COMBAT

— 动态池NAVAL_COMBAT

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_MULT_DECAY = 0.985,

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_MULT_DECAY = 0.985，

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_AGGREGAT_LOG_FACTOR = 0.02,

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_AGGREGAT_LOG_FACTOR = 0.02，

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_AGGREGAT_DIVISOR = 200,

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_AGGREGAT_DIVISOR = 200，

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_MAXIMUMS = { 10, 0, 40, 20 },

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_MAXIMUMS = { 10， 0， 40， 20 }，

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_ABSOLUTE_MAXIMUMS = { 15, 0, 45, 25 },

DYNAMIC_INTEL_SOURCE_NAVAL_COMBAT_ABSOLUTE_MAXIMUMS = { 15， 0， 45， 25 }，



— Dynamic pool AIR_COMBAT

— 动态池AIR_COMBAT

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_MULT_DECAY = 0.985,

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_MULT_DECAY = 0.985，

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_AGGREGAT_LOG_FACTOR = 1,

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_AGGREGAT_LOG_FACTOR = 1，

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_AGGREGAT_DIVISOR = 2,

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_AGGREGAT_DIVISOR = 2，

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_MAXIMUMS = { 0, 0, 0, 25 },

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_MAXIMUMS = { 0， 0， 0， 25 }，

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_ABSOLUTE_MAXIMUMS = { 0, 0, 0, 30 },

DYNAMIC_INTEL_SOURCE_AIR_COMBAT_ABSOLUTE_MAXIMUMS = { 0， 0， 0， 30 }，



— Dynamic pool AIR_RECON

— 动态池AIR_RECON

DYNAMIC_INTEL_SOURCE_AIR_RECON_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_AIR_RECON_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_AIR_RECON_MULT_DECAY = 0.995,

DYNAMIC_INTEL_SOURCE_AIR_RECON_MULT_DECAY = 0.995，

DYNAMIC_INTEL_SOURCE_AIR_RECON_AGGREGAT_LOG_FACTOR = 0.05,

DYNAMIC_INTEL_SOURCE_AIR_RECON_AGGREGAT_LOG_FACTOR = 0.05，

DYNAMIC_INTEL_SOURCE_AIR_RECON_AGGREGAT_DIVISOR = 200,

DYNAMIC_INTEL_SOURCE_AIR_RECON_AGGREGAT_DIVISOR = 200，

DYNAMIC_INTEL_SOURCE_AIR_RECON_MAXIMUMS = { 25, 20, 30, 20 },

DYNAMIC_INTEL_SOURCE_AIR_RECON_MAXIMUMS = { 25， 20， 30， 20 }，

DYNAMIC_INTEL_SOURCE_AIR_RECON_ABSOLUTE_MAXIMUMS = { 30, 25, 35, 25 },

DYNAMIC_INTEL_SOURCE_AIR_RECON_ABSOLUTE_MAXIMUMS = { 30， 25， 35， 25 }，



— Dynamic pool CAPTURED_OPERATIVE

— 动态池CAPTURED_OPERATIVE

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_FLAT_DECAY = 0.0,

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_FLAT_DECAY = 0.0，

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_MULT_DECAY = 0.95,

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_MULT_DECAY = 0.95，

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_AGGREGAT_LOG_FACTOR = 1,

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_AGGREGAT_LOG_FACTOR = 1，

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_AGGREGAT_DIVISOR = 2,

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_AGGREGAT_DIVISOR = 2，

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_MAXIMUMS = { 50, 40, 40, 30 },

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_MAXIMUMS = { 50， 40， 40， 30 }，

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_ABSOLUTE_MAXIMUMS = { 50, 40, 40, 30 },

DYNAMIC_INTEL_SOURCE_CAPTURED_OPERATIVE_ABSOLUTE_MAXIMUMS = { 50， 40， 40， 30 }，



LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0,			— if the opponent has any division present, flat intel value generated py a participant against an opponent

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0， — 如果对手存在任何除法，则参与者对阵对手时产生的平坦情报值

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_COMITTED_DIVISIONS = 0.5,		— multiplied to the number of comitted divisions of the opponent

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_COMITTED_DIVISIONS = 0.5， — 乘以对手的分数

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_RESERVE_DIVISIONS = 0.1,		— same for divisions in reserve

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_RESERVE_DIVISIONS = 0.1， — 与预备役师相同

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_RETREATING_DIVISIONS = 0.2,		— same for retreating divisions

LAND_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_RETREATING_DIVISIONS = 0.2， — 对于撤退的师也是如此

LAND_COMBAT_ARMY_INTEL_FACTOR = 0.01,						— factor applied once all values have been added together

LAND_COMBAT_ARMY_INTEL_FACTOR = 0.01 — 将所有值相加后应用的系数

LAND_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0,				— if the opponent has any plane active in the, flat intel value generated by a participant against that opponent

LAND_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0， — 如果对手有任何活跃的平面，则由参与者对该对手产生的平坦情报值

LAND_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_PLANE = 0.1,				— multiplied to the number of plane that opponent has in the combat

LAND_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_PLANE = 0.1， — 乘以对手在战斗中拥有的飞机数量

LAND_COMBAT_AIR_INTEL_FACTOR = 0.01,						— factor applied once all values have been added together

LAND_COMBAT_AIR_INTEL_FACTOR = 0.01， — 将所有值相加后应用的因子

RECON_INTEL_BONUS = 0.075, — each recon gives this bonus to overall gathered land intel in combat

RECON_INTEL_BONUS = 0.075， — 每次侦察都会为战斗中收集的陆地情报提供此加成



NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0,

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0，

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_SUBMARINE = 0.2,

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_SUBMARINE = 0.2，

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_SCREEN_SHIP = 0.5,

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_SCREEN_SHIP = 0.5，

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_CAPITAL_SHIP = 1.0,

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_CAPITAL_SHIP = 1.0，

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_INTERNAL_PLANES = 0.05,

NAVAL_COMBAT_NAVY_INTEL_OVER_OPPONENT_PER_INTERNAL_PLANES = 0.05，

NAVAL_COMBAT_NAVY_INTEL_FACTOR = 1.0,

NAVAL_COMBAT_NAVY_INTEL_FACTOR = 1.0，

NAVAL_COMBAT_CIVILIAN_INTEL_OVER_OPPONENT_PER_INSTANCE = 0.0,

NAVAL_COMBAT_CIVILIAN_INTEL_OVER_OPPONENT_PER_INSTANCE = 0.0，

NAVAL_COMBAT_CIVILIAN_INTEL_OVER_OPPONENT_PER_TRADE_CONVOY = 1.0,

NAVAL_COMBAT_CIVILIAN_INTEL_OVER_OPPONENT_PER_TRADE_CONVOY = 1.0，

NAVAL_COMBAT_CIVILIAN_INTEL_FACTOR = 1.0,

NAVAL_COMBAT_CIVILIAN_INTEL_FACTOR = 1.0，

NAVAL_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_INSTANCE = 0.0,

NAVAL_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_INSTANCE = 0.0，

NAVAL_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_TRANSFER_CONVOY = 1.0,

NAVAL_COMBAT_ARMY_INTEL_OVER_OPPONENT_PER_TRANSFER_CONVOY = 1.0，

NAVAL_COMBAT_ARMY_INTEL_FACTOR = 1.0,

NAVAL_COMBAT_ARMY_INTEL_FACTOR = 1.0，

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0,

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INSTANCE = 1.0，

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INTERNAL_PLANES = 0.0,

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_INTERNAL_PLANES = 0.0，

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_EXTERNAL_PLANES = 0.01,

NAVAL_COMBAT_AIR_INTEL_OVER_OPPONENT_PER_EXTERNAL_PLANES = 0.01，

NAVAL_COMBAT_AIR_INTEL_FACTOR = 1.0,

NAVAL_COMBAT_AIR_INTEL_FACTOR = 1.0，



NAVY_INTEL_BASE_SPOTTING_BONUS_MIN_INTEL_FOR_BONUS = 5, — at least this intel diff is needed for start applying BASE_SPOTTING_FROM_DECRYPTION bonus

NAVY_INTEL_BASE_SPOTTING_BONUS_MIN_INTEL_FOR_BONUS = 5， — 至少需要这个 intel diff 才能开始应用 BASE_SPOTTING_FROM_DECRYPTION 奖金

NAVY_INTEL_BASE_SPOTTING_BONUS_MAX_INTEL_FOR_BONUS = 40, — at this intel BASE_SPOTTING_FROM_DECRYPTION will be applied fully

NAVY_INTEL_BASE_SPOTTING_BONUS_MAX_INTEL_FOR_BONUS = 40， — 在此 Intel BASE_SPOTTING_FROM_DECRYPTION 将完全应用



NAVY_INTEL_MINE_DAMAGE_REDUCTION_FACTOR_MIN_INTEL_FOR_BONUS = 5, — at least this intel diff is needed for start applying NAVAL_MINES_INTEL_DIFF_FACTOR bonus

NAVY_INTEL_MINE_DAMAGE_REDUCTION_FACTOR_MIN_INTEL_FOR_BONUS = 5， — 至少需要这个 intel diff 才能开始应用 NAVAL_MINES_INTEL_DIFF_FACTOR bonus

NAVY_INTEL_MINE_DAMAGE_REDUCTION_FACTOR_MAX_INTEL_FOR_BONUS = 40, — t this intel NAVAL_MINES_INTEL_DIFF_FACTOR will be applied fully

NAVY_INTEL_MINE_DAMAGE_REDUCTION_FACTOR_MAX_INTEL_FOR_BONUS = 40， — t 此 Intel NAVAL_MINES_INTEL_DIFF_FACTOR 将完全应用



AIR_COMBAT_AIR_INTEL_PER_INSTANCE = 1.0,

AIR_COMBAT_AIR_INTEL_PER_INSTANCE = 1.0，

AIR_COMBAT_AIR_INTEL_PER_OPPONENT_PLANE = 0.0,

AIR_COMBAT_AIR_INTEL_PER_OPPONENT_PLANE = 0.0，

AIR_COMBAT_AIR_INTEL_FACTOR = 0.2,

AIR_COMBAT_AIR_INTEL_FACTOR = 0.2，



INTEL_NETWORK_NATIONAL_COVERAGE_FACTOR = 2.0,			 — multiplied to the national coverage to deduce the fraction of the maximum value listed below that will be added to the intel against the network’s target

INTEL_NETWORK_NATIONAL_COVERAGE_FACTOR = 2.0， — 乘以全国覆盖率，以推导出下面列出的最大值的分数，该值将针对网络目标添加到情报中

INTEL_NETWORK_NATIONAL_COVERAGE_NAVAL_BASE_FACTOR = 15.0, — factor used instead of above in case you dont cover naval bases etc

INTEL_NETWORK_NATIONAL_COVERAGE_NAVAL_BASE_FACTOR = 15.0， — 如果您不覆盖海军基地等，则使用系数代替上述系数



— the maximum intel values that an intel network will provide against a target

— Intel 网络将针对目标提供的最大 INTEL 值

INTEL_NETWORK_MAX_CIVILIAN_INTEL = 20.0,

INTEL_NETWORK_MAX_CIVILIAN_INTEL = 20.0，

INTEL_NETWORK_MAX_ARMY_INTEL = 20.0,

INTEL_NETWORK_MAX_ARMY_INTEL = 20.0，

INTEL_NETWORK_MAX_NAVY_INTEL = 25.0,				— only apply if the network encompass a naval base controlled by the network’s target

INTEL_NETWORK_MAX_NAVY_INTEL = 25.0 — 仅当网络包含由网络目标控制的海军基地时才适用

INTEL_NETWORK_MAX_AIRFORCE_INTEL = 15.0,

INTEL_NETWORK_MAX_AIRFORCE_INTEL = 15.0，



RADAR_LEVEL_INTEL_FACTOR = 1.25,					— Multiplied to the radar level to tell the fraction of intel per covered province we get. The radar level is computed as BuildingLevel / MaxBuildingLevel.

RADAR_LEVEL_INTEL_FACTOR = 1.25， — 乘以雷达级别，得出我们得到的每个覆盖省份的情报分数。雷达级别计算为 BuildingLevel / MaxBuildingLevel。

RADAR_INTEL_STACKING_FACTOR = 0.5,				— Used when multiple radars cover the same province

RADAR_INTEL_STACKING_FACTOR = 0.5 — 当多个雷达覆盖同一省份时使用

RADAR_BASE_INTEL_VALUES_FOR_COUNTRY_COVERAGE_PERCENTAGE = {

RADAR_BASE_INTEL_VALUES_FOR_COUNTRY_COVERAGE_PERCENTAGE = {

— Values are the same order as in COUNTRY_LEVEL_INTEL_MAXIMUMS

— 值的顺序与 COUNTRY_LEVEL_INTEL_MAXIMUMS 中的顺序相同

— Multiplied by the total radar efficiency over the provinces of

— 乘以各省的总雷达效率

— a specific country divided by the number of provinces controlled

— 特定国家除以控制的省份数量

— by that same country.

——由同一个国家。

9.0,

9.0,

0.0,





18.0,


},

RADAR_BASE_INTEL_VALUES_FOR_COVERED_LAND_PROVINCES = {

RADAR_BASE_INTEL_VALUES_FOR_COVERED_LAND_PROVINCES = {

— Values are the same order as in COUNTRY_LEVEL_INTEL_MAXIMUMS

— 值的顺序与 COUNTRY_LEVEL_INTEL_MAXIMUMS 中的顺序相同

— Multiplied by the total radar efficiency of the provinces of

— 乘以

— a specific country divided by the individual radar’s

— 特定国家/地区除以单个雷达的

— percentage of covered provinces.

— 覆盖省份的百分比。

5.0,

5.0,

0.0,





12.0,


},

RADAR_BASE_INTEL_VALUES_FOR_COVERED_SEA_PROVINCES = {

RADAR_BASE_INTEL_VALUES_FOR_COVERED_SEA_PROVINCES = {

— Values are the same order as in COUNTRY_LEVEL_INTEL_MAXIMUMS

— 值的顺序与 COUNTRY_LEVEL_INTEL_MAXIMUMS 中的顺序相同

— Multiplied by the total radar efficiency of the provinces

— 乘以各省的总雷达效率

— covered by the radar for each strategic region that has

— 每个战略区域的雷达覆盖

— convoy routes and multiplied by the fraction of convoy

- 护航路线并乘以护航的分数

— that country has going through the region (excluding the

— 该国家/地区通过该区域（不包括

— convoys of the radar’s owner)

— 雷达所有者的护航队）

0.0,

0.0,

280.0,





0.0,


},

RADAR_NAVY_INTEL_FACTOR_PER_SHIP_TYPE = {

RADAR_NAVY_INTEL_FACTOR_PER_SHIP_TYPE = {

— Navy intel value factored to the fraction of the country’s

— 海军情报价值与该国情报价值的比例相比较

— ships in the sea zone covered by the radar, by ship type

— 雷达覆盖的海域内的船舶，按船舶类型

5.0, — Submarine

5.0， — 潜艇

10.0, — Screen ship

10.0， — 屏幕船

20.0, — Capital ship

20.0， — 主力舰





30.0, — Carrier ship


30.0， — 航母船


},

CAPTURED_OPERATIVE_MAX_FACTOR = 35.0,	— Define the maximum of the randomized factor, before the factor from operative is applied

CAPTURED_OPERATIVE_MAX_FACTOR = 35.0， — 在应用手术因子之前定义随机化因子的最大值

CAPTURED_OPERATIVE_MIN_FACTOR = 10.0,	— Define the minimum of the randomized factor, before the factor from operative is applied

CAPTURED_OPERATIVE_MIN_FACTOR = 10.0， — 在应用手术因子之前定义随机因子的最小值

CAPTURED_OPERATIVE_INTEL_YIELD = {

CAPTURED_OPERATIVE_INTEL_YIELD = {

— Values are the same order as in COUNTRY_LEVEL_INTEL_MAXIMUMS

— 值的顺序与 COUNTRY_LEVEL_INTEL_MAXIMUMS 中的顺序相同

— Daily base intel yield from an operative, before the

— 特工的每日基础情报产量，在

— factors defined above are applied

- 应用上述定义的系数

0.3,

0.3,

0.3,





0.3,


},



RECON_PLANE_INTEL_BASE = 0.02, 				— intel base amount for a strategic area per plane

RECON_PLANE_INTEL_BASE = 0.02， — 每架飞机战略区域的情报基础数量

RECON_PLANE_LAND_DISTRIBUTION = { 10.0, 6.0, 0.0, 3.0 }, — controls for land and sea zones how much of each intel typee is given (civ, army, navy, air)

RECON_PLANE_LAND_DISTRIBUTION = { 10.0， 6.0， 0.0， 3.0 }， — 控制陆地和海洋区域每种情报类型的数量（公民、陆军、海军、空军）

RECON_PLANE_SEA_DISTRIBUTION = { 0.0, 0.0, 10.0, 0.0 },

RECON_PLANE_SEA_DISTRIBUTION = { 0.0， 0.0， 10.0， 0.0 }，



LAND_SPOT_DECAY = 0.05,

LAND_SPOT_DECAY = 0.05，

NAVAL_SPOT_DECAY = 1,

NAVAL_SPOT_DECAY = 1，



ENCRYPTION_DECRYPTION_INTEL_FACTORS = {

ENCRYPTION_DECRYPTION_INTEL_FACTORS = {

— Factored to ( 1 + A.decryption ) / ( 1 + B.encryption ) to determine the intel

— 分解为 （ 1 + A.解密 ） / （ 1 + B.加密 ） 以确定情报

— A has over B when legacy encryption and decryption modifier are used.

— 使用传统加密和解密修饰符时，A 大于 B。

— Note that if A.decryption is zero, the result is forced to zero

— 请注意，如果 A.decryption 为零，则结果将强制为零

— In the ame order as COUNTRY_LEVEL_INTEL_MAXIMUMS

— 按 ame 顺序COUNTRY_LEVEL_INTEL_MAXIMUMS

15.0, 15.0, 15.0, 15.0

},



— intel ledger defines

— Intel Ledger 定义

CIVILIAN_PRODUCTION_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_PRODUCTION_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值，低于此值，您将获得???

CIVILIAN_PRODUCTION_RANGE_INTEL_MAX = 0.5, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_PRODUCTION_RANGE_INTEL_MAX = 0.5 — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_PRODUCTION_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_PRODUCTION_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 intel 的 intel 值范围



CIVILIAN_FUEL_RANGE_INTEL_MIN = 0.3, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_FUEL_RANGE_INTEL_MIN = 0.3， — 显示模糊工厂计数的最小值，低于此值，您将获得???

CIVILIAN_FUEL_RANGE_INTEL_MAX = 0.7, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_FUEL_RANGE_INTEL_MAX = 0.7， — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_FUEL_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_FUEL_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 intel 的 intel 值范围



CIVILIAN_MANPOWER_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_MANPOWER_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值低于此值，您将获得???

CIVILIAN_MANPOWER_RANGE_INTEL_MAX = 0.7, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_MANPOWER_RANGE_INTEL_MAX = 0.7， — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_MANPOWER_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_MANPOWER_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 Intel 的 Intel 值范围



CIVILIAN_CONVOYS_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_CONVOYS_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值低于此值，您将获得???

CIVILIAN_CONVOYS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_CONVOYS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 intel 的 intel 值范围



CIVILIAN_TRUCKS_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_TRUCKS_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值，低于此值，您将获得???

CIVILIAN_TRUCKS_RANGE_INTEL_MAX = 0.5, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_TRUCKS_RANGE_INTEL_MAX = 0.5， — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_TRUCKS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_TRUCKS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 intel 的 intel 值范围



CIVILIAN_TRAINS_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_TRAINS_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值低于此值，您将获得???

CIVILIAN_TRAINS_RANGE_INTEL_MAX = 0.5, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_TRAINS_RANGE_INTEL_MAX = 0.5， — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_TRAINS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_TRAINS_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 Intel 的 Intel 值范围



CIVILIAN_SUPPLY_RANGE_INTEL_MIN = 0.1, — minimum value to show fuzzy factory counts below this you will get ???

CIVILIAN_SUPPLY_RANGE_INTEL_MIN = 0.1， — 显示模糊工厂计数的最小值，低于此值，您将获得???

CIVILIAN_SUPPLY_RANGE_INTEL_MAX = 0.5, — maximum value to show fuzzy factory counts. above this you will get full count

CIVILIAN_SUPPLY_RANGE_INTEL_MAX = 0.5， — 显示模糊工厂计数的最大值。在此之上，您将获得完整计数

CIVILIAN_SUPPLY_INTEL_RANGE_AT_LOWEST_INTEL = 0.5, — range of intel values at lowest intel

CIVILIAN_SUPPLY_INTEL_RANGE_AT_LOWEST_INTEL = 0.5， — 最低 intel 的 intel 值范围



CIVILIAN_TRADE_SHOW_TRADE_AMOUNTS = 0.0, — minimum value to show how much a country trades a resource

CIVILIAN_TRADE_SHOW_TRADE_AMOUNTS = 0.0， — 显示一个国家/地区资源贸易量的最小值

CIVILIAN_TRADE_SHOW_TRADE_PARTNERS = 0.1, — minimum value to show who a country trades with

CIVILIAN_TRADE_SHOW_TRADE_PARTNERS = 0.1， — 显示一个国家与谁进行交易的最小值

CIVILIAN_MIN_INTEL_FOR_RESOURCE_ROUTES_TOOLTIPS = 0.9, — minimum value to show convoy routes for resource transfer

CIVILIAN_MIN_INTEL_FOR_RESOURCE_ROUTES_TOOLTIPS = 0.9， — 显示用于资源转移的护航路线的最小值

CIVILIAN_MIN_INTEL_FOR_TRADE_ROUTES = 0.7, — minimum value to show trade routes on map

CIVILIAN_MIN_INTEL_FOR_TRADE_ROUTES = 0.7， — 在地图上显示贸易路线的最小值

CIVILIAN_MIN_INTEL_FOR_RESOURCE_ORIGIN_ROUTES = 0.5, — minimum value to show resource transfers to mainland on map

CIVILIAN_MIN_INTEL_FOR_RESOURCE_ORIGIN_ROUTES = 0.5， — 在地图上显示到大陆的资源转移的最小值



ARMY_MIN_INTEL_FOR_SUPPLY_ROUTES = 0.5, — minimum value to show convoy routes for supply transfer

ARMY_MIN_INTEL_FOR_SUPPLY_ROUTES = 0.5， — 显示补给转移的护航路线的最小值

ARMY_MIN_INTEL_FOR_SUPPLY_ROUTES_TOOLTIPS = 0.7, — minimum value to show convoy route tooltips for supply transfer

ARMY_MIN_INTEL_FOR_SUPPLY_ROUTES_TOOLTIPS = 0.7， — 显示补给转移的护航路线工具提示的最小值



CIVILIAN_INTEL_NEEDED_TO_SHOW_ANTI_AIR_REDUCTION = 0.3, — minimum value to show anti air damage reduction

CIVILIAN_INTEL_NEEDED_TO_SHOW_ANTI_AIR_REDUCTION = 0.3， — 显示防空伤害减免的最小值



CIVILIAN_INTEL_NEEDED_TO_SHOW_FOCUS_TREE = 0.5, — min required intel to focus tree with taken focuses

CIVILIAN_INTEL_NEEDED_TO_SHOW_FOCUS_TREE = 0.5， — 需要最小 intel 来聚焦具有 taken focus 的树

CIVILIAN_INTEL_NEEDED_TO_SHOW_CURRENT_FOCUS = 0.7, — min required intel to show currently focus

CIVILIAN_INTEL_NEEDED_TO_SHOW_CURRENT_FOCUS = 0.7， — 显示当前焦点所需的最小 intel

CIVILIAN_INTEL_NEEDED_TO_SHOW_CURRENT_FOCUS_PROGRESS = 0.7, — min required intel to show current focus progress

CIVILIAN_INTEL_NEEDED_TO_SHOW_CURRENT_FOCUS_PROGRESS = 0.7， — 显示当前焦点进度所需的最小 INTEL



CIVILIAN_MIN_INTEL_TO_SHOW_INDUSTRY_GRAPH = 0.30,

CIVILIAN_MIN_INTEL_TO_SHOW_INDUSTRY_GRAPH = 0.30，

CIVILIAN_MIN_INTEL_TO_SHOW_CONVOYS_GRAPH = 0.70,

CIVILIAN_MIN_INTEL_TO_SHOW_CONVOYS_GRAPH = 0.70，

CIVILIAN_MIN_INTEL_TO_SHOW_BOMBERS_GRAPH = 0.8,

CIVILIAN_MIN_INTEL_TO_SHOW_BOMBERS_GRAPH = 0.8，

CIVILIAN_MIN_INTEL_TO_SHOW_TRUCKS_GRAPH = 0.5,

CIVILIAN_MIN_INTEL_TO_SHOW_TRUCKS_GRAPH = 0.5，

CIVILIAN_MIN_INTEL_TO_SHOW_TRAINS_GRAPH = 0.5,

CIVILIAN_MIN_INTEL_TO_SHOW_TRAINS_GRAPH = 0.5，



CIVILIAN_MIN_INTEL_TO_SHOW_RAIL_STAUS = 0.4, — when mousing over supply map mode, shows damage/construction status

CIVILIAN_MIN_INTEL_TO_SHOW_RAIL_STAUS = 0.4， — 将鼠标悬停在补给地图模式上时，显示损坏/施工状态



OLD_TECH_COUNT_NUM_DAYS = 180, — num days after researched to consider a tech as “old”

OLD_TECH_COUNT_NUM_DAYS = 180， — 在研究后将技术视为“旧”的天数

INTEL_TO_SHOW_TECH_COUNT = { 0.5, 0.3, 0.3, 0.3 }, — minimum value to show current tech count and current doctrine

INTEL_TO_SHOW_TECH_COUNT = { 0.5， 0.3， 0.3， 0.3 }， — 显示当前技术数量和当前学说的最小值

INTEL_TO_SHOW_PREVIOUSLY_RESEARCHED = { 0.7, 0.7, 0.7, 0.7 }, — minimum value to show previously researched tech

INTEL_TO_SHOW_PREVIOUSLY_RESEARCHED = { 0.7， 0.7， 0.7， 0.7 }， — 显示以前研究的科技的最小值

INTEL_TO_SHOW_CURRENTLY_RESEARCHED = { 0.8, 0.8, 0.8, 0.8 }, — minimum value to show currently being researched tech

INTEL_TO_SHOW_CURRENTLY_RESEARCHED = { 0.8， 0.8， 0.8， 0.8 }， — 显示当前正在研究的技术的最小值



INTEL_TO_SHOW_IDEAS = { 0.0, 0.0, 0.0, 0.0 },

INTEL_TO_SHOW_IDEAS = { 0.0， 0.0， 0.0， 0.0 }，



ARMY_ARMY_COUNT_RANGE_INTEL_MIN = 0.05,

ARMY_ARMY_COUNT_RANGE_INTEL_MIN = 0.05，

ARMY_ARMY_COUNT_RANGE_INTEL_MAX = 0.7,

ARMY_ARMY_COUNT_RANGE_INTEL_MAX = 0.7，

ARMY_ARMY_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.8,

ARMY_ARMY_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.8，



ARMY_SPECIAL_FORCES_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.7,

ARMY_SPECIAL_FORCES_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.7，



ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.1,

ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.1，

ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7,

ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7，

ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

ARMY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，

ARMY_MIN_INTEL_TO_SHOW_EQUIPMENT_RATIO = 0.7,

ARMY_MIN_INTEL_TO_SHOW_EQUIPMENT_RATIO = 0.7，



ARMY_MIN_INTEL_TO_SHOW_BASIC_TEMPLATE_INFO = 0.3,

ARMY_MIN_INTEL_TO_SHOW_BASIC_TEMPLATE_INFO = 0.3，

ARMY_TEMPLATE_UNIT_COUNT_INTEL_MIN = 0.5,

ARMY_TEMPLATE_UNIT_COUNT_INTEL_MIN = 0.5，

ARMY_TEMPLATE_UNIT_COUNT_INTEL_MAX = 0.7,

ARMY_TEMPLATE_UNIT_COUNT_INTEL_MAX = 0.7，

ARMY_TEMPLATE_UNIT_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 1.0,

ARMY_TEMPLATE_UNIT_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 1.0，

ARMY_MIN_INTEL_TO_SHOW_EXACT_TEMPLATE_INFO = 0.8,

ARMY_MIN_INTEL_TO_SHOW_EXACT_TEMPLATE_INFO = 0.8，



ARMY_STOCKPILE_COUNT_INTEL_MIN = 0.3,

ARMY_STOCKPILE_COUNT_INTEL_MIN = 0.3，

ARMY_STOCKPILE_COUNT_INTEL_MAX = 0.7,

ARMY_STOCKPILE_COUNT_INTEL_MAX = 0.7，

ARMY_STOCKPILE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

ARMY_STOCKPILE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



ARMY_MIN_INTEL_TO_SHOW_EQUIPMENT_DESIGN_DETAILS = 0.8,

ARMY_MIN_INTEL_TO_SHOW_EQUIPMENT_DESIGN_DETAILS = 0.8，



ARMY_MIN_INTEL_RATIO_NEEDED_FOR_DISPLAYING_FAKE_ENEMY_INTEL_IN_LEDGER = 0.9,

ARMY_MIN_INTEL_RATIO_NEEDED_FOR_DISPLAYING_FAKE_ENEMY_INTEL_IN_LEDGER = 0.9，

ARMY_MIN_INTEL_RATIO_NEEDED_FOR_REVEALING_FAKE_ENEMY_INTEL = 0.9,

ARMY_MIN_INTEL_RATIO_NEEDED_FOR_REVEALING_FAKE_ENEMY_INTEL = 0.9，



ARMY_INTEL_COMBAT_BONUS_MAX_BONUS = 0.15, — max combat bonus that will apply when intel is high enough

ARMY_INTEL_COMBAT_BONUS_MAX_BONUS = 0.15， — 当智力足够高时应用的最大战斗加成

ARMY_INTEL_COMBAT_BONUS_FACTOR_ATTACK = 1.0, — multiplier for attack value of intel combat bonus

ARMY_INTEL_COMBAT_BONUS_FACTOR_ATTACK = 1.0， — 智力战斗加成攻击值的乘数

ARMY_INTEL_COMBAT_BONUS_FACTOR_DEFENSE = 1.0, — multiplier for defense value of intel combat bonus

ARMY_INTEL_COMBAT_BONUS_FACTOR_DEFENSE = 1.0， — 智力战斗加成防御值的乘数



ARMY_INTEL_COMBAT_BONUS_MIN_INTEL_FOR_BONUS = 5, — min intel needed to start applying ARMY_INTEL_COMBAT_BONUS_MAX_BONUS

ARMY_INTEL_COMBAT_BONUS_MIN_INTEL_FOR_BONUS = 5， — 开始应用ARMY_INTEL_COMBAT_BONUS_MAX_BONUS所需的最小情报

ARMY_INTEL_COMBAT_BONUS_MAX_INTEL_FOR_BONUS = 50, — intel needed to fully apply ARMY_INTEL_COMBAT_BONUS_MAX_BONUS

ARMY_INTEL_COMBAT_BONUS_MAX_INTEL_FOR_BONUS = 50 — 需要 Intel 来完全应用 ARMY_INTEL_COMBAT_BONUS_MAX_BONUS



NAVAL_SUPREMACY_INTEL_LOW = 0.4,								— we need more intel than this to get any supremacy

NAVAL_SUPREMACY_INTEL_LOW = 0.4， — 我们需要比这更多的情报才能获得任何霸主地位

NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_PENALTY_START = 0.1,		— supremacy is reduced to NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_MIN_PENALTY at or below this intel

NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_PENALTY_START = 0.1， — 在此 intel 或以下，霸权降低到 NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_MIN_PENALTY

NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_MIN_PENALTY = 0.5, — you get this much supremacy at NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_PENALTY_START and scales up to 1 at NAVAL_SUPREMACY_INTEL_LOW

NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_MIN_PENALTY = 0.5，— 您在 NAVAL_SUPREMACY_INTEL_LOW_SUPREMACY_PENALTY_START 时获得如此多的霸权，并在 NAVAL_SUPREMACY_INTEL_LOW 时扩展到 1



NAVY_FLEET_COUNT_INTEL_MIN = 0.1,

NAVY_FLEET_COUNT_INTEL_MIN = 0.1，

NAVY_FLEET_COUNT_INTEL_MAX = 0.3,

NAVY_FLEET_COUNT_INTEL_MAX = 0.3，

NAVY_FLEET_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

NAVY_FLEET_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



NAVY_TASKFORCE_COUNT_INTEL_MIN = 0.3,

NAVY_TASKFORCE_COUNT_INTEL_MIN = 0.3，

NAVY_TASKFORCE_COUNT_INTEL_MAX = 0.7,

NAVY_TASKFORCE_COUNT_INTEL_MAX = 0.7，

NAVY_TASKFORCE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

NAVY_TASKFORCE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



NAVY_SHIP_COUNT_INTEL_MIN = 0.1,

NAVY_SHIP_COUNT_INTEL_MIN = 0.1，

NAVY_SHIP_COUNT_INTEL_MAX = 0.8,

NAVY_SHIP_COUNT_INTEL_MAX = 0.8，

NAVY_SHIP_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

NAVY_SHIP_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



NAVY_MIN_INTEL_TO_SHOW_EXISTING_CATEGORY_TYPES = 0.1, —this is about disaplying ships by class category

NAVY_MIN_INTEL_TO_SHOW_EXISTING_CATEGORY_TYPES = 0.1，—这是关于按等级类别划分的船只

NAVY_SHIP_TYPE_COUNT_INTEL_MIN = 0.3,					—this range is used both when for disaplying counts by class and counts by variant

NAVY_SHIP_TYPE_COUNT_INTEL_MIN = 0.3， - 此范围既可用于按类显示计数，也可用于按变量显示计数

NAVY_SHIP_TYPE_COUNT_INTEL_MAX = 0.7,

NAVY_SHIP_TYPE_COUNT_INTEL_MAX = 0.7，

NAVY_SHIP_TYPE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

NAVY_SHIP_TYPE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



NAVY_MIN_INTEL_TO_SHOW_SHIP_CLASSES = 0.5, —this unclocks the display of a given variant

NAVY_MIN_INTEL_TO_SHOW_SHIP_CLASSES = 0.5 — 这将取消给定变量的显示

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.05,

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.05，

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7,

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7，

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

NAVY_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



NAVY_MIN_INTEL_TO_SHOW_SHIP_DESIGN_DETAILS = 0.8,

NAVY_MIN_INTEL_TO_SHOW_SHIP_DESIGN_DETAILS = 0.8，



AIR_AIRWING_COUNT_INTEL_MIN = 0.0,

AIR_AIRWING_COUNT_INTEL_MIN = 0.0，

AIR_AIRWING_COUNT_INTEL_MAX = 0.7,

AIR_AIRWING_COUNT_INTEL_MAX = 0.7，

AIR_AIRWING_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

AIR_AIRWING_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



AIR_MIN_INTEL_TO_SHOW_AIRWING_CLASSES = 0.3,

AIR_MIN_INTEL_TO_SHOW_AIRWING_CLASSES = 0.3，

AIR_WING_TYPE_COUNT_INTEL_MIN = 0.5,

AIR_WING_TYPE_COUNT_INTEL_MIN = 0.5，

AIR_WING_TYPE_COUNT_INTEL_MAX = 0.7,

AIR_WING_TYPE_COUNT_INTEL_MAX = 0.7，

AIR_WING_TYPE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

AIR_WING_TYPE_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.1,

AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MIN = 0.1，

AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7,

AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_MAX = 0.7，

AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5,

AIR_DEPLOYED_MANPOWER_COUNT_RANGE_INTEL_RANGE_AT_LOWEST_INTEL = 0.5，



RAID_MIN_INTEL_FOR_WARNING_ON_LAUNCH = 0.1, — how much intel (of the relevant type) is needed to show a warning when raid is launched

RAID_MIN_INTEL_FOR_WARNING_ON_LAUNCH = 0.1， — 启动 RAID 时需要多少情报（相关类型）才能显示警告

RAID_MIN_INTEL_FOR_WARNING_HALFWAY_TO_LAUNCH = 0.5, — how much intel (of the relevant type) is needed to show a warning halfway through preparation

RAID_MIN_INTEL_FOR_WARNING_HALFWAY_TO_LAUNCH = 0.5， — 在准备过程中需要多少情报（相关类型）才能显示警告

— (this limit is a dummy value only used for communicating the role of intel in the intel ledger )

— （此限制是一个虚拟值，仅用于传达 Intel 在 Intel Ledger 中的角色）

— (in reality, detection scales linearly with intel. 70% intel = detection at 30% preparation, 50% intel = detection at 50% preparation, etc.

— （实际上，检测率与情报呈线性关系。70% 情报 = 30% 准备时检测率，50% 情报 = 50% 准备期检测，以此类推。

RAID_MIN_INTEL_FOR_WARNING_EARLY_PREPARATION = 0.8, — how much intel (of the relevant type) is needed to show a warning early in the preparation

RAID_MIN_INTEL_FOR_WARNING_EARLY_PREPARATION = 0.8， — 在准备工作的早期需要多少情报（相关类型）来显示警告

— (this limit is a dummy value only used for communicating the role of intel in the intel ledger )

— （此限制是一个虚拟值，仅用于传达 Intel 在 Intel Ledger 中的角色）

— (in reality, detection scales linearly with intel. 70% intel = detection at 30% preparation, 50% intel = detection at 50% preparation, etc.

— （实际上，检测率与情报呈线性关系。70% 情报 = 30% 准备时检测率，50% 情报 = 50% 准备期检测，以此类推。



CIVILIAN_MAPICON_INDUSTRY_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.7,

CIVILIAN_MAPICON_INDUSTRY_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = 0.7，



MAP_INTEL_VISIBILITY_CUTOFFS = { — how much map intel is gained with intel over a country. first number is threshold, second is amount of intel map intel gained

MAP_INTEL_VISIBILITY_CUTOFFS = { — 一个国家/地区使用情报获得的地图情报量。第一个数字是阈值，第二个数字是情报获得的地图情报量

0.1, -50,

0.4, 0,

0.6, 50,





1.0, 100,


},



— these are used in some triggers

— 这些用于某些触发器

ARMY_AVG_ARMOR_INTEL_MIN = 0.0,

ARMY_AVG_ARMOR_INTEL_MIN = 0.0，

ARMY_AVG_ARMOR_INTEL_MAX = 0.5,

ARMY_AVG_ARMOR_INTEL_MAX = 0.5，

ARMY_AVG_ARMOR_RANGE_AT_LOWEST_INTEL = 1.0,

ARMY_AVG_ARMOR_RANGE_AT_LOWEST_INTEL = 1.0，



ARMY_MAX_ARMOR_INTEL_MIN = 0.0,

ARMY_MAX_ARMOR_INTEL_MIN = 0.0，

ARMY_MAX_ARMOR_INTEL_MAX = 0.5,

ARMY_MAX_ARMOR_INTEL_MAX = 0.5，

ARMY_MAX_ARMOR_RANGE_AT_LOWEST_INTEL = 1.0,

ARMY_MAX_ARMOR_RANGE_AT_LOWEST_INTEL = 1.0，



ARMY_AVG_PIERCING_INTEL_MIN = 0.0,

ARMY_AVG_PIERCING_INTEL_MIN = 0.0，

ARMY_AVG_PIERCING_INTEL_MAX = 0.5,

ARMY_AVG_PIERCING_INTEL_MAX = 0.5，

ARMY_AVG_PIERCING_RANGE_AT_LOWEST_INTEL = 1.0,

ARMY_AVG_PIERCING_RANGE_AT_LOWEST_INTEL = 1.0，



ARMY_MAX_PIERCING_INTEL_MIN = 0.0,

ARMY_MAX_PIERCING_INTEL_MIN = 0.0，

ARMY_MAX_PIERCING_INTEL_MAX = 0.5,

ARMY_MAX_PIERCING_INTEL_MAX = 0.5，

ARMY_MAX_PIERCING_RANGE_AT_LOWEST_INTEL = 1.0,

ARMY_MAX_PIERCING_RANGE_AT_LOWEST_INTEL = 1.0，

—~

NAVY_MAPICON_MISSION_COUNT_INTEL_MIN = 0.5, — min intel to show assigned naval missions

NAVY_MAPICON_MISSION_COUNT_INTEL_MIN = 0.5， — 显示已分配海军任务的最小情报

NAVY_MAPICON_MISSION_COUNT_INTEL_MAX = 0.8, — min intel to show assigned naval missions with perfect accuracy, and taskforces count

NAVY_MAPICON_MISSION_COUNT_INTEL_MAX = 0.8， — 最小情报，以完美准确显示分配的海军任务，以及特遣队数量



NAVY_MAPICON_SHOW_ALL_NAVAL_PORTS = 0.3, — min intel to show all naval ports (otherwise you will only see nearby ones)

NAVY_MAPICON_SHOW_ALL_NAVAL_PORTS = 0.3， — 显示所有海军港口的最小情报（否则你只会看到附近的港口）

NAVY_MAPICON_NAVAL_PORT_VISIBILITY_DETAIL_THRESHOLDS = { — how detailed the post tooltips will be

NAVY_MAPICON_NAVAL_PORT_VISIBILITY_DETAIL_THRESHOLDS = { — 文章工具提示的详细程度

0.0,	— for no intel

0.0， — 表示没有 Intel

0.1,	— show port level

0.1， — 显示端口级别

0.3,	— show fuzzy taskforce count

0.3， — 显示模糊特遣队数量

0.7,	— show full taskforce count

0.7， — 显示完整的工作组数量





0.8,	— show taskforce details


0.8， — 显示特遣队详细信息


},

NAVY_MAPICON_NAVAL_PORT_TASKFORCE_FUZZY_THRESHOLD = 0.5,

NAVY_MAPICON_NAVAL_PORT_TASKFORCE_FUZZY_THRESHOLD = 0.5，



AIR_MAPICON_MISSION_COUNT_INTEL_MIN = {

AIR_MAPICON_MISSION_COUNT_INTEL_MIN = {

0.3, — AIR_SUPERIORITY

0.3， — AIR_SUPERIORITY

0.3, — CAS

0.3 — CAS

0.3, — INTERCEPTION

0.3， — 拦截

0.3, — STRATEGIC_BOMBER

0.3， — STRATEGIC_BOMBER

0.3, — NAVAL_BOMBER

0.3， — NAVAL_BOMBER

0.3, — DROP_NUKE

0.3， — DROP_NUKE

0.3, — PARADROP

0.3， — 降落伞

0.3, — NAVAL_KAMIKAZE

0.3， — NAVAL_KAMIKAZE

0.3, — PORT_STRIKE

0.3， — PORT_STRIKE

0.3, — ATTACK_LOGISTICS

0.3， — ATTACK_LOGISTICS

0.3, — AIR_SUPPLY

0.3， — AIR_SUPPLY

0.3, — TRAINING

0.3， — 训练

0.3, — NAVAL_MINES_PLANTING

0.3， — NAVAL_MINES_PLANTING

0.3, — NAVAL_MINES_SWEEPING

0.3， — NAVAL_MINES_SWEEPING

0.3, — RECON

0.3， — 侦察





0.3, — NAVAL_PATROL


0.3， — NAVAL_PATROL


},

AIR_MAPICON_MISSION_COUNT_INTEL_MAX = {

AIR_MAPICON_MISSION_COUNT_INTEL_MAX = {

0.6, — AIR_SUPERIORITY

0.6， — AIR_SUPERIORITY

0.6, — CAS

0.6 — CAS

0.6, — INTERCEPTION

0.6， — 拦截

0.6, — STRATEGIC_BOMBER

0.6， — STRATEGIC_BOMBER

0.6, — NAVAL_BOMBER

0.6， — NAVAL_BOMBER

0.6, — DROP_NUKE

0.6， — DROP_NUKE

0.6, — PARADROP

0.6， — 降落伞

0.6, — NAVAL_KAMIKAZE

0.6， — NAVAL_KAMIKAZE

0.6, — PORT_STRIKE

0.6， — PORT_STRIKE

0.6, — ATTACK_LOGISTICS

0.6， — ATTACK_LOGISTICS

0.6, — AIR_SUPPLY

0.6， — AIR_SUPPLY

0.6, — TRAINING

0.6， — 训练

0.6, — NAVAL_MINES_PLANTING

0.6， — NAVAL_MINES_PLANTING

0.6, — NAVAL_MINES_SWEEPING

0.6， — NAVAL_MINES_SWEEPING

0.6, — RECON

0.6， — 侦察





0.6, — NAVAL_PATROL


0.6， — NAVAL_PATROL


},

AIR_MAPICON_MISSION_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = {

AIR_MAPICON_MISSION_COUNT_INTEL_RANGE_AT_LOWEST_INTEL = {

0.5, — AIR_SUPERIORITY

0.5， — AIR_SUPERIORITY

0.5, — CAS

0.5 — 空气质素健康指数

0.5, — INTERCEPTION

0.5， — 拦截

0.5, — STRATEGIC_BOMBER

0.5， — STRATEGIC_BOMBER

0.5, — NAVAL_BOMBER

0.5， — NAVAL_BOMBER

0.5, — DROP_NUKE

0.5， — DROP_NUKE

0.5, — PARADROP

0.5， — 降落伞

0.5, — NAVAL_KAMIKAZE

0.5， — NAVAL_KAMIKAZE

0.5, — PORT_STRIKE

0.5， — PORT_STRIKE

0.5, — ATTACK_LOGISTICS

0.5， — ATTACK_LOGISTICS

0.5, — AIR_SUPPLY

0.5， — AIR_SUPPLY

0.5, — TRAINING

0.5， — 训练

0.5, — NAVAL_MINES_PLANTING

0.5， — NAVAL_MINES_PLANTING

0.5, — NAVAL_MINES_SWEEPING

0.5， — NAVAL_MINES_SWEEPING

0.5, — RECON

0.5， — 侦察





0.5, — NAVAL_PATROL


0.5， — NAVAL_PATROL


},



AIR_MAPICON_SHOW_ALL_AIR_PORTS = 0.3, — min intel to show all air ports (otherwise you will only see nearby ones)

AIR_MAPICON_SHOW_ALL_AIR_PORTS = 0.3， — 显示所有 Air Port 的最小 Intel（否则您只会看到附近的 Airports）

AIR_MAPICON_AIR_PORT_VISIBILITY_DETAIL_THRESHOLDS = { — how detailed the post tooltips will be

AIR_MAPICON_AIR_PORT_VISIBILITY_DETAIL_THRESHOLDS = { — 帖子工具提示的细节

0.0,	— for no intel

0.0， — 表示没有 Intel

0.3,	— show fuzzy air plane count

0.3， — 显示模糊飞机计数

0.7,	— show full air count

0.7， — 显示完整空气计数





0.8,	— show air plane details


0.8， — 显示飞机详细信息


},

AIR_MAPICON_AIR_PORT_PLANE_FUZZY_THRESHOLD = 0.5,

AIR_MAPICON_AIR_PORT_PLANE_FUZZY_THRESHOLD = 0.5，

AIR_MIN_INTEL_TO_SHOW_EQUIPMENT_DESIGN_DETAILS = 0.8,

AIR_MIN_INTEL_TO_SHOW_EQUIPMENT_DESIGN_DETAILS = 0.8，



— ~intel ledger defines

— ~Intel Ledger 定义

},



NCharacter = {

NCharacter = {

OFFICER_CORP_ADVISOR_ENTRIES_IN_MENU = { “high_command”, “theorist”, “army_chief”, “air_chief”, “navy_chief” },

OFFICER_CORP_ADVISOR_ENTRIES_IN_MENU = { “high_command”， “理论家”， “army_chief”， “air_chief”， “navy_chief” }，

OFFICER_CORP_HIGH_COMMAND_SLOTS_IN_MENU = 3, —For Alert manager to count the number of High Command Slots in the UI

OFFICER_CORP_HIGH_COMMAND_SLOTS_IN_MENU = 3， — 供警报管理器计算 UI 中 High Command Slots 的数量

POLITICAL_ADVISOR_SLOTS_IN_MENU = 3, —For Alert manager to count the number of Political Advisor Slots in the UI

POLITICAL_ADVISOR_SLOTS_IN_MENU = 3， — 让警报管理器计算 UI 中政治顾问插槽的数量



DEFAULT_PP_COST_FOR_MILITARY_ADVISOR = 50,	— When an advisor does not have cost assigned this is the default used

DEFAULT_PP_COST_FOR_MILITARY_ADVISOR = 50 – 当顾问未分配成本时，这是默认使用

DEFAULT_PP_COST_FOR_POLITICAL_ADVISOR = 150,

DEFAULT_PP_COST_FOR_POLITICAL_ADVISOR = 150，

DEFAULT_CP_COST_FOR_ADVISOR = 0,	— For Starting Advisors

DEFAULT_CP_COST_FOR_ADVISOR = 0， — 用于启动 Advisor

DEFAULT_CP_COST_FOR_DYNAMIC_ADVISORS = 0,	— For Advisors created during gameplay

DEFAULT_CP_COST_FOR_DYNAMIC_ADVISORS = 0， — 对于在游戏过程中创建的顾问

ADVISOR_PROMOTION_COST = 5,	— Cost to promote someone to advisor

ADVISOR_PROMOTION_COST = 5， — 将某人提升为顾问的成本



COUNTRY_LEADER_BASE_EXPIRE_YEAR_LENGTH = 5, — When creating a dynamic country leader if an expire date is not set it will have 5 years as a base expiration date

COUNTRY_LEADER_BASE_EXPIRE_YEAR_LENGTH = 5 — 在创建动态国家/地区领导者时，如果未设置到期日期，它将以 5 年作为基准到期日期

COUNTRY_LEADER_BASE_RANDOM_MAX_YEAR_LENGTH = 15, — Max random value added to COUNTRY_LEADER_BASE_EXPIRE_YEAR_LENGTH

COUNTRY_LEADER_BASE_RANDOM_MAX_YEAR_LENGTH = 15， — 添加到 COUNTRY_LEADER_BASE_EXPIRE_YEAR_LENGTH 的最大随机值



SPECIALIST_ADVISOR_MIN_RANK = 4,

SPECIALIST_ADVISOR_MIN_RANK = 4，

EXPERT_ADVISOR_MIN_RANK = 6,

EXPERT_ADVISOR_MIN_RANK = 6，

GENIUS_ADVISOR_MIN_RANK = 8,

GENIUS_ADVISOR_MIN_RANK = 8，

},



NSupply = {

NSupply = {

MAX_RAILWAY_LEVEL = 5, — update railway texture as well, each frame corresponds to a level

MAX_RAILWAY_LEVEL = 5， — 同时更新 Railway 纹理，每帧对应一个级别



—defines to calculate the capitals supply. This will be also used for max supply of other nodes depending on how well they are connected to capital. Using the formula:

- 定义以计算 Capital 供应量。这也将用于其他节点的最大供应，具体取决于它们与资本的联系程度。使用公式：

—CapitalSupply = CAPITAL_SUPPLY_BASE + (NumberOfCivilianFactories CAPITAL_SUPPLY_CIVILIAN_FACTORIES) + (NumberOfMilitaryFactories CAPITAL_SUPPLY_MILITARY_FACTORIES) + (NumberOfDockyards * CAPITAL_SUPPLY_DOCKYARDS)

—资本供应 = CAPITAL_SUPPLY_BASE + （NumberOfCivillianFactories CAPITAL_SUPPLY_CIVILIAN_FACTORIES） + （NumberOfMilitaryFactories CAPITAL_SUPPLY_MILITARY_FACTORIES） + （NumberOfDockyards * CAPITAL_SUPPLY_DOCKYARDS）

CAPITAL_SUPPLY_BASE = 5.0, — base supply for capital

CAPITAL_SUPPLY_BASE = 5.0， — 资本的基本供给

CAPITAL_SUPPLY_CIVILIAN_FACTORIES = 0.3, — supply from one civilian factory

CAPITAL_SUPPLY_CIVILIAN_FACTORIES = 0.3， — 来自一家民用工厂的供应

CAPITAL_SUPPLY_MILITARY_FACTORIES = 0.6, — supply from one military factory

CAPITAL_SUPPLY_MILITARY_FACTORIES = 0.6， — 来自一家军工厂的供应

CAPITAL_SUPPLY_DOCKYARDS = 0.4, —supply from one naval factory

CAPITAL_SUPPLY_DOCKYARDS = 0.4，—来自一家海军工厂的供应



— defines that are used for supply reach for capital

— 定义用于资本的供应范围

— supply flow will start from INITIAL_SUPPLY_FLOW and will be reduced by a penalty on each province it travels (which depends on how far we are from our origin, terrain etc)

— 补给流将从 INITIAL_SUPPLY_FLOW 开始，并会因它经过的每个省份而减少（这取决于我们离原地有多远、地形等）

— a supply reach >= 1.0 considered “perfect” and will be able to fully support units on that particular province (assuming you are not over capacity)

— 补给达到 >= 1.0 被认为是“完美”的，并且能够完全支持该特定省份的单位（假设你没有超负荷）

CAPITAL_INITIAL_SUPPLY_FLOW = 5.0, — starting supply from

CAPITAL_INITIAL_SUPPLY_FLOW = 5.0， — 起始供应量

CAPITAL_STARTING_PENALTY_PER_PROVINCE = 0.5, — starting penalty that will be added as supply moves away from its origin (modified by stuff like terrain)

CAPITAL_STARTING_PENALTY_PER_PROVINCE = 0.5， — 当补给远离其来源时将添加的起始惩罚（由地形等内容修改）

CAPITAL_ADDED_PENALTY_PER_PROVINCE = 1.2, — added penalty as we move away from origin

CAPITAL_ADDED_PENALTY_PER_PROVINCE = 1.2， — 当我们远离原点时增加的惩罚



— defines that are used for supply reach for built nodes

— 定义用于构建节点的供应范围

NODE_INITIAL_SUPPLY_FLOW = 2.8,

NODE_INITIAL_SUPPLY_FLOW = 2.8，

NODE_STARTING_PENALTY_PER_PROVINCE = 0.50,

NODE_STARTING_PENALTY_PER_PROVINCE = 0.50，

NODE_ADDED_PENALTY_PER_PROVINCE = 0.70,

NODE_ADDED_PENALTY_PER_PROVINCE = 0.70，



— defines that are used for supply reach for dockyards

— 定义用于造船厂的补给范围

NAVAL_BASE_INITIAL_SUPPLY_FLOW = 3.3,

NAVAL_BASE_INITIAL_SUPPLY_FLOW = 3.3，

NAVAL_BASE_STARTING_PENALTY_PER_PROVINCE = 0.84,

NAVAL_BASE_STARTING_PENALTY_PER_PROVINCE = 0.84，

NAVAL_BASE_ADDED_PENALTY_PER_PROVINCE = 1.1,

NAVAL_BASE_ADDED_PENALTY_PER_PROVINCE = 1.1，



— Node Flow (i.e. province caps) increase by this amount per railway level of the node’s bottleneck

— 节点瓶颈的每级铁路流量（即省份上限）增加此数量

NODE_FLOW_BONUS_PER_RAIL_LEVEL = 0.34,

NODE_FLOW_BONUS_PER_RAIL_LEVEL = 0.34，



— rivers will transfer in between nodes as if they were this level

— 河流将在节点之间传输，就像它们处于此级别一样

RIVER_RAILWAY_LEVEL = 1,

RIVER_RAILWAY_LEVEL = 1，



— defines that are used for supply reach for floating harbors

— 定义用于浮动港口的补给范围

FLOATING_HARBOR_INITIAL_SUPPLY_FLOW = 2.6,

FLOATING_HARBOR_INITIAL_SUPPLY_FLOW = 2.6，

FLOATING_HARBOR_STARTING_PENALTY_PER_PROVINCE = 0.8,

FLOATING_HARBOR_STARTING_PENALTY_PER_PROVINCE = 0.8，

FLOATING_HARBOR_ADDED_PENALTY_PER_PROVINCE = 0.8,

FLOATING_HARBOR_ADDED_PENALTY_PER_PROVINCE = 0.8，



FLOATING_HARBOR_BASE_SUPPLY = 15.0, — supply given by a floating harbor

FLOATING_HARBOR_BASE_SUPPLY = 15.0， — 浮港提供的补给

FLOATING_HARBOR_BASE_DURATION = 21, — duration of a full hp floating harbor

FLOATING_HARBOR_BASE_DURATION = 21， — 满血量浮港的持续时间

FLOATING_HARBOR_DURATION_RATIO_AT_MIN_HP = 0.0, — duration mult for a harbor that was reduced to 0 hp

FLOATING_HARBOR_DURATION_RATIO_AT_MIN_HP = 0.0， — 减少到 0 hp 的港口的持续时间倍数



FLOATING_HARBOR_MIN_DECAY = 0.2, — Always reduce Floating Harbor longevity by this many “hours” per hour

FLOATING_HARBOR_MIN_DECAY = 0.2， — 始终将 Floating Harbor 的寿命减少每小时 “小时”

FLOATING_HARBOR_DECAY_MAX_AIR_BONUS = -0.1, — At 100% Friendly Air superiourity, change decay rate by this many “hours” per hour

FLOATING_HARBOR_DECAY_MAX_AIR_BONUS = -0.1， — 在 100% Friendly Air 优势下，每小时按此数“小时”改变衰减率

FLOATING_HARBOR_DECAY_MAX_AIR_PENALTY = 0.4, — At 100% Enemy Air superiourity, change decay rate by this many “hours” per hour

FLOATING_HARBOR_DECAY_MAX_AIR_PENALTY = 0.4， — 在敌方空中优势为 100% 时，每小时按此数“小时”改变衰减速率

FLOATING_HARBOR_DECAY_MAX_NAVAL_BONUS = -0.2, — At 100% Friendly naval superiourity, change decay rate by this many “hours” per hour

FLOATING_HARBOR_DECAY_MAX_NAVAL_BONUS = -0.2， — 在 100% 友军海军优势下，每小时改变衰减速度

FLOATING_HARBOR_DECAY_MAX_NAVAL_PENALTY = 0.5, — At 100% Enemy Naval superiourity, change decay rate by this many “hours” per hour

FLOATING_HARBOR_DECAY_MAX_NAVAL_PENALTY = 0.5， — 当敌方海军优势达到 100% 时，每小时按此数“小时”改变衰减率

FLOATING_HARBOR_DECAY_NO_CONTROL_PENALTY = 1.0, — If adjacent land province is not held, change decay rate by this many “hours” per hour

FLOATING_HARBOR_DECAY_NO_CONTROL_PENALTY = 1.0， — 如果未守住相邻的陆地省份，则按每小时 “小时” 更改衰减速率



SUPPLY_FLOW_DROP_REDUCTION_AT_MAX_INFRA = 0.30, — max infrastructure level will reduce the supply flow drop off by this ratio

SUPPLY_FLOW_DROP_REDUCTION_AT_MAX_INFRA = 0.30， — 最高基础设施级别将按此比率减少供应流量下降

SUPPLY_FLOW_PENALTY_CROSSING_RIVERS = 0.20, — crossing rivers introduces additional penalty

SUPPLY_FLOW_PENALTY_CROSSING_RIVERS = 0.20， — 过河会带来额外的处罚



— node flow terrain falloff is scaled by logistics curve based on distance(d) (scalar / (1+e^(-k(d-midpoint))))

— 节点流地形衰减由基于距离 （d） 的物流曲线缩放（标量 / （1+e^（-k（d-midpoint）））））

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_K = 1.3, — How steep the curve is

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_K = 1.3， — 曲线的陡峭程度

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_MIDPOINT = 2.3, — sigmoid inflection point

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_MIDPOINT = 2.3， — sigmoid 拐点

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_SCALAR = 0.9, — Max Penalty adjustment due to distance

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_SCALAR = 0.9， — 由于距离而进行的最大罚单调整

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_MIN_PENALTY_SCALE = 0.25, — Logistics curve never reduces penalty facor below this limit

SUPPLY_FLOW_DIST_LOGISTICS_FALLOFF_MIN_PENALTY_SCALE = 0.25， — 物流曲线永远不会将罚分减少到低于此限制



— The range bonus added to a fully motorized hub. This supply is added on top of the XXX_INITIAL_SUPPLY_FLOW defined above.

— 全电动轮毂增加了航程奖励。此供应是在上面定义的 XXX_INITIAL_SUPPLY_FLOW 之上添加的。

SUPPLY_HUB_FULL_MOTORIZATION_BONUS = 2.2,

SUPPLY_HUB_FULL_MOTORIZATION_BONUS = 2.2，

— How many trucks does it cost to fully motorize a hub

— 完全机动化一个轮毂需要多少辆卡车

SUPPLY_HUB_FULL_MOTORIZATION_TRUCK_COST = 60.0,

SUPPLY_HUB_FULL_MOTORIZATION_TRUCK_COST = 60.0，

— For each additional level of motorization on a hub (i.e. contry with set motoriazation) reduce max bonus for next level by this amount

— 对于轮毂上每增加一个机动化级别（即具有设置机动化的 concon），将下一个级别的最大奖励减少此数量

SUPPLY_HUB_MOTORIZATION_MARGINAL_EFFECT_DECAY = 1.6,

SUPPLY_HUB_MOTORIZATION_MARGINAL_EFFECT_DECAY = 1.6，



— used for calculating “flow” for railways.

— 用于计算铁路的“流量”。

RAILWAY_BASE_FLOW = 10.0, 		— how much base flow railway gives when a node connected to its capital/a naval node by a railway

RAILWAY_BASE_FLOW = 10.0， — 当一个节点通过铁路连接到其首都/海军节点时，铁路提供多少基流

RAILWAY_FLOW_PER_LEVEL = 5.0, 	— how much additional flow a railway level gives

RAILWAY_FLOW_PER_LEVEL = 5.0， — 铁路层提供的额外流量

RAILWAY_FLOW_PENALTY_PER_DAMAGED = 5.0, — penalty to flow per damaged railway

RAILWAY_FLOW_PENALTY_PER_DAMAGED = 5.0， — 每条受损铁路的流量惩罚

RAILWAY_MIN_FLOW = 5.0, 		— minimum railway flow can be reduced to

RAILWAY_MIN_FLOW = 5.0， — 最小铁路流量可以减少到



— used for calculating “flow” from a naval node to another naval node when it is connected via a convoy route

— 用于计算通过护航路线连接时从一个海军节点到另一个海军节点的“流量”

— NAVAL_BASE_MAX_SUPPLY_FLOW_FACTOR = 0.9, — flow of the parent node is factored to this ratio (so at most it can transfer parent naval node flow * this define)

— NAVAL_BASE_MAX_SUPPLY_FLOW_FACTOR = 0.9， — 父节点的流量被计入此比率（因此它最多可以传输父海军节点流量 * 此定义）

NAVAL_BASE_FLOW = 5.0, — max output/input of a naval node is limited by this base value + additional ratio for each level

NAVAL_BASE_FLOW = 5.0， — 海军节点的最大输出/输入受此基值 + 每个级别的附加比率的限制

NAVAL_FLOW_PER_LEVEL = 3.0, — max output/input of a naval node is limited by previous base value + this define per its level

NAVAL_FLOW_PER_LEVEL = 3.0， — 海军节点的最大输出/输入受先前的基值 + 此定义（根据其级别）的限制



SUPPLY_NODE_MIN_SUPPLY_THRESHOLD = 1.0, — if supply of a node is below this value it will be set to 0 — Currently unused? This should happen when enough damage occurs

SUPPLY_NODE_MIN_SUPPLY_THRESHOLD = 1.0， — 如果节点的供应量低于此值，它将设置为 0 — 当前未使用？当发生足够的损害时，应该会发生这种情况



INFRA_TO_SUPPLY = 0.3,							— each level of infra gives this many supply

INFRA_TO_SUPPLY = 0.3， — 每个级别的基础设施都提供这么多的供应

VP_TO_SUPPLY_BASE = 0.2,							— Bonus to supply from a VP, no matter the level

VP_TO_SUPPLY_BASE = 0.2， — VP 供应的奖金，无论级别如何

VP_TO_SUPPLY_BONUS_CONVERSION = 0.05,			— Bonus to supply local supplies from Victory Points, multiplied by this aspect and rounded to closest integer

VP_TO_SUPPLY_BONUS_CONVERSION = 0.05， — 从胜利点供应本地补给的奖励，乘以此相位并四舍五入到最接近的整数

SUPPLY_FROM_DAMAGED_INFRA = 0.15, — damaged infrastructure counts as this in supply calcs

SUPPLY_FROM_DAMAGED_INFRA = 0.15， — 损坏的基础设施在供应计算中计为 this

SUPPLY_BASE_MULT = 0.2,							— multiplier on supply base values

SUPPLY_BASE_MULT = 0.2， — 供应基础值的乘数

SUPPLY_DISRUPTION_DAILY_RECOVERY = 1.5,		— every day nodes recover this much of their accumulated disruption.

SUPPLY_DISRUPTION_DAILY_RECOVERY = 1.5， — 节点每天都会恢复这么多累积的中断。



RAILWAY_CONVERSION_COOLDOWN = 10, — railways will be put on cooldown when they are captured by enemy and will not be usable during the cooldown

RAILWAY_CONVERSION_COOLDOWN = 10， — 铁路在被敌人占领时将进入冷却时间，并且在冷却期间无法使用

RAILWAY_CONVERSION_COOLDOWN_CORE = 5,

RAILWAY_CONVERSION_COOLDOWN_CORE = 5，

RAILWAY_CONVERSION_COOLDOWN_CIVILWAR = 0,

RAILWAY_CONVERSION_COOLDOWN_CIVILWAR = 0，



DEFAULT_STARTING_TRUCK_RATIO = 1.5, — countries get this ratio of starting truck in their buffers compared to their need

DEFAULT_STARTING_TRUCK_RATIO = 1.5， — 与需求相比，各国在其缓冲区中获得的起步卡车比率

DEFAULT_STARTING_TRAIN_RATIO = 1, — countries get this ratio of starting trains in their buffers compared to their need

DEFAULT_STARTING_TRAIN_RATIO = 1， — 与需求相比，各国在其缓冲区中获得此启动列车的比率



SUPPLY_POINTS_PER_TRAIN = 1.0, — old default 1.25 — Amount of supply that can fit in a train. (Trains distribute supply from capital to a supply node.)

SUPPLY_POINTS_PER_TRAIN = 1.0， — 旧默认值 1.25 — 火车可以容纳的供应量。（火车将供应从资本分配到供应节点。

NUM_RAILWAYS_TRAIN_FACTOR = 0.03, — the train usage is scaled by railway distance between the supply node and the capital multiplied by this factor

NUM_RAILWAYS_TRAIN_FACTOR = 0.03， — 火车使用量按供应节点和资本之间的铁路距离乘以该系数进行缩放



BASE_SUPPLY_MULT_FOR_TRUCK_DEFAULT_BUFFER = 1.0, — initial value for wanted buffers over potential truck usage

BASE_SUPPLY_MULT_FOR_TRUCK_DEFAULT_BUFFER = 1.0， — 所需缓冲区的初始值与潜在卡车使用量之比

BASE_SUPPLY_MULT_FOR_TRUCK_MIN_BUFFER = 0.0, — min and max values for buffer ratio

BASE_SUPPLY_MULT_FOR_TRUCK_MIN_BUFFER = 0.0， — 缓冲区比率的最小值和最大值

BASE_SUPPLY_MULT_FOR_TRUCK_MAX_BUFFER = 100.0,

BASE_SUPPLY_MULT_FOR_TRUCK_MAX_BUFFER = 100.0，



TRUCK_ATTRITION = 0.003, — base truck attrition

TRUCK_ATTRITION = 0.003， — 基础卡车损耗

TRUCK_ATTRITION_FACTOR = 0.65, —a scale on total truck attrition

TRUCK_ATTRITION_FACTOR = 0.65，—卡车总损耗的量表



BASE_TRUCK_HP = 100.0,

BASE_TRUCK_HP = 100.0，

TRUCK_HP_PER_ARMOR = 2,

TRUCK_HP_PER_ARMOR = 2，



BASE_TRAIN_HP = 100.0,

BASE_TRAIN_HP = 100.0，

TRAIN_ARMOR_TARGETING_WEIGHT = 0.01, — For each health point gained by armor_value, enemy bombers are this much more likely to target

TRAIN_ARMOR_TARGETING_WEIGHT = 0.01， — armor_value每获得一个生命值，敌方轰炸机就更有可能成为目标

TRAIN_ANTI_AIR_HIT_CHANCE = 0.07, — Balancing value to determine the chance of train anti-air hitting an attacking airwing.

TRAIN_ANTI_AIR_HIT_CHANCE = 0.07， — 确定火车防空命中进攻机翼几率的平衡值。

TRAIN_ANTI_AIR_HIT_ROLL_COUNT = 12, — The air_attack of all attacked trains are accumulated, and then we do this many random rolls each with the hit chance set above to determine the fraction of the accumulated air_attack that hits.

TRAIN_ANTI_AIR_HIT_ROLL_COUNT = 12， — 所有被攻击的火车的air_attack都累积起来，然后我们随机掷骰，每次掷骰子都带有上面设置的命中率，以确定被击中的累积air_attack的比例。

TRAIN_ANTI_AIR_ATTACK_TO_AMOUNT = 0.001, — Balancing value to convert the hitting air_attack to a percentage value of the attacking planes that are killed.

TRAIN_ANTI_AIR_ATTACK_TO_AMOUNT = 0.001， — 将命中air_attack转换为被击杀的攻击飞机的百分比值的平衡值。



MIN_TRAIN_SUPPLY_FACTOR = 0.5, — Having 0 trains in stockpile only applies this penalty factor, scaling up to 1.0 when need is met

MIN_TRAIN_SUPPLY_FACTOR = 0.5， — 库存中为 0 列火车仅应用此惩罚系数，当满足需要时，将比例增加到 1.0

MIN_TRAIN_REQUIREMENT = 2, — If total train need <= this, then don’t apply any supply penalty, even if stockpile is insufficient

MIN_TRAIN_REQUIREMENT = 2， — 如果总列车需要 <= 这个，那么即使库存不足，也不要施加任何供应惩罚



SUPPLY_FLOW_REDUCTION_THRESHOLD = 0.1, — if supply flow is lower than this, it is not applied

SUPPLY_FLOW_REDUCTION_THRESHOLD = 0.1， — 如果供气流量低于此值，则不适用



— following values are used for calculating potential truck usage

— 以下值用于计算可能的卡车使用情况

— generally potential is ~= current usage but as units moves along the map

— 通常 potential 是 ~= 当前使用情况，但随着单位沿地图移动

— they are assigned to different nodes which adds slightly higher usage due to minimum truck needed being 1

— 它们被分配到不同的节点，由于所需的最小卡车为 1，因此使用率略高

BASE_AIR_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0,

BASE_AIR_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0，

BASE_ARMY_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0,

BASE_ARMY_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0，

BASE_NAVY_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0,

BASE_NAVY_SUPPLY_MULT_FOR_TRUCK_BUFFER = 1.0，



CAPITAL_NODE_BASE_SUPPLY_ADD = 0,

CAPITAL_NODE_BASE_SUPPLY_ADD = 0，

BUILT_NODE_BASE_SUPPLY_ADD = 0.6,

BUILT_NODE_BASE_SUPPLY_ADD = 0.6，

LOCAL_NODE_BASE_SUPPLY_ADD = 0.5,

LOCAL_NODE_BASE_SUPPLY_ADD = 0.5，

NAVAL_NODE_BASE_SUPPLY_ADD = 0.3,

NAVAL_NODE_BASE_SUPPLY_ADD = 0.3，

— ~end

— ~结束



— armies slowly gains and buffers supply above >100% up to their supply grace if they have efficent supply flow

— 如果军队有有效的补给流，他们会慢慢获得并缓冲超过 >100% 的补给，直到他们的补给宽限期

— otherwuse they will lose up to 100% supply every day depending on how bad supply flow is

— 其他wuse 他们每天会损失高达 100% 的供应，具体取决于供应流的糟糕程度

ARMY_SUPPLY_RATIO_STARTING_GAIN = 0.0,

ARMY_SUPPLY_RATIO_STARTING_GAIN = 0.0，

ARMY_SUPPLY_RATIO_SPEED_GAIN_PER_HOUR = 0.01,

ARMY_SUPPLY_RATIO_SPEED_GAIN_PER_HOUR = 0.01，

ARMY_MAX_SUPPLY_RATIO_GAIN_PER_HOUR = 0.15,

ARMY_MAX_SUPPLY_RATIO_GAIN_PER_HOUR = 0.15，



MIN_SURRENDER_LIMIT_TO_MOVE_SUPPLY_CAPITAL = 0.15, — country needs to be above thos surrender ratio to be able to move its capital

MIN_SURRENDER_LIMIT_TO_MOVE_SUPPLY_CAPITAL = 0.15， — 国家需要高于投降率才能转移其资本

COOLDOWN_DAYS_AFTER_MOVING_SUPPLY_CAPITAL = 30, — cooldown for moving supply again after last move

COOLDOWN_DAYS_AFTER_MOVING_SUPPLY_CAPITAL = 30， — 最后一次移动后再次移动补给的冷却时间

DAYS_TO_START_GIVING_SUPPLY_AFTER_MOVING_SUPPLY_CAPITAL = 7, — the country will start gaining supply after this many days moving its capital

DAYS_TO_START_GIVING_SUPPLY_AFTER_MOVING_SUPPLY_CAPITAL = 7， — 该国将在迁都这么多天后开始获得供应

DAYS_TO_START_GIVING_FULL_SUPPLY_AFTER_MOVING_SUPPLY_CAPITAL = 21, — the country will reach max supply after this many days moving its capital

DAYS_TO_START_GIVING_FULL_SUPPLY_AFTER_MOVING_SUPPLY_CAPITAL = 21， — 该国将在迁都这么多天后达到最大供应量



MIN_DIFF_FOR_AUTO_UPDATING_EXISTING_RAILWAYS = 5, — while building railways, the system will prefer updating existing railway if new railway is close enough to existing one

MIN_DIFF_FOR_AUTO_UPDATING_EXISTING_RAILWAYS = 5， — 在建造铁路时，如果新铁路与现有铁路足够接近，则系统将优先更新现有铁路



— reinforcements depends on distance to capital and following defines are used for calculating reinforcement time

— 加固取决于到资本的距离，以下定义用于计算加固时间

SUPPLY_PATH_MAX_DISTANCE = 15,	— max time it can take

SUPPLY_PATH_MAX_DISTANCE = 15， — 可以花费的最大时间

RAILWAY_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.3, — time factor for total railway distance

RAILWAY_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.3， — 铁路总距离的时间因子

TRUCK_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.01, — time factor for total truck distance

TRUCK_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.01， — 卡车总距离的时间因子

NAVAL_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.08, — time factor for total naval distance

NAVAL_DISTANCE_FACTOR_FOR_REINFORCEMENT_SPEED = 0.08， — 海军总距离的时间因子



ALERT_VERY_LOW_SUPPLY_LEVEL = 0.2,			 — At which point we show up the low and very low supply level alert. Value is in % of supplies supported vs required.

ALERT_VERY_LOW_SUPPLY_LEVEL = 0.2， — 此时我们显示低和极低的供应水平警报。值以支持的耗材与所需耗材的百分比表示。

ALERT_LOW_SUPPLY_LEVEL = 0.5,

ALERT_LOW_SUPPLY_LEVEL = 0.5，



AI_FRONT_MINIMUM_UNITS_PER_PROVINCE_FOR_SUPPLY_CALCULATIONS = 1, — AI will try to keep this amount of divisions per province as a minimum when evaluating supply limitations for war fronts

AI_FRONT_MINIMUM_UNITS_PER_PROVINCE_FOR_SUPPLY_CALCULATIONS = 1， — 在评估战争前线的补给限制时，AI 会尽量将每个省份的这个师数保持在最低限度

AI_FRONT_DIVISIONS_PER_SUPPLY_POINT = 1.0, — How many divisions should the AI consider it can supply per available supply point

AI_FRONT_DIVISIONS_PER_SUPPLY_POINT = 1.0， — AI 应该认为每个可用补给点它可以提供多少个分区

AI_FRONT_MAX_UNITS_ENEMY_COUNT_FACTOR = 1.2, — Make sure AI front MaxNrUnits is at least EnemyCount multiplied by this factor

AI_FRONT_MAX_UNITS_ENEMY_COUNT_FACTOR = 1.2， — 确保 AI 前 MaxNrUnits 至少为 EnemyCount 乘以此系数

SUPPLY_THRESHOLD_FOR_ARMY_ATTRITION = 0.35, — armies will only get attrition below this supply

SUPPLY_THRESHOLD_FOR_ARMY_ATTRITION = 0.35， — 军队只会在低于此补给时消耗

NUMBER_OF_SHOWN_SUPPLY_SOURCES_IN_SUPPLY_MAPMODE = 3, — number of supply flow sources shown in breakdown tooltip

NUMBER_OF_SHOWN_SUPPLY_SOURCES_IN_SUPPLY_MAPMODE = 3， — 分解工具提示中显示的供流源数量

ESTIMATED_DIVISION_WEIGHT_FOR_SUPPLY_ESTIMATIONS_GUI = 1.0,	—Division supply consumption used for estimating frontline weight for order tooltips

ESTIMATED_DIVISION_WEIGHT_FOR_SUPPLY_ESTIMATIONS_GUI = 1.0， — 除以供应消耗量，用于估算订单工具提示的一线权重

AVAILABLE_MANPOWER_STATE_SUPPLY = 0.18,						—Factor for state supply from max manpower (population)

AVAILABLE_MANPOWER_STATE_SUPPLY = 0.18， - 最大人力（人口）的国家供应系数

NON_CORE_MANPOWER_STATE_SUPPLY = 0.2,						—Factor for population sttate supply when controlled by an occupier (NO TAKE FOOD)

NON_CORE_MANPOWER_STATE_SUPPLY = 0.2，—由占用者控制时种群储存供应的因子 （NO TAKE FOOD）

STORED_SUPPLY_CONSUMPTION_RATE_FACTOR = 0.75,				—Multiplies consumption rate of stored supply (more/less easement)

STORED_SUPPLY_CONSUMPTION_RATE_FACTOR = 0.75，—乘以储存供应的消耗率（更多/更少的地役权）

},

NAITheatre = {

奈特剧院 = {

AI_THEATRE_GENERATION_HOME_THEATRE_DEPTH_RESTRICTION = 2,			— The home theatre is generated based off a initial depth restriction

AI_THEATRE_GENERATION_HOME_THEATRE_DEPTH_RESTRICTION = 2， — 家庭影院是根据初始深度限制生成的

AI_THEATRE_GENERATION_BORDER_SIZE_RESTRICTION = 7,					— Theatres are generated based off borders, Higher value means larger theatres

AI_THEATRE_GENERATION_BORDER_SIZE_RESTRICTION = 7， — 剧院是基于边界生成的，值越高意味着剧院越大

AI_THEATRE_GENERATION_DEPTH_TO_START_CONSIDERING_BORDERSTATES = 2,	— Distance from capital in terms of states

AI_THEATRE_GENERATION_DEPTH_TO_START_CONSIDERING_BORDERSTATES = 2， — 以国家为单位与首都的距离

AI_THEATRE_GENERATION_MINIMUM_STATE_COUNT = 3,						— Small Theatres - Minimum state count for a theatre

AI_THEATRE_GENERATION_MINIMUM_STATE_COUNT = 3， — 小剧院 - 剧院的最小状态计数

AI_THEATRE_GENERATION_MAX_DISTANCE_TO_MERGE = 200,					— Small Theatres - Dont merge with too far away theatres, higher value means less merging will occur

AI_THEATRE_GENERATION_MAX_DISTANCE_TO_MERGE = 200， — 小剧院 - 不要与太远的剧院合并，值越高意味着合并越少

AI_THEATRE_GENERATION_MAX_DISTANCE_TO_FILL = 350,					— Final generation step - Max distance to fill states, higher values means less theatres

AI_THEATRE_GENERATION_MAX_DISTANCE_TO_FILL = 350， — 最终生成步长 - 填充状态的最大距离，值越高意味着剧院越少



AI_THEATRE_DISTRIBUTION_SAME_THEATRE_SCORE_MODIFIER = 0.25, 			— Value that affects the score of units when distributing to fronts within the same theatre, its a percentage multiplier, the higher it is the higher the chance of units staying in close proximity

AI_THEATRE_DISTRIBUTION_SAME_THEATRE_SCORE_MODIFIER = 0.25， — 当分配到同一战区内的前线时，影响单位分数的值，它是一个百分比乘数，它越高，单位保持近距离的机会就越高

AI_THEATRE_DISTRIBUTION_MAX_SCORE = 250000, 						— Max Score that a unit can have when being distributed to ai fronts, higher value means more granularity in score changes, lower values means less variation in where units can go

AI_THEATRE_DISTRIBUTION_MAX_SCORE = 250000， — 单位在分配到 AI 前线时可以拥有的最高分数，较高的值意味着分数变化的粒度更大，较低的值意味着单位可以去哪里的变化较小

AI_THEATRE_DISTRIBUTION_PERCENTAGE_OF_MINIMUM_UNITS_TO_KEEP = 1.0,	— How much should a frontline adheer to its minimum unit demand, when removing/reassigning units

AI_THEATRE_DISTRIBUTION_PERCENTAGE_OF_MINIMUM_UNITS_TO_KEEP = 1.0， — 在移除/重新分配单位时，前线应遵守其最低单位需求的程度

AI_THEATRE_DISTRIBUTION_MAX_PERCENT_UNMET_DEMAND_PER_FRONT = 0.5, — Percentage of how much fronts should request from other lower priority fronts, 0 means once a front gets hold of a unit it stays there forever until its demand is reduced, controlls shuffling of units.

AI_THEATRE_DISTRIBUTION_MAX_PERCENT_UNMET_DEMAND_PER_FRONT = 0.5， — 前线应该从其他较低优先级的前线请求多少的百分比，0 表示一旦前线控制了一个单位，它就会永远留在那里，直到它的需求减少，控制单位的洗牌。



AI_THEATRE_STATE_UPDATE_MAX_STATE_COUNT_TO_EXPAND = 25,				— Max theatre size

AI_THEATRE_STATE_UPDATE_MAX_STATE_COUNT_TO_EXPAND = 25， — 最大剧院大小



AI_THEATRE_BREAKDOWN_MIN_STATE_COUNT = 3,							— Theatres below this size will break and merge with others

AI_THEATRE_BREAKDOWN_MIN_STATE_COUNT = 3， — 小于此大小的剧院将中断并与其他剧院合并

AI_THEATRE_BREAKDOWN_MAX_DISTANCE_TO_MERGE = 200,					— Dont merge with too far away theatres, higher value means less merging will occur

AI_THEATRE_BREAKDOWN_MAX_DISTANCE_TO_MERGE = 200， — 不要与太远的影院合并，值越高意味着合并次数越少



AI_THEATRE_SEARCH_SUPPLY_NODE_MAX_DEPTH = 5,						— Max depth of breadth-first search while looking for supply nodes when out of supply

AI_THEATRE_SEARCH_SUPPLY_NODE_MAX_DEPTH = 5， — 在供应不足时查找供应节点时，广度优先搜索的最大深度

AI_THEATRE_SUPPLY_CRISIS_LIMIT = 0.1, — If a unit is standing in an area with this supply ratio it will try to escape

AI_THEATRE_SUPPLY_CRISIS_LIMIT = 0.1， — 如果一个单位站在具有此补给比的区域内，它将尝试逃脱

AI_THEATRE_AI_FRONT_MIN_DESIRED_RATIO = 0.18,						— Fronts are sorted based on priority, we nudge unit demand based on this sorting, the higher the value the more units the most important front gets

AI_THEATRE_AI_FRONT_MIN_DESIRED_RATIO = 0.18， — 前沿根据优先级排序，我们根据此排序微调单位需求，值越高，最重要的前沿获得的单位越多

},

NIndustrialOrganisation = {

工业组织 = {

ASSIGN_DESIGN_TEAM_PP_COST_PER_DAY = 0.1,					— Cost in Political Power daily generation when one MIO is assigned to a research slot. If 0, cost is entirely disabled.

ASSIGN_DESIGN_TEAM_PP_COST_PER_DAY = 0.1， — 当一个 MIO 被分配到研究槽时，政治权力的每日生成成本。如果为 0，则完全禁用 cost。

ASSIGN_INDUSTRIAL_MANUFACTURER_PP_COST_PER_DAY = 0.0,		— Cost in Political Power daily generation when one MIO is assigned to a production line. If 0, cost is entirely disabled.

ASSIGN_INDUSTRIAL_MANUFACTURER_PP_COST_PER_DAY = 0.0， — 当一个 MIO 分配给生产线时，政治权力的每日生成成本。如果为 0，则完全禁用 cost。

FUNDS_FOR_SIZE_UP = 700,									— Funds needed for a MIO to increment its size and get points to unlock traits

FUNDS_FOR_SIZE_UP = 700， — MIO 增加其大小并获得积分以解锁特征所需的资金

FUNDS_FOR_SIZE_UP_LEVEL_FACTOR = 100, 						— How much each level mutliplies the funds for size up

FUNDS_FOR_SIZE_UP_LEVEL_FACTOR = 100， — 每个级别为扩大规模而增加的资金的倍数

FUNDS_FOR_SIZE_UP_LEVEL_POW = 1.8, 							— the power we applie to the mio size when calculating funds to level up.

FUNDS_FOR_SIZE_UP_LEVEL_POW = 1.8， — 我们在计算升级资金时应用于 MIO 大小的幂。

UNLOCKED_TRAITS_PER_SIZE_UP = 1,							— Number of points for unlocking traits obtained when the MIO increments its size

UNLOCKED_TRAITS_PER_SIZE_UP = 1， — 当 MIO 增加其大小时用于解锁特征的点数

DESIGN_TEAM_CHANGE_XP_COST = 5,								— Flat cost added to the XP cost of a new equipment design. If 0, cost is entirely disabled.

DESIGN_TEAM_CHANGE_XP_COST = 5 — 添加到新设备设计的 XP 成本中的固定成本。如果为 0，则完全禁用 cost。

FUNDS_FOR_RESEARCH_COMPLETION_PER_RESEARCH_COST = 500, 	— Funds added to MIO when the Design Team has completed a research, multiplied by research_cost in technology template

FUNDS_FOR_RESEARCH_COMPLETION_PER_RESEARCH_COST = 500 — 设计团队完成研究后添加到 MIO 的资金乘以技术模板中的 research_cost

FUNDS_FOR_CREATING_EQUIPMENT_VARIANT = 0,					— Funds added to MIO when a new variant is created with the Design Team assigned to it

FUNDS_FOR_CREATING_EQUIPMENT_VARIANT = 0， — 在创建新变体并为其分配设计团队时添加到 MIO 的资金

FUNDS_FROM_MANUFACTURER_PER_IC_PER_DAY = 0.1,				— Funds added to MIO when a manufacturer is attached to a production line. Added every day proportional to IC produced.

FUNDS_FROM_MANUFACTURER_PER_IC_PER_DAY = 0.1 — 当制造商连接到生产线时添加到 MIO 的资金。每天按产量 IC 按比例添加。

MAX_FUNDS_FROM_MANUFACTURER_PER_DAY = 100,					— Max funds generated per manufacturer per day. Set to 0 for no Maximum.

MAX_FUNDS_FROM_MANUFACTURER_PER_DAY = 100 — 每个制造商每天产生的最大资金。设置为 0 表示没有 Maximum 。

DESIGN_TEAM_RESEARCH_BONUS = 0.05,							— Research bonus for applying a Design Team that matches the technology

DESIGN_TEAM_RESEARCH_BONUS = 0.05， — 申请与技术匹配的设计团队的研究加成

ENABLE_TASK_CAPACITY = false,								— Enable limited task capacity for MIOs

ENABLE_TASK_CAPACITY = false， — 为 MIO 启用有限任务容量

DEFAULT_INITIAL_TASK_CAPACITY = 0,							— Default start task capacity for each MIO (may be overriden in DB)

DEFAULT_INITIAL_TASK_CAPACITY = 0，— 每个 MIO 的默认启动任务容量（可能在 DB 中覆盖）

DEFAULT_INITIAL_POLICY_ATTACH_COST = 25,					— Default start attach cost in PP for policies

DEFAULT_INITIAL_POLICY_ATTACH_COST = 25 — 策略的默认启动连接成本（以 PP 为单位）

DEFAULT_INITIAL_ATTACH_POLICY_COOLDOWN = 180,				— Default start cooldown in days after attaching a policy

DEFAULT_INITIAL_ATTACH_POLICY_COOLDOWN = 180 – 默认开始冷却时间（在附加策略后的几天内）

LEGACY_COST_FACTOR_SCALE = 1.0,								— Multiplier to use when legacy Designer cost factors is applied to MIOs (<IdeaGroup>_cost_factor)

LEGACY_COST_FACTOR_SCALE = 1.0 — 将旧版 Designer 成本系数应用于 MIO 时使用的乘数 （<IdeaGroup>_cost_factor）

},

NProject = {

NProject = {

FACILITY_SUPPLY_WARNING_RED_RATIO = 0.66,		— When lacking supply for a facility it will be a yellow icon shown until the supply is less than this value, where it will turn red.

FACILITY_SUPPLY_WARNING_RED_RATIO = 0.66， — 当设施供应不足时，将显示黄色图标，直到供应量小于此值，然后变为红色。

DEFAULT_COMPLEXITY = 100,						— Default special project prototype phase to only require one iteration.

DEFAULT_COMPLEXITY = 100 — 默认特殊项目原型阶段只需要一次迭代。

DEFAULT_EMPTY_REWARD_WEIGHT = 1.0,				— The weight for no reward being given after a prototype iteration.

DEFAULT_EMPTY_REWARD_WEIGHT = 1.0 — 原型迭代后未给予奖励的权重。

DEFAULT_STOP_PROJECT_DAYS = 10,					— The amount of days it takes for a cancelled project to be stopped.

DEFAULT_STOP_PROJECT_DAYS = 10 — 停止已取消项目所需的天数。

DAYS_TO_REMOVE_SCIENTIST = 10,					— Amount of days needed for a scientist to be unassigned.

DAYS_TO_REMOVE_SCIENTIST = 10 — 科学家被取消分配所需的天数。

DISMANTLE_FACILITY_DAYS = 100, — Amount of days needed to dismantle a facility.

DISMANTLE_FACILITY_DAYS = 100 — 拆除设施所需的天数。

PROTOTYPE_PHASE_MAX_PROGRESS = 100,				— the number of progress points needed to finish the prototype phase and complete the project

PROTOTYPE_PHASE_MAX_PROGRESS = 100， — 完成原型阶段并完成项目所需的进度点数

MINIMUM_PROJECT_SPEED_FACTOR_FROM_SUPPLY = 0.2,	— Minimum special project research speed based on supply

MINIMUM_PROJECT_SPEED_FACTOR_FROM_SUPPLY = 0.2， — 基于供应的最小特殊项目研究速度

NEEDED_SUPPLY_FOR_FULL_SPEED_PROJECT = 3.0,	— Supply needed in province to get full research speed for special project

NEEDED_SUPPLY_FOR_FULL_SPEED_PROJECT = 3.0， — 省份所需的供应，以便为特殊项目获得全速研究

MINIMUM_PROJECT_SPEED_FACTOR_FROM_RESOURCE_SHORTAGE = 0.2, — Minimum special project research speed factor based on resource shortage^M

MINIMUM_PROJECT_SPEED_FACTOR_FROM_RESOURCE_SHORTAGE = 0.2， — 基于资源短缺的最小特殊项目研究速度因子^M

ITERATION_REWARD_DEFAULT_WEIGHT = 1.0,			— If no weight is specified, set it to 1.0

ITERATION_REWARD_DEFAULT_WEIGHT = 1.0 – 如果未指定权重，请将其设置为 1.0

DEFAULT_PROJECT_COMPLETION_SCIENTIST_EXPERIENCE_GAIN = 192.0,	— Default experience gain for assigned scientist when a project is completed

DEFAULT_PROJECT_COMPLETION_SCIENTIST_EXPERIENCE_GAIN = 192.0， — 项目完成时，指定科学家的默认经验值获取

SCIENTIST_INJURED_FACTOR = 0.0, — A factor to reduce the amount of progress gained in a program with attached injured scientist. E.g. 0.5 reduces the progress by 50%

SCIENTIST_INJURED_FACTOR = 0.0， — 减少在有受伤科学家的计划中获得的进度量的系数。例如，0.5 将进度降低 50%

RECRUIT_SCIENTIST_ONE_TRAIT_CHANCE = 0.35,		— Chance to get one trait when creating a scientist. E.g. 0.35 = 35% chance to get a trait

RECRUIT_SCIENTIST_ONE_TRAIT_CHANCE = 0.35， — 创建科学家时有几率获得一个特征。例如，0.35 = 35% 的几率获得特征

SCIENTIST_BASIC_RESEARCH_DAILY_XP_GAIN = 0.28,	— Daily experience gain for doing basic research

SCIENTIST_BASIC_RESEARCH_DAILY_XP_GAIN = 0.28， — 进行基础研究的每日经验增益

RECRUIT_SCIENTIST_COST = {						— Amount of pp to hire a scientist based on available scientist

RECRUIT_SCIENTIST_COST = { — 根据可用科学家雇用科学家的 pp 数量

25,			— pp cost if no available scientist

25， — 如果没有可用的科学家，则为 pp 成本

50,			— pp cost if 1 available scientist

50， — 如果 1 名科学家可用，则 pp 成本

75,			— pp cost if 2 available scientist

75， — 如果 2 名科学家可用，则 pp 成本

100			— pp cost if more than 2 available scientist

100 — 如果超过 2 名可用的科学家，则 PP 消耗

},

SCIENTIST_SKILL_LEVEL_THRESHOLDS = {			— Threshold for scientist to level up

SCIENTIST_SKILL_LEVEL_THRESHOLDS = { — 科学家升级的阈值

100,		— to go from level 0 to level 1

100， — 从 0 级到 1 级

100,		— to go from level 1 to level 2

100， — 从 1 级到 2 级

300,		— to go from level 2 to level 3

300， — 从 2 级到 3 级

700,		— …

1500,		— Max level = Array size

1500， — 最大级别 = 数组大小

},

SCIENTIST_SKILL_LEVEL_SPEED_MODIFIER = {		— Bonus to apply to daily phase progress according to the skill level of the scientist

SCIENTIST_SKILL_LEVEL_SPEED_MODIFIER = { — 根据科学家的技能水平应用于每日阶段进度的加成

-1.0, — -1.0 means -100% also name loc key is SCIENTIST_SKILL_LEVEL_NAME_0

-1.0， — -1.0 表示 -100% 也 name loc 键SCIENTIST_SKILL_LEVEL_NAME_0

-0.05, — -0.05 means -5%			also name loc key is SCIENTIST_SKILL_LEVEL_NAME_1

-0.05， — -0.05 表示 -5% 也 name loc 键是 SCIENTIST_SKILL_LEVEL_NAME_1

0.05,	— 0 means no change		also name loc key is SCIENTIST_SKILL_LEVEL_NAME_2

0.05， — 0 表示没有变化，名称 loc 键也SCIENTIST_SKILL_LEVEL_NAME_2

0.1, — 0.15 means +15%			…

0.1， — 0.15 表示 +15% ...





0.15,


0.25,	— Size MUST be SCIENTIST_SKILL_LEVEL_THRESHOLDS’s size + 1

0.25 — 大小必须是 SCIENTIST_SKILL_LEVEL_THRESHOLDS 的大小 + 1

},

PROJECT_LOSS_FACTOR_ON_CAPTURE = 0.2, — Factor of lost progress on project when facility is captured

PROJECT_LOSS_FACTOR_ON_CAPTURE = 0.2 — 捕获设施时项目进度损失的因子

PROJECT_CAPTURE_GAIN_RATIO = 0.2, — Ratio of difference from captured facilities ongoing project to receive to the captors’ progress

PROJECT_CAPTURE_GAIN_RATIO = 0.2， — 与捕获的设施正在进行的项目所接收的差额与捕获者进度的比率

PROJECT_CAPTURE_BREAKTHROUGH_PROGRESS = 0.1, — Ratio of breakthrough progress on capture to the captor for the facilities specialization

PROJECT_CAPTURE_BREAKTHROUGH_PROGRESS = 0.1， — 捕获突破进度与设施特化捕获者的比率

PROJECT_CAPTURE_DIMINISHING_RETURN = 0.6, — Reduced amount of gain when capturing a facility with a project you already gained. Will apply the factor each time a capture occurs. 0.6 means a reduction of 60% on next project capture.

PROJECT_CAPTURE_DIMINISHING_RETURN = 0.6 — 在捕获具有已获得的工程的设施点时，减少的增益量。将在每次捕获时应用该系数。0.6 表示下次项目捕获时减少 60%。

BASIC_RESEARCH_TECHNOLOGY_BONUS_FACTOR = 0.02, — Bonus research factor applied to technologies per scientist skill level when performing basic research in a matching facility.

BASIC_RESEARCH_TECHNOLOGY_BONUS_FACTOR = 0.02， — 在匹配设施中进行基础研究时，每个科学家技能水平应用于技术的额外研究因子。

BASIC_RESEARCH_TECHNOLOGY_BONUS_DIMINISHING_RETURN_FACTOR = 0.5, — Diminishing return on BASIC_RESEARCH_TECHNOLOGY_BONUS_FACTOR for each extra scientist performing basic research for multiple facilities.

BASIC_RESEARCH_TECHNOLOGY_BONUS_DIMINISHING_RETURN_FACTOR = 0.5 — 为多个设施进行基础研究的每增加一名科学家的BASIC_RESEARCH_TECHNOLOGY_BONUS_FACTOR回报递减。

BREAKTHROUGH_DAILY_TECHNOLOGY_GAIN = 12, — Amount in 1/100th percentage. E.g. 25 = 0.25%

BREAKTHROUGH_DAILY_TECHNOLOGY_GAIN = 12， — 1/100 百分比的金额。例 25 = 0.25%

BREAKTHROUGH_DAILY_SCIENTIST_SKILL_GAIN = 5, — Amount in 1/100th percentage gained per skill when doing basic research. E.g. 5 = 0.05% per skill level.

BREAKTHROUGH_DAILY_SCIENTIST_SKILL_GAIN = 5， — 进行基础研究时，每项技能获得 1/100% 的数量。例如，每个技能等级 5 = 0.05%。

BREAKTHROUGH_DAILY_ROCKET_SITE_GAIN = 1,		 — Amount in 1/100th percentage gained per rocket site level. E.g. 1 = 0.01% per rocket site level.

BREAKTHROUGH_DAILY_ROCKET_SITE_GAIN = 1， — 每个火箭站点级别获得的 1/100% 数量。例如，每个火箭站点级别 1 = 0.01%。

BREAKTHROUGH_DAILY_NUCLEAR_REACTOR_GAIN = 1, — Amount in 1/100th percentage gained per nuclear reactor. E.g. 2 = 0.02% per nuclear reactor.

BREAKTHROUGH_DAILY_NUCLEAR_REACTOR_GAIN = 1， — 每个核反应堆获得 1/100% 的数量。例如，每个核反应堆 2 = 0.02%。

BREAKTHROUGH_GAIN_ANIMATION_SPEED_MAX = 1.0,	 — The animation for gaining breakthrough progress is a ratio of this value and current daily gain.

BREAKTHROUGH_GAIN_ANIMATION_SPEED_MAX = 1.0， — 获得突破进度的动画是该值与当前每日收益的比率。

},

NRaids = {

NRaids = {

BASE_DAYS_TO_PREPARE = 7,						 — Base number of days required to complete raid preparation phase

BASE_DAYS_TO_PREPARE = 7 — 完成 RAID 准备阶段所需的基本天数

MAX_STATE_TARGETS_TO_EVALUATE_PER_HOUR = 50,	 — PERFORMANCE (HOURLY TICK) : higher number = faster state target re-evaulation + lower performance

MAX_STATE_TARGETS_TO_EVALUATE_PER_HOUR = 50， — 性能 （每小时刻度） ： 较高的数字 = 更快的状态目标重新评估 + 较低的性能

RAID_TARGET_ITEM_POOL_SIZE = 512,				 — PERFORMANCE (UI) : number of entries to reserve in the raid target item pool

RAID_TARGET_ITEM_POOL_SIZE = 512， — 性能 （UI） ： 要在突袭目标物品池中保留的条目数

RAID_TYPE_ICON_ITEM_POOL_SIZE = 512,			 — PERFORMANCE (UI) : number of entries to reserve in the raid type icon item pool

RAID_TYPE_ICON_ITEM_POOL_SIZE = 512， — 性能 （UI） ： 要在 RAID 类型图标项目池中保留的条目数

RAID_LOW_RISK_SETTING_DISASTER_MODIFIER = 0, — How much the disaster risk is modified when the dial is set to “low”

RAID_LOW_RISK_SETTING_DISASTER_MODIFIER = 0， — 当刻度盘设置为 “low” 时，灾害风险的修改量

RAID_MEDIUM_RISK_SETTING_DISASTER_MODIFIER = 0.1, — How much the disaster risk is modified when the dial is set to “medium”

RAID_MEDIUM_RISK_SETTING_DISASTER_MODIFIER = 0.1， — 当刻度盘设置为 “medium” 时，灾害风险的修改量

RAID_HIGH_RISK_SETTING_DISASTER_MODIFIER = 0.25, — How much the disaster risk is modified when the dial is set to “high”

RAID_HIGH_RISK_SETTING_DISASTER_MODIFIER = 0.25， — 当刻度盘设置为“高”时，灾害风险的修改量

RAID_SUCCESS_MODIFIER_THRESHOLD_BAD = -10.0, — If a success chance modifier is below this value, it will be displayed in red

RAID_SUCCESS_MODIFIER_THRESHOLD_BAD = -10.0， — 如果成功几率修饰符低于此值，它将显示为红色

RAID_SUCCESS_MODIFIER_THRESHOLD_NEUTRAL = 0.0, — If a success chance modifier is below this value, it will be displayed in yellow

RAID_SUCCESS_MODIFIER_THRESHOLD_NEUTRAL = 0.0， — 如果成功几率修饰符低于此值，它将以黄色显示

MAX_DETECTED_TARGETS_PER_HOUR = 1, — PERFORMANCE (HOURLY TICK) : max number of targets to be detected per hour, NOTE : keep this low because detection is checked against every country!

MAX_DETECTED_TARGETS_PER_HOUR = 1， — 性能（每小时滴答声）：每小时要检测到的最大目标数，注意：保持此值较低，因为每个国家/地区都会检查检测结果！

RAID_DEFAULT_TARGET_COOLDOWN_DAYS = 365, — The default cooldown (in days) for raiding the same target, can be overriden for specific raid types through script

RAID_DEFAULT_TARGET_COOLDOWN_DAYS = 365， — 突袭同一目标的默认冷却时间（以天为单位），可以通过脚本为特定突袭类型覆盖

RAID_UNIT_SPEED_MULTIPLIER = 0.1, — Global speed control

RAID_UNIT_SPEED_MULTIPLIER = 0.1， — 全局速度控制

BASE_NAVAL_COMMANDO_RAID_DISTANCE = 1500, — Max distance in kilometers

BASE_NAVAL_COMMANDO_RAID_DISTANCE = 1500， — 最大距离（以公里为单位）



RAID_LOW_RISK_SETTING_SUCCESS_MODIFIER = 0.0, — How much the success chance is modified when the dial is set to “low”

RAID_LOW_RISK_SETTING_SUCCESS_MODIFIER = 0.0， — 当刻度盘设置为 “low” 时，成功几率被修改的程度

RAID_MEDIUM_RISK_SETTING_SUCCESS_MODIFIER = 0.1, — How much the success chance is modified when the dial is set to “low”

RAID_MEDIUM_RISK_SETTING_SUCCESS_MODIFIER = 0.1， — 当刻度盘设置为“低”时，成功几率的修改量

RAID_HIGH_RISK_SETTING_SUCCESS_MODIFIER = 0.25, — How much the success chance is modified when the dial is set to “low”

RAID_HIGH_RISK_SETTING_SUCCESS_MODIFIER = 0.25， — 当刻度盘设置为 “低” 时，成功几率的修改量



TARGET_DETECTION_INTEL_TRESHOLD = 20.0, — How much intel is needed for a target to be detected?

TARGET_DETECTION_INTEL_TRESHOLD = 20.0， — 检测目标需要多少情报？



TARGET_INTEL_PER_CIVILIAN_INTEL_OVER_COUNTRY = 0.5,		— Intel level over target country is scaled by this value

TARGET_INTEL_PER_CIVILIAN_INTEL_OVER_COUNTRY = 0.5 — 目标国家/地区的 Intel 级别按此值进行缩放

TARGET_INTEL_PER_ARMY_INTEL_OVER_COUNTRY = 0.5,			— Intel level over target country is scaled by this value

TARGET_INTEL_PER_ARMY_INTEL_OVER_COUNTRY = 0.5 — 目标国家/地区的 Intel 级别按此值进行缩放

TARGET_INTEL_PER_NAVY_INTEL_OVER_COUNTRY = 0.5,			— Intel level over target country is scaled by this value

TARGET_INTEL_PER_NAVY_INTEL_OVER_COUNTRY = 0.5 — 目标国家/地区的 Intel 级别按此值进行缩放

TARGET_INTEL_PER_AIRFORCE_INTEL_OVER_COUNTRY = 0.5,		— Intel level over target country is scaled by this value

TARGET_INTEL_PER_AIRFORCE_INTEL_OVER_COUNTRY = 0.5 — 目标国家/地区的 Intel 级别按此值进行缩放



TARGET_INTEL_PER_NETWORK_STRENGTH = 0.5,				— Intel network strength in target state is scaled by this value

TARGET_INTEL_PER_NETWORK_STRENGTH = 0.5 — 目标状态下的 Intel 网络强度按此值进行缩放

TARGET_INTEL_FROM_CONTROLLED_NEIGHBOUR_STATES = 15.0,	— Flat bonus for having control over at least one neighbour state

TARGET_INTEL_FROM_CONTROLLED_NEIGHBOUR_STATES = 15.0， — 控制至少一个邻国的固定加成

TARGET_INTEL_PER_AIR_SUPERIORITY = 0.5,					— Air superiority over target region is scaled by this value

TARGET_INTEL_PER_AIR_SUPERIORITY = 0.5， — 目标区域的空中优势按此值缩放

TARGET_INTEL_FROM_DECRYPTION = 25.0,					— Flat bonus for having fully decrypted their ciphers

TARGET_INTEL_FROM_DECRYPTION = 25.0， — 完全解密其密码的固定奖励

TARGET_INTEL_PENALTY_PER_ENEMY_COUNTER_INTEL = 5.0,		— Enemy counter intel is scaled by this value

TARGET_INTEL_PENALTY_PER_ENEMY_COUNTER_INTEL = 5.0， — 敌人的反击情报按此值缩放



RAID_OUTCOME_REPORT_DAYS_TO_LIVE = 30, — How many days after a raid has ended will the raid outcome report be visible on the map before being automatically dismissed

RAID_OUTCOME_REPORT_DAYS_TO_LIVE = 30， — 突袭结果报告在突袭结束后的多少天会在地图上可见，然后会自动关闭



NUCLEAR_BOMB_PRODUCTION_SCALE = 2555.0,					— +1 nuclear_production gives 1 nuke per 7 years

NUCLEAR_BOMB_PRODUCTION_SCALE = 2555.0， — +1 nuclear_production 每 7 年提供 1 枚核弹

THERMONUCLEAR_BOMB_PRODUCTION_SCALE = 2555.0,			— +1 nuclear_production gives 1 nuke per 7 years

THERMONUCLEAR_BOMB_PRODUCTION_SCALE = 2555.0， — +1 nuclear_production 每 7 年提供 1 枚核弹



NUCLEAR_BOMB_MIN_DAMAGE_PERCENT = 0.1,					— Minimum damage from nukes as a percentage of current strength/organisation

NUCLEAR_BOMB_MIN_DAMAGE_PERCENT = 0.1， — 核弹的最小伤害占当前力量/组织的百分比

NUCLEAR_BOMB_MAX_DAMAGE_PERCENT = 0.9,					— Minimum damage from nukes as a percentage of current strength/organisation

NUCLEAR_BOMB_MAX_DAMAGE_PERCENT = 0.9， — 核弹的最小伤害占当前力量/组织的百分比

THERMONUCLEAR_BOMB_MIN_DAMAGE_PERCENT = 0.6,			— Minimum damage from nukes as a percentage of current strength/organisation

THERMONUCLEAR_BOMB_MIN_DAMAGE_PERCENT = 0.6， — 核弹的最小伤害占当前强度/组织的百分比

THERMONUCLEAR_BOMB_MAX_DAMAGE_PERCENT = 0.9,			— Minimum damage from nukes as a percentage of current strength/organisation

THERMONUCLEAR_BOMB_MAX_DAMAGE_PERCENT = 0.9， — 核弹的最小伤害占当前力量/组织的百分比

NUCLEAR_RAID_CATEGORY_NAME = “nuclear_raids”, — The raid category to activate when clicking on the “nuclear” mission button for a rocket

NUCLEAR_RAID_CATEGORY_NAME = “nuclear_raids”， — 点击火箭的 “nuclear” 任务按钮时要激活的突袭类别



ARMY_TRANSFER_MOVE_SAFELY = true,						— Whether to move safely when transferring divisions to the raid source

ARMY_TRANSFER_MOVE_SAFELY = true， — 在将师转移到突袭源时是否安全移动

ARMY_TRANSFER_AVOID_ENEMY = true,						— Whether to avoid enemy when transferring divisions to the raid source

ARMY_TRANSFER_AVOID_ENEMY = true， — 在将师转移到突袭源时是否避开敌人



MAX_TARGETS_TO_UPDATE_PER_FRAME = 100,					— PERFORMANCE (FRAME) : max raid targets to evaluate per frame (affects raid map icon refresh rate)

MAX_TARGETS_TO_UPDATE_PER_FRAME = 100， — 性能（帧）：每帧要评估的最大 RAID 目标数（影响 RAID 地图图标刷新率）

},

}





